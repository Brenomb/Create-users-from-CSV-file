<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Digita.Tustena.Core</name>
    </assembly>
    <members>
        <member name="F:Digita.Tustena.Core.ActiveModules.MailCenter">
            <summary>
            Modulo DEM
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.ApplicationArgumentsUtils.EncodeParameterString(System.String)">
            <summary>
              Encodes the parameter string.
            </summary>
            <param name="src">The SRC.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ApplicationArgumentsUtils.DecodeParameterString(System.String)">
            <summary>
              Decodes the parameter string.
            </summary>
            <param name="src">The SRC.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ApplicationArgumentsUtils.ToString(System.Collections.Hashtable)">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="ht"> The ht. </param>
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.ApplicationArgumentsUtils.Parse(System.String[])">
            <summary>
              Method which will parse the string input and return a hashtable
            </summary>
            <param name="args"> </param>
            <returns> </returns>
        </member>
        <member name="M:Digita.Tustena.Core.ApplicationArgumentsUtils.AddKeyValuePair(System.Collections.Hashtable,System.String,System.String)">
            <summary>
              Add the arguments in the form of a keyvalue pair to Hashtable
            </summary>
            <param name="argTable"> </param>
            <param name="key"> </param>
            <param name="value"> </param>
        </member>
        <member name="M:Digita.Tustena.Core.ApplicationArgumentsUtils.GetArgumentsString(System.Collections.Hashtable)">
            <summary>
              Gets the arguments string.
            </summary>
            <param name="argsTable"> The args table. </param>
            <returns> </returns>
        </member>
        <member name="M:Digita.Tustena.Core.ApplicationArgumentsUtils.HasReadableContent(System.String)">
            <summary>
              Determines whether [has readable content] [the specified test].
            </summary>
            <param name="test"> The test. </param>
            <returns>
              <c>true</c> if [has readable content] [the specified test]; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.ApplicationArgumentsUtils.SafeCastToString(System.Object,System.String)">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="src"> The SRC. </param>
            <param name="defaultValIfNull"> The default val if null. </param>
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.ApplicationArgumentsUtils.Unwrap(System.String,System.String)">
            <summary>
              Unwraps the specified SRC.
            </summary>
            <param name="src"> The SRC. </param>
            <param name="wrapperString"> The wrapper string. </param>
            <returns> </returns>
        </member>
        <member name="M:Digita.Tustena.Core.ApplicationArgumentsUtils.GetArgumentValue(System.Collections.Hashtable,System.String,System.String)">
            <summary>
              Gets the argument value.
            </summary>
            <param name="ht"> The ht. </param>
            <param name="argumentKey"> The argument key. </param>
            <param name="defaultIfNullOrNotFound"> The default if null or not found. </param>
            <returns> </returns>
        </member>
        <member name="M:Digita.Tustena.Core.AppManager.RestartWebApplication">
            <summary>
            Restarts the Web Application
            Requires either Full Trust (HttpRuntime.UnloadAppDomain) 
            or Write access to web.config.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Core.Attributes.ListTypeDefinitionAttribute.TableName">
            <summary>
            Use this property if entity has not a CRMTables
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Caching.ICache.InvokeCached``1(System.Linq.Expressions.Expression{System.Func{``0}},Digita.Tustena.Core.Caching.CachePolicy)">
            <summary>
            Invokes the given method, using a cached result if possible. If a result is not cached, the computed result
            is cached using the given policy. For example, use as:
            <code>
            ICache cache = ...
            string path = ...
            var text = cache.InvokeCached(() => Digita.VirtualFileSystem.VirtualFile.ReadAllText(path), new CachePolicy(expiresAfter: TimeSpan.FromMinutes(30)));
            </code>
            </summary>
        </member>
        <member name="P:Digita.Tustena.Core.Caching.CachePolicy.RenewLeaseOnAccess">
            <summary>
            If specified, each read of the item from the cache will reset the expiration time
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Caching.CacheKeyBuilder.By(System.Object)">
            <summary>
            Adds the given value to the key
            </summary>
        </member>
        <member name="T:Digita.Tustena.Core.Caching.ICacheKey">
            <summary>
            This interface allows custom types to be cache keys
            </summary>
        </member>
        <member name="T:Digita.Tustena.Core.Caching.SignaledChangeMonitor">
            <summary>
            Cache change monitor that allows an app to fire a change notification
            to all associated cache items.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.TypeOfService.InstalmentPostponed">
            <summary>
            old InDays
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.TypeOfService.Consumption">
            <summary>
            old InHour enum value
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.TypeOfService.Consumptive">
            <summary>
             old FixedHour enum value
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.TypeOfService.InstalmentManual">
            <summary>
            old FixedInstalment enum value
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.LocalizeMode.Standard">
            <summary>
            Simple input field and textarea field
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.LocalizeMode.Simple">
            <summary>
            input field only
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.LocalizeMode.TextArea">
            <summary>
            textarea field only
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.LocalizeMode.TitleAndHtml">
            <summary>
            simple input field with Html editor instead of textarea
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.LocalizeMode.Html">
            <summary>
            Html editor instead of textarea
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.CompanyLoadPerformanceSettings.LoadPortalAccount">
            <summary>
            Load record from table PORTAL_ACCOUNTS
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.ContactLoadPerformanceSettings.LoadPortalAccount">
            <summary>
            Load record from table PORTAL_ACCOUNTS
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.LeadLoadPerformanceSettings.LoadPortalAccount">
            <summary>
            Load record from table PORTAL_ACCOUNTS
            </summary>
        </member>
        <member name="T:Digita.Tustena.Core.Enums.PluginCodeType">
            <summary>
            Plugin or Extension implementation
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.PluginCodeType.Plugin">
            <summary>
            IPlugin Implementation
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.PluginCodeType.Extension">
            <summary>
            IEventExtension Implementation
            </summary>
        </member>
        <member name="T:Digita.Tustena.Core.Enums.ExchangeSynchronizationItemDeleteMode">
            <summary>Represents deletion modes.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Digita.Tustena.Core.Enums.BusinessObjectType.Custom" -->
        <member name="F:Digita.Tustena.Core.Enums.BusinessObjectType.ExtensionsPlayground">
            <summary>
            Extensions Playground BO, used to test the BO-extension capabilities of the system
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.NormalizeParsingMode.RemoveNotFound">
            <summary>
            Insert the new Email Types and remove the Email that was not found in the data.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.NormalizeParsingMode.ReplaceOnly">
            <summary>
            Insert the new Email Types and DOES NOT remove the Email that was not found in the data.
            </summary>
        </member>
        <member name="T:Digita.Tustena.Core.Enums.ListChanges">
            <summary>
            Is the type of change applied
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.ListChanges.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.ListChanges.Added">
            <summary>
            Added
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.ListChanges.Deleted">
            <summary>
            Deleted
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.ListChanges.Updated">
            <summary>
            Updated
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.ListChanges.Replaced">
            <summary>
            Replaced
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.Unknown">
            <summary>
            Sending Unknown Error
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.Quota">
            <summary>
             452 Mailbox full
             Account over quota (Reached MaxMBSize in USER.TAB) or Insufficient disk space to receive the message. SMTP Log File: RCPT=EFULL
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.Spam">
            <summary>
            504 You are blocked as spammer
            You Mail has been marked as [SPAM] from recepient
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.Bounce">
            <summary>
            The Mail has been bounced between more server
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.Undelivered">
            <summary>
            The Mail is in Mail Server Sending Queue
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.Delay">
            <summary>
            The Mail has encount an Delay Error. Too much time spent to sent.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.Failed">
            <summary>
            The Send has failed, for another problem
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.BadAddress">
            <summary>
            501 Address Syntax Error
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.BadSender">
             <summary>
            Warning Settings Error
             </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.ProtocolError">
             <summary>
            Mail cannot be sended. The protocol was wrong or not accepted by server
             </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.NoEMailFound">
            <summary>
            No Email found in Spooler Snapshot Data
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.DoubleEMailFound">
            <summary>
            All the Address Mails is just sended
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.AnagraphicAccessDenied">
            <summary>
            Cannot access to Anagraphic
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.DeliveryLimitReached">
            <summary>
            You sent more emails that you can send
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.MailingListFlagNotChecked">
            <summary>
            Mailing list flag not setted
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.PrivacySettingsAllowMassiveEmailNotChecked">
            <summary>
            Privacy setting Allow Massive Email not setted
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.MailListStatus.UnifiedMessageSendingProfileError">
            <summary>
            There is an error on SendingProfile
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Enums.HtmlColorAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="color">html color esa #RGB</param>
        </member>
        <member name="P:Digita.Tustena.Core.Enums.HtmlColorAttribute.Color">
            <summary>
            Return color in html format #RGB, null for None
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.TargetListCrossType.Campaign">
            <summary>
            Static List
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.TargetListCrossType.MailingList">
            <summary>
            Dynamic List
            </summary>
        </member>
        <member name="T:Digita.Tustena.Core.Enums.Changes">
            <summary>
            Is the type of change applied
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.Changes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.Changes.Added">
            <summary>
            Added
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.Changes.Deleted">
            <summary>
            Deleted
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.Changes.Updated">
            <summary>
            Updated
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.Changes.Replaced">
            <summary>
            Replaced
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.ApprovalPendingStatus.Removed">
            <summary>
            Only for mailing case
            </summary>
        </member>
        <member name="T:Digita.Tustena.Core.Enums.InfluencerRoleType">
            <summary>
            InfluencerRoleType - Used in opportunity / reference
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.InfluencerRoleType.Initiator">
            <summary>
             first identifies the need to buy a particular product or service to solve an organisational problem
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.InfluencerRoleType.Decider">
            <summary>
            ultimately approves all or any part of the entire buying decision -- whether to buy, what to buy, how to buy, and where to buy;
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.InfluencerRoleType.Buyer">
            <summary>
            holds the formal authority to select the supplier and to arrange terms of condition
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.InfluencerRoleType.User">
            <summary>
            consumes or uses the product or service
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.InfluencerRoleType.Gatekeeper">
            <summary>
             controls information or access or both, to decision makers and influencers
            </summary>
        </member>
        <member name="T:Digita.Tustena.Core.Enums.OpportunityRefStatusType">
            <summary>
            OpportunityRefStatusType - Used in opportunity / reference
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.OpportunityRefStatusType.Mentors">
            <summary>
             They believe in you, your brand, your company, your reputation and your product. They want you to win and they’ll share information and open doors for you. Their reasons for mentoring you are usually transparent to everyone in their company. They simply believe your solution is the better choice.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.OpportunityRefStatusType.Supportes">
            <summary>
            They may prefer your solution to other options, but they have less of a vested interest in pushing an outcome than the mentors do. The advantage of having supporters prefer your solution is that many voices can influence what the collective does. The disadvantage is that they lead you to believe you have more people in your corner whom you can count on when the chips are down. But if the tide of popular opinion should shift, supporters may swing their vote.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.OpportunityRefStatusType.Resistors">
            <summary>
            They aren’t so much against you and your solution as much as they are against any change being made to the status quo. Resistors identify with the old ways and have no role models for the new activity. The best way to handle resistors is to help them understand the new rewards that come with a new work process
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.OpportunityRefStatusType.Neutrals">
            <summary>
            They haven’t made up their minds if they support you or not, or they don’t really care what solution is selected. They may be content to follow the decisions made by others or they may feel that all suppliers are the same. If there’s a risk, they won’t remain neutral. You have to weigh how helpful they will be as supporters or how damaging they could be working against you.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.OpportunityRefStatusType.Enemies">
            <summary>
            They are against you and your solutions. Beyond the resistors who don’t want to see anyone’s new solution put in place, the enemies have decided you should lose the deal. Sometimes they act as your competitors’ mentors and work behind the scenes to give them an advantage. Once you identify them, you have to make a conscious effort to treat them with care.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.DateTimePrecision.DateAndTime">
            <summary>
            Property handle date part and time part completely
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.DateTimePrecision.DateAndTimeUntilSeconds">
            <summary>
            Property handle date part and time part until seconds part
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.DateTimePrecision.DateAndTimeUntilMinutes">
            <summary>
            Property handle date part and time part until minutes part
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.DateTimePrecision.OnlyDate">
            <summary>
            Property handle only date part
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.DateTimePrecision.OnlyTime">
            <summary>
            Property handle only time part
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.DateTimePrecision.OnlyTimeUntilSeconds">
            <summary>
            Property handle only time part until seconds part
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Enums.DateTimePrecision.OnlyTimeUntilMinutes">
            <summary>
            Property handle only time part until minutes part
            </summary>
        </member>
        <member name="T:Digita.Tustena.Core.Collections.DualKey`1">
            <summary>
            Accept who interchangiable  keys
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2">
            <summary>
            A ConcurrentDictionary that automatically removes items after a period of time.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="!:ExpiringDictionary&lt;TKey, TValue&gt;"/> class.
            </summary>
            <param name="expiration">The amount of time before entries expire.</param>
            <param name="writesBeforeCleanup">The number of writes between cleanups.</param>
            <exception cref="T:System.ArgumentException">
            expiration
            or
            writesBeforeCleanup
            </exception>
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="P:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:TValue"/> with the specified key.
            </summary>
            <value>
            The <see cref="!:TValue"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.Cleanup">
            <summary>
            Removes expired entries from the dictionary.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="P:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.KeyValuePairs">
            <summary>
            Gets the key value pairs.
            </summary>
            <value>
            The key value pairs.
            </value>
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.Collections.ExpirableList`1.#ctor(System.Int32,System.TimeSpan,System.Int32)">
            <summary>
            Define a list that automaticly remove expired objects.
            </summary>
            <param name="_interval"></param>
            The interval at which the list test for old objects.
            <param name="_expiration"></param>
            The TimeSpan an object stay valid inside the list.
        </member>
        <member name="T:Digita.Tustena.Core.Collections.ThreadSafeList`1">
            <summary>
            Class ThreadSafeList. This class cannot be inherited.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Digita.Tustena.Core.Concurrents">
            <summary>
            Users concurrency
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Concurrents.Check(System.Int32)">
            <summary>
             Check for user access concurrency
            </summary>
            <param name="userId">The user id.</param>
        </member>
        <member name="T:Digita.Tustena.Core.ConfigSettings">
            <summary>
                Configuration settings.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.TustenaLicenceKeyUri">
            <summary>
                Gets the TustenaLicenceKeyUri.
            </summary>
            <value>Default</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.DateToStartWithOrdersDischarge">
            <summary>
                Gets the Date to start with Discharge order rows.
            </summary>
            <value>The tustena licence key.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.DateToStartWithPaymentRule">
            <summary>
                Gets the Date to start Payment rule.
            </summary>
            <value>The tustena licence key.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.TustenaLicenceKey">
            <summary>
                Gets the tustena licence key.
            </summary>
            <value>The tustena licence key.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.TcommerceProdImgPath">
            <summary>
                Gets the tcommerce prod img path.
            </summary>
            <value>The tcommerce prod img path.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.NotifyErrorToDevelopers">
            <summary>
                Gets a value indicating whether [notify error to developers].
            </summary>
            <value>
                <c>true</c> if [notify error to developers]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.RemoteManagementUrl">
            <summary>
                Gets the remote management authorized URL.
            </summary>
            <value>The remote management URL.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.Connection">
            <summary>
                Gets the connection string for sql.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.UsersDatabaseConnection">
            <summary>
                Gets the users database connection string for sql.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.MaxResults">
            <summary>
                Gets the maximun number of results in some repeaters.
            </summary>
            <value>The max results.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.SupportedLanguages">
            <summary>
                Gets the supported languages 2-letter code divided by a ';'.
            </summary>
            <value>The supported languages.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.SupportedLanguagesDescription">
            <summary>
                Gets the supported languages description divided by a ';'.
            </summary>
            <value>The supported languages description.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.TustenaMainMail">
            <summary>
                Gets the tustena main email address.
            </summary>
            <value>The tustena main email.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.RobotMail">
            <summary>
                Gets the scheduled/automatic processes email address.
            </summary>
            <value>The robot email.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.ProjectRobotMail">
            <summary>
                Gets the scheduled/automatic processes email address for projects.
            </summary>
            <value>The project robot mail.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.TicketRepositoryMail">
            <summary>
                Gets the scheduled/automatic processes email address for tickets.
            </summary>
            <value>The ticket repository mail.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.MailSpoolPath">
            <summary>
                Gets the mail spool path.
            </summary>
            <value>The mail spool path.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.SpoolerDataPath">
            <summary>
                Gets the app data path.
            </summary>
            <value>The app data path.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.SchedulerInterval">
            <summary>
                Gets the scheduler interval.
            </summary>
            <value>The scheduler interval.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.SMTPServer">
            <summary>
                Gets the SMTP server.
            </summary>
            <value>The SMTP server.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.SMTPSecure">
            <summary>
                Gets the SMTP server.
            </summary>
            <value>The SMTP server.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.SMTPPort">
            <summary>
                Gets the SMTP port.
            </summary>
            <value>The SMTP port.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.SMTPUser">
            <summary>
                Gets the SMTP user.
            </summary>
            <value>The SMTP user.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.SMTPPassword">
            <summary>
                Gets the SMTP password.
            </summary>
            <value>The SMTP password.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.DataStoragePath">
            <summary>
                Gets the data storage path.
            </summary>
            <value>The data storage path.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.SpoolFormat">
            <summary>
                Gets the spool format (XMAIL, MSSMTP).
            </summary>
            <value>The spool format.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.TustenaErrorMail">
            <summary>
                Gets the Tustena error mail address for error notifications.
            </summary>
            <value>The tustena error mail.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.DomainIntegratedAuth">
            <summary>
                Gets a value indicating whether to use domain integrated authentication.
            </summary>
            <value>
                <c>true</c> if [domain integrated auth]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.DomainIntegratedIPMask">
            <summary>
                Gets the domain integrated IP mask for access restriction within domain.
            </summary>
            <value>The domain integrated IP mask.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.DNS1">
            <summary>
                Gets the DNS server 1 for domain names resolution.
            </summary>
            <value>The Dns1.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.DNS2">
            <summary>
                Gets the DNS server 2 for domain names resolution.
            </summary>
            <value>The Dns2.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.Mode">
            <summary>
                Gets the mode (debug,normal).
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.TustenaMailReturnPath">
            <summary>
                Gets the tustena mail return path for bounce emails.
            </summary>
            <value>The tustena mail return path.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.TustenaUrl">
            <summary>
            Gets the external URI used to reach Tustena over the internet.
            </summary>
            <value>The external URI.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.ExternalUri">
            <summary>
                Gets the external URI used to reach Tustena over the internet.
            </summary>
            <value>The external URI.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.TustenaDemo">
            <summary>
                Private
            </summary>
            <value><c>true</c> if [tustena demo]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ConfigSettings.MailPerMinute">
            <summary>
                Gets the number of mail to spool per minute.
            </summary>
            <value>The mail per minute.</value>
        </member>
        <member name="M:Digita.Tustena.Core.ConfigSettings.GetSetting``1(System.String,``0)">
            <summary>
            Retrieve a custom setting
            </summary>
            <param name="name">setting name</param>
            <param name="defaultValue">default value</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ConfigSettings.GetSetting``1(System.String)">
            <summary>
                Retrieve a custom setting
            </summary>
            <param name="name">setting name</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.Crypto.XORCipher.Encrypt(System.String,System.String)">
            <summary>
            Encode the specified data with its key.  
            </summary>
            <param name="data">The data.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.Crypto.XORCipher.Decrypt(System.String,System.String)">
            <summary>
            Decode the specified data with its key.
            </summary>
            <param name="data">The data.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DataGenerationUtils.FillPublicInstancePropertiesWithRandomValues(System.Object,System.Boolean,System.String[])">
            <summary>
            Fills the public instance properties with random values.
            </summary>
            <param name="self">The self.</param>
            <param name="preserveDefaults">if set to <c>true</c> [preserve defaults].</param>
            <param name="ignore">The ignore.</param>
            <exception cref="T:System.InvalidOperationException">Cannot fill the properyty  + pi.Name +  of type  + pi.PropertyType</exception>
        </member>
        <member name="M:Digita.Tustena.Core.DataGenerationUtils.GetTimeBasedRandomValue(System.Type,System.DateTime)">
            <summary>
              Gets the time based random value.
            </summary>
            <param name="propertyType"> Type of the property. </param>
            <param name="now"> The now. </param>
            <returns> </returns>
        </member>
        <member name="F:Digita.Tustena.Core.EdmEnumMode.AsEnum">
            <summary>
            DOESN'T WORK (UNKNOWN MOTIVATION, NEEDS INVESTIGATION)
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.EdmEnumMode.AsString">
            <summary>
            Emulate enum values as strings
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.EdmEnumMode.AsInt">
            <summary>
            Emulate enum values as integers
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.DateAge.GetAgedDate(System.DateTime)">
            <summary>
            return a representation of a date time with hour/minute interval
            </summary>
            <param name="d">date</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAge.GetAgedDay(System.DateTime,Digita.Tustena.Core.UserConfig)">
            <summary>
            return a representation of a datetime with a day interval
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Core.DiscountFormulaHelper">
            <summary>
            Utility for Generate or Calculate Discount Formula
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.DiscountFormulaHelper.Discount(System.Decimal,System.String)">
            <summary>
            Apply discount string to price
            </summary>
            <param name="price">the value to apply discount formula</param>
            <param name="discount">the discount formula</param>
            <returns>the price with discount formula applied</returns>
        </member>
        <member name="M:Digita.Tustena.Core.DiscountFormulaHelper.IsValidDiscountFormula(System.String)">
            <summary>
            Check if is a valid discount formula
            </summary>
            <param name="discount">the discount formula</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DiscountFormulaHelper.FormatDiscountFormula(System.String,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Format the discount formula to print with currency symbol
            </summary>
            <param name="discount"></param>
            <param name="currencySymbol"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DiscountFormulaHelper.DiscountFormulaArray(System.String,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Format the discount formula to print with currency symbol
            </summary>
            <param name="discount"></param>
            <param name="currencySymbol"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DiscountFormulaHelper.SplitDiscountFormula(System.String)">
            <summary>
            Split the discount formula in chunks to apply
            </summary>
            <param name="discount"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DiscountFormulaHelper.GetHumanReadableDiscountFormula(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Generate a discount formula passing original price and unit price in a human readable format
            This calculate the max discount and round the remaining value with [+-{C}.{XX}] format
            </summary>
            <param name="listPrice"></param>
            <param name="unitPrice"></param>
            <returns>the formatted discount formula</returns>
        </member>
        <member name="T:Digita.Tustena.Core.HashidsNet.Hashids">
            <summary>
            Generate YouTube-like hashes from one or many numbers. Use hashids when you do not want to expose your database ids to the user.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.#ctor">
            <summary>
            Instantiates a new Hashids with the default setup.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Instantiates a new Hashids en/de-coder.
            </summary>
            <param name="salt"></param>
            <param name="minHashLength"></param>
            <param name="alphabet"></param>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.Encode(System.Int32[])">
            <summary>
            Encodes the provided numbers into a hashed string
            </summary>
            <param name="numbers">the numbers to encode</param>
            <returns>the hashed string</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.Encode(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Encodes the provided numbers into a hashed string
            </summary>
            <param name="numbers">the numbers to encode</param>
            <returns>the hashed string</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.Decode(System.String)">
            <summary>
            Decodes the provided hash into
            </summary>
            <param name="hash">the hash</param>
            <exception cref="T:System.OverflowException">if the decoded number overflows integer</exception>
            <returns>the numbers</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.EncodeHex(System.String)">
            <summary>
            Encodes the provided hex string to a hashids hash.
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.DecodeHex(System.String)">
            <summary>
            Decodes the provided hash into a hex-string
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.DecodeLong(System.String)">
            <summary>
            Decodes the provided hashed string into an array of longs 
            </summary>
            <param name="hash">the hashed string</param>
            <returns>the numbers</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.EncodeLong(System.Int64[])">
            <summary>
            Encodes the provided longs to a hashed string
            </summary>
            <param name="numbers">the numbers</param>
            <returns>the hashed string</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.EncodeLong(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Encodes the provided longs to a hashed string
            </summary>
            <param name="numbers">the numbers</param>
            <returns>the hashed string</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.Encrypt(System.Int32[])">
            <summary>
            Encodes the provided numbers into a string.
            </summary>
            <param name="number">the numbers</param>
            <returns>the hash</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.EncryptHex(System.String)">
            <summary>
            Encrypts the provided hex string to a hashids hash.
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.Decrypt(System.String)">
            <summary>
            Decodes the provided numbers into a array of numbers
            </summary>
            <param name="hash">hash</param>
            <returns>array of numbers.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.DecryptHex(System.String)">
            <summary>
            Decodes the provided hash to a hex-string
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.SetupSeps">
            <summary>
            
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.SetupGuards">
            <summary>
            
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.GenerateHashFrom(System.Int64[])">
            <summary>
            Internal function that does the work of creating the hash
            </summary>
            <param name="numbers"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.Hashids.ConsistentShuffle(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="alphabet"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Core.HashidsNet.IHashids">
            <summary>
            Describes a Hashids provider
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.IHashids.Decode(System.String)">
            <summary>
            Decodes the provided hashed string.
            </summary>
            <param name="hash">the hashed string</param>
            <exception cref="T:System.OverflowException">if one or many of the numbers in the hash overflowing the integer storage</exception>
            <returns>the numbers</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.IHashids.DecodeLong(System.String)">
            <summary>
            Decodes the provided hashed string into longs
            </summary>
            <param name="hash">the hashed string</param>
            <returns>the numbers</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.IHashids.DecodeHex(System.String)">
            <summary>
            Decodes the provided hashed string into a hex string
            </summary>
            <param name="hash">the hashed string</param>
            <returns>the hex string</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.IHashids.Encode(System.Int32[])">
            <summary>
            Encodes the provided numbers into a hashed string
            </summary>
            <param name="numbers">the numbers</param>
            <returns>the hashed string</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.IHashids.Encode(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Encodes the provided numbers into a hashed string
            </summary>
            <param name="numbers">the numbers</param>
            <returns>the hashed string</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.IHashids.EncodeLong(System.Int64[])">
            <summary>
            Encodes the provided numbers into a hashed string
            </summary>
            <param name="numbers">the numbers</param>
            <returns>the hashed string</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.IHashids.EncodeLong(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Encodes the provided numbers into a hashed string
            </summary>
            <param name="numbers">the numbers</param>
            <returns>the hashed string</returns>
        </member>
        <member name="M:Digita.Tustena.Core.HashidsNet.IHashids.EncodeHex(System.String)">
            <summary>
            Encodes the provided hex string
            </summary>
            <param name="hex">the hex string</param>
            <returns>the hashed string</returns>
        </member>
        <member name="P:Digita.Tustena.Core.ProductUtils.ProductVersion">
            <summary>
            Gets the build version.
            </summary>
            <value>The build version.</value>
        </member>
        <member name="P:Digita.Tustena.Core.ProductUtils.FileVersion">
            <summary>
            Gets the build version.
            </summary>
            <value>The build version.</value>
        </member>
        <member name="F:Digita.Tustena.Core.RunningEnvironments.KnownRunningEnvironments.Legacy">
            <summary>
            Classic Tustena environement (on-premise)
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.RunningEnvironments.KnownRunningEnvironments.Cloud">
            <summary>
            Cloud environment
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.PoLang.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Set the GETTEXT PO FORMAT
            </summary>
            <param name="message">language string</param>
            <param name="messagePlural">language string in plural form</param>
            <param name="messageZero">language string with zero results</param>
            <param name="messageOne">language string with one result</param>
            <param name="messageTwo">language string with two results</param>
        </member>
        <member name="T:Digita.Tustena.Core.Language">
            <summary>
            Language resource helper
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Language._log">
            <summary>
            Reference to the logger
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Language.PREFIX1">
            <summary>
            char !
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Language.PREFIX2">
            <summary>
            char %
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Language.HasResource(System.String)">
            <summary>
            Determines whether the specified key has the resource ( check with language of current thread ).
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key has resource; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.Language.ExistsResource(System.String)">
            <summary>
            Determines whether the specified key has the resource ( check with language of current thread and 'en')
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key has resource; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.Language.GetString(System.String,System.Object[])">
            <summary>
            Gets the string from resource name. Empty string if resource doesn't found
            </summary>
            <param name="key">The key.</param>
            <param name="pars">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.Language.GetStringWithParameters(System.String,System.Object[])">
            <summary>
            Gets the string from resource name and replace your parameters.
            </summary>
            <param name="key">The key.</param>
            <param name="pars">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.Language.GetStringSafe(System.String,System.String)">
            <summary>
            Gets the string from resource name.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultText">The default text in case of missing resource</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.Language.GetString(System.String)">
            <summary>
            Gets the string from resource name.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.Language.GetStringCount(System.String,System.Int32)">
            <summary>
            Gets the string from resource name.
            </summary>
            <param name="key">The key.</param>
            <param name="count">number to be replaced in string %d</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Core.Logger">
            <summary>
                Utility class for logging to event log or file.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Logger.WriteToLog(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
                Logs the given text to the windows event log with the given log type.
            </summary>
            <param name="logEntry">Text to log.</param>
            <param name="type">Type of log entry.</param>
        </member>
        <member name="M:Digita.Tustena.Core.Logger.LogException(System.Exception)">
            <summary>
                Logs an exception.
            </summary>
            <param name="ex">The exception logget</param>
        </member>
        <member name="M:Digita.Tustena.Core.Logger.WriteLogToFile(System.String,System.String)">
            <summary>
                Logs the given text to the file log.
            </summary>
            <param name="path">path of log.</param>
            <param name="log">Text to log.</param>
        </member>
        <member name="M:Digita.Tustena.Core.AsyncLogWriter.#ctor(System.String,System.String)">
            <summary>
                Open a new LogThread
            </summary>
            <param name="folderName">folderName without LogDataPath</param>
            <param name="logName">File name</param>
        </member>
        <member name="M:Digita.Tustena.Core.AsyncLogWriter.#ctor(System.String)">
            <summary>
                Open a new LogThread from fullpath
            </summary>
            <param name="path">The full log path including static filename (without date)</param>
        </member>
        <member name="M:Digita.Tustena.Core.AsyncLogWriter.#ctor">
            <summary>
                Open a new LogThread for error handling
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.ThreadedLogger.LogException(System.Exception,System.String)">
            <summary>
                Log The exception
            </summary>
            <param name="ex">the exception</param>
            <param name="description">optional description</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ThreadedLogger.LogMessage(System.String,System.Boolean)">
            <summary>
                Write string to log
            </summary>
            <param name="row">log row string</param>
            <param name="newLine">add newline (default false)</param>
        </member>
        <member name="M:Digita.Tustena.Core.Otp.OtpTemporaryToken.GenerateOTP(System.Byte[])">
            <summary>
            
            </summary>
            <param name="hashBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.Otp.OtpTokenGenerator.GetOtpToken">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.Otp.OtpTokenGenerator.GetOtpToken(System.Guid)">
            <summary>
            
            </summary>
            <param name="lic"></param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Core.LockHelper">
            <summary>
            Class ReaderWriterLockSlimExtensions.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.LockHelper.Read(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Put Read lock the specified object. Many threads can enter Read lock simultaneously
            using (_sync.Read())
            {
            // do writing here
            }
            </summary>
            <param name="obj">The object.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.LockHelper.Write(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Put Write lock the specified object. Only one thread can enter Write lock and no other thread can enter any lock
            using (_sync.Write())
            {
            // do writing here
            }
            </summary>
            <param name="obj">The object.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.LockHelper.Ungrade(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Put Write lock the specified object. only one thread can enter Ungrade­able lock but other threads can still enter Read lock
            using (_sync.Ungrade())
            {
            // do writing here
            }
            </summary>
            <param name="obj">The object.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="T:Digita.Tustena.Core.ReadOnlyDictionary`2">
            <summary>
              Read-only dictionary
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:Digita.Tustena.Core.ReadOnlyDictionary`2.Keys">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the
              <see
                cref="T:System.Collections.Generic.IDictionary`2">
              </see>
              .
            </summary>
            <returns>
              An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements
              <see
                cref="T:System.Collections.Generic.IDictionary`2">
              </see>
              .
            </returns>
        </member>
        <member name="P:Digita.Tustena.Core.ReadOnlyDictionary`2.Values">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the
              <see
                cref="T:System.Collections.Generic.IDictionary`2">
              </see>
              .
            </summary>
            <returns>
              An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements
              <see
                cref="T:System.Collections.Generic.IDictionary`2">
              </see>
              .
            </returns>
        </member>
        <member name="P:Digita.Tustena.Core.ReadOnlyDictionary`2.Item(`0)">
            <summary>
              Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Digita.Tustena.Core.ReadOnlyDictionary`2.Count">
            <summary>
              Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <returns>
              The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
        </member>
        <member name="P:Digita.Tustena.Core.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
              Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <returns>
              true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
              Initializes a new instance of the <see cref="T:Digita.Tustena.Core.ReadOnlyDictionary`2" /> class.
            </summary>
            <param name="sourceDictionary">The source dictionary.</param>
            <exception cref="T:System.ArgumentNullException">sourceDictionary;sourceDictionary cannot be null</exception>
        </member>
        <member name="M:Digita.Tustena.Core.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)">
            <summary>
              Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Digita.Tustena.Core.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">
              The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </param>
            <returns>
              true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)">
            <summary>
              Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
              true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original
              <see
                cref="T:System.Collections.Generic.IDictionary`2">
              </see>
              .
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Digita.Tustena.Core.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
              Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">
              The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Digita.Tustena.Core.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear">
            <summary>
              Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Digita.Tustena.Core.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">
              The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </param>
            <returns>
              true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
              Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Digita.Tustena.Core.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">
              The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </param>
            <returns>
              true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original
              <see
                cref="T:System.Collections.Generic.ICollection`1">
              </see>
              .
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Digita.Tustena.Core.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.ProcessUtils.ExecuteShellCommand(System.String)">
            <summary>
            Executes the command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ProcessUtils.ExecuteCommand(System.String,System.Boolean,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Executes the command.
            </summary>
            <param name="command">The command.</param>
            <param name="useShell">if set to <c>true</c> [use shell].</param>
            <param name="standardOutput">The standard output.</param>
            <param name="standardError">The standard error.</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Core.SafeFile">
            <summary>
            This is a wrapper aroung a FileStream.  While it is not a Stream itself, it can be cast to
            one (keep in mind that this might throw an exception).
            </summary>
        </member>
        <member name="T:Digita.Tustena.Core.SafeFileStream">
            <summary>
            This is a wrapper aroung a FileStream.  While it is not a Stream itself, it can be cast to
            one (keep in mind that this might throw an exception).
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.SafeFileStream.Open">
            <summary>
            Opens the stream when it is not locked.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.SafeFileStream.TryOpen(System.TimeSpan)">
            <summary>
            Wil try to open a stream for a timespan, else return false;
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Core.SettingsUtils.IsWebContext">
            <summary>
              Gets a value indicating whether this instance is web context.
            </summary>
            <value>
              <c>true</c> if this instance is web context; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="M:Digita.Tustena.Core.SettingsUtils.GetAppSettingsConfigValue(System.String)">
            <summary>
            Gets the config section value.
            </summary>
            <param name="settingName">Name of the setting.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.SettingsUtils.GetConfigValue(System.String,System.String)">
            <summary>
              Get a setting value
            </summary>
            <param name="sectionName">Name of the section.</param>
            <param name="settingName">Name of the setting.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
              Unable to open setting \ + settingName + \ in section \ + sectionName + \ in config file
              or
              Unable to open setting \ + settingName + \ in section \ + sectionName + \ in config file
              or
              Unable to open section  + section +  in configuration file
            </exception>
        </member>
        <member name="M:Digita.Tustena.Core.SettingsUtils.SetAppSettingsConfigValue(System.String,System.String)">
            <summary>
            Sets the config value.
            </summary>
            <param name="settingName">Name of the setting.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Digita.Tustena.Core.SettingsUtils.SetConfigValue(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Set a user changeable setting value
            </summary>
            <param name="sectionName">Name of the section.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="value">The value.</param>
            <param name="refresh">if set to <c>true</c> [refresh].</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Unable to open configuration file
            or
            Unable to open section \ + sectionName + \ in config file for writing. To write to config, section must be ClientSettingsSection, not NameValueSectionHandler.
            or
            Unable to open setting \ + settingName + \ in section \ + sectionName + \ in config file</exception>
        </member>
        <member name="T:Digita.Tustena.Core.StaticFunctions">
            <summary>
              Common and useful Static Functions.
            </summary>
            <summary>
              Common and useful Static Functions.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.StringArrayToIntArray(System.String[])">
            <summary>
              Convert a Strings array to a ints array.
            </summary>
            <param name="arr">The string array.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.StringArrayToLongArray(System.String[])">
            <summary>
              Convert a Strings array to a longs array.
            </summary>
            <param name="arr">The string array.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.IntArrayTostringArray(System.Int32[])">
            <summary>
              Convert a Ints array to a strings array.
            </summary>
            <param name="arr">The arr.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.DateTimeParse(System.String)">
            <summary>
              Parse string to DateTime
            </summary>
            <param name="dateTimeString">The date time string.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.BooleanParse(System.String)">
            <summary>
              Parse string to Bool
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.DecimalParse(System.String)">
            <summary>
              Parse string to Decimal
            </summary>
            <param name="number">The number.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.Int32Parse(System.String)">
            <summary>
              Parse string to Int32
            </summary>
            <param name="number">The number.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.ByteParse(System.String)">
            <summary>
              Parse string to Byte
            </summary>
            <param name="number">The number.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.Int64Parse(System.String)">
            <summary>
              Parse string to Int64.
            </summary>
            <param name="number">The number.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.Int16Parse(System.String)">
            <summary>
              Parse string to Int16
            </summary>
            <param name="number">The number.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.PropertyValue``1(System.Object,System.String)">
            <summary>
              Get the Property value via reflection.
            </summary>
            <typeparam name="T">The return Type</typeparam>
            <param name="obj">The obj.</param>
            <param name="name">The name (case sensitive).</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.FieldValue``1(System.Object,System.String)">
            <summary>
              Get the Field value via reflection.
            </summary>
            <typeparam name="T">The return Type</typeparam>
            <param name="obj">The obj.</param>
            <param name="name">The name (case sensitive).</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.EnumTryParse``1(System.String,``0@)">
            <summary>
              Try to parse a string to enum
              es: ImageType type;
              if (EnumTryParse&lt;ImageType&gt;(typeName, out type)){return type;}
              return ImageType.Jpg;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="strType"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.SetProperty(System.Object,System.String,System.String)">
            <summary>
              Sets the property via reflection.
            </summary>
            <param name="bo">The bo.</param>
            <param name="targetField">The target field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.CastValue(System.TypeCode,System.String)">
            <summary>
              Casts the value to the right object type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.IsNumber(System.String)">
            <summary>
              Determines whether the specified s is number.
            </summary>
            <param name="s">Input string.</param>
            <returns>
              <c>true</c> if the specified s is number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.GroupCompare(System.String,System.String)">
            <summary>
              Check if the user group is in element groups
            </summary>
            <param name="myGroups"></param>
            <param name="elementGroups"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.FixDecimal(System.String)">
            <summary>
              Fixes the decimal part of the number.
            </summary>
            <param name="s">Input string.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.FixPhoneNumber(System.String,System.Nullable{System.Int32})">
            <summary>
              Fixes the phone number.
            </summary>
            <param name="pnum">Phone Number.</param>
            <param name="optionalIntPrefix">The country prefix (es: 39)</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.FixMobilePhoneNumber(System.String)">
            <summary>
            Fix mobile phone number.
            </summary>
            <param name="pnum">Mobile Phone Number.</param>
            <returns>Get pnum without characters different from digit and +.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.PhoneNumberCleanerForPbx(System.String,System.Nullable{System.Int32})">
            <summary>
            Clean phone number and retrieve only the first one splitting by ;
            </summary>
            <param name="number">The Phone number</param>
            <param name="currentCountryPrefix">The country prefix (es: 39)</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.CutOverflow(System.String,System.Int32)">
            <summary>
              Permits to overflow/cut a text inside a cell with the ellipsis(...).
            </summary>
            <param name="text">Text.</param>
            <param name="cellWidth">Width of the cell.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.FixNull(System.Object)">
            <summary>
              Determines whether the specified value is null, in the case returns an empty string.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.AllLikeWhere(System.String,System.String)">
            <summary>
              Build the where condition for spaced "name surname" pairs
            </summary>
            <param name="column">The column.</param>
            <param name="queryValue">The query value.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.IsDate(System.DateTime)">
            <summary>
              Determines whether the specified dt is a valid date.
            </summary>
            <param name="dt">The dt.</param>
            <returns>
              <c>true</c> if the specified dt is date; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.StripHtmlTags(System.String,System.Boolean)">
            <summary>
              remove all HTML tags &lt; &gt;
            </summary>
            <param name="text">the HTML text</param>
            <param name="handleBr">if true replace all &lt;br/&gt; with \r\n char</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.GetTimeFromMinutes(System.String)">
            <summary>
            Transforms the input string that is the number of minutes 
            from midnight in the formatted string "HH:mm"
            </summary>
            <remarks>Used in xslt of app mobile</remarks>
            <param name="minutes">The overall number of minutes from midnight</param>
            <returns>A time formatted string "HH:mm"</returns>        
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.Capitalize(System.String)">
            <summary>
              (Capitalizes the specified string.
            </summary>
            <param name="s">Input string.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.SafeJson(System.String)">
            <summary>
              Make a string safe for JSON
            </summary>
            <param name="sIn"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.FixCarriage(System.String)">
            <summary>
              Fixes the carriage.
            </summary>
            <param name="text">Text.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.FixCarriage(System.String,System.Boolean)">
            <summary>
              Fixes the carriage.
            </summary>
            <param name="text">Text.</param>
            <param name="js">Js.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.EncodeUrlParameters(System.String)">
            <summary>
              Encode Javascript parameters in URL
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.DecodeUrlParameters(System.String)">
            <summary>
              Decode Javascript parameters in URL
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.FromASCIIStringToBase64String(System.String)">
            <summary>
              Encodes the to64.
            </summary>
            <param name="src">The SRC.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.FromBase64StringToASCIIString(System.String)">
            <summary>
              Encodes the to64.
            </summary>
            <param name="src">The SRC.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.GetTopLines(System.String,System.Int32,System.Boolean)">
            <summary>
              Return only to n lines from a description
            </summary>
            <param name="text">The description</param>
            <param name="maxLines">maximum number of lines</param>
            <param name="removeEmpty">remove empty lines</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.TruncateStr(System.String,System.Int32,System.Boolean)">
            <summary>
              Truncates the string.
            </summary>
            <param name="text">Text.</param>
            <param name="length">Length.</param>
            <param name="appendHellip">append the Hellip</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.SplitByEndOfWord(System.String,System.Int32,System.String)">
            <summary>
              Truncates the string.
            </summary>
            <param name="text">Text.</param>
            <param name="length">Length.</param>
            <param name="hellip">if truncated append hellip string.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.TimeSpanDuration(System.Int64)">
            <summary>
            </summary>
            <param name="duration">Duration in minutes</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.TimeDurationWithSeconds(System.Int64)">
            <summary>
            </summary>
            <param name="duration">Duration in minutes</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.TimeDuration(System.Int64)">
            <summary>
            Result like: HH:mm
            </summary>
            <param name="duration">Duration in minutes</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.TimeDurationInHoursMinutes(System.Int64)">
            <summary>
            </summary>
            <param name="duration">Duration in minutes</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.TimeDurationWithDays(System.Int64)">
            <summary>
              Result like: 1 dd 1 hh 1 mm
            </summary>
            <param name="duration">Duration in minutes with calc Days</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.RemoveInvalidCharPath(System.String)">
            <summary>
            Remove Invalid FileName Chars
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.RemovePotentiallyInvalidCharacters(System.String)">
            <summary>
            Remove default Potentially Invalid Characters for request.path
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.RemoveInvalidDirectoryPath(System.String)">
            <summary>
            Remove Invalid FileName Chars
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.RandomString(System.Int32,System.Boolean)">
            <summary>
              Generate a Random string.
            </summary>
            <param name="length">The length.</param>
            <param name="useNumbersToo">use numbers too</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.ExtractDomainFromEMail(System.String)">
            <summary>
              Try to extract domain from a webSite
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.EnsureWbr(System.String,System.Int32)">
            <summary>
              Ensure that the browser will wrap the line each x chars
            </summary>
            <param name="str">string where puts wbr tag every n characters</param>
            <param name="len">nth characters where puts wbr tag</param>
            <returns>string with wbr tag.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.ExtractDomain(System.String)">
            <summary>
              Try to extract domain from a webSite
            </summary>
            <param name="webSite"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.HasReadableContent(System.String)">
            <summary>
              Determines whether [has readable content] [the specified test].
            </summary>
            <param name="test"> The test. </param>
            <returns>
              <c>true</c> if [has readable content] [the specified test]; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.SafeCastToString(System.Object,System.String)">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="src"> The SRC. </param>
            <param name="defaultValIfNull"> The default val if null. </param>
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.SafeCastToString(System.Nullable{System.Int32})">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="id"> The id. </param>
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.SafeCastToString(System.DateTime)">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="dt"> The dt. </param>
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.SafeCastToString(System.Object[],System.String)">
            <summary>
              Given an object array, createa a new strings array containing all the source elements cast to String
            </summary>
            <param name="src"> Source objects array </param>
            <returns> New strings array </returns>
            <remarks>
              If the <paramref name="src">src</paramref> array is null, returns null If an element of the <paramref name="src">src</paramref> array is null o cannot be cast, the
              <paramref
                name="defaultValue">
                defaultValue
              </paramref>
              is used instead
            </remarks>
            <param name="defaultValue"> </param>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.SafeCastToString(System.Object,System.String,System.Int32,System.String)">
            <summary>
              Given an object array, createa a new strings array containing all the source elements cast to String
            </summary>
            <param name="src"> Source objects array </param>
            <returns> New strings array </returns>
            <remarks>
              If the <paramref name="src">src</paramref> array is null, returns null If an element of the <paramref name="src">src</paramref> array is null o cannot be cast, the
              <paramref
                name="defaultValue">
                defaultValue
              </paramref>
              is used instead
            </remarks>
            <param name="defaultValue"> </param>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.SafeCastToString(System.Object)">
            <summary>
              Safely cast the given value to string.
            </summary>
            <param name="test"> The test. </param>
            <returns> </returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.CountDecimalDigits(System.Decimal)">
            <summary>
            Returns the number of decimal digits of the value in input
            </summary>
            <param name="num">value</param>
            <returns>number of decimal digits</returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.CountCurrencyDecimalDigits(System.Decimal)">
            <summary>
            Returns the number of currency decimal digits of the value in input
            </summary>
            <param name="num">value</param>
            <returns>number of currency decimal digits</returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.TustenaSupportedLanguage(Digita.Tustena.Core.UserConfig,Digita.Tustena.Core.StaticFunctions.LanguageOption)">
            <summary>
              Check the Tustena Supported Language, Otherwise return en language
            </summary>
            <param name="uc"></param>
            <param name="option">Strict contains only it,en,es lanuage, normal contains also fr and de language</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.Distance(System.Int64)">
            <summary>
              distance in KM / meters
            </summary>
            <param name="meters"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.GetNextUniqueIncrementValue">
            <summary>
            Use interlocked Increment to generate an unique variable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.StaticFunctions.GetListCustomBusinessObjectTypeEnum">
            <summary>
            Return the list of enum customizable  / family BusinessObjectType
            </summary>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Core.ExtensionMethods">
            <summary>
                Framework 3.5+ Tustena's Extensions
            </summary>
            <summary>
            Framework 3.5+ Tustena's Extensions
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.ExtensionMethods._cache">
            <summary>
                The _cache
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.ExtensionMethods._top">
            <summary>
                The _top
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToStringLookup(System.Int32)">
            <summary>
                Faster ToString for int value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.EnsureNoBreakSpace(System.String)">
            <summary>
                Ensures the no break space.
            </summary>
            <param name="str">The string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.TrimStart(System.String,System.String)">
            <summary>
                Trim Start with string parameter
            </summary>
            <param name="target">The string to fix.</param>
            <param name="trimString">The string to remove.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.TrimStart(System.String,System.String,System.StringComparison)">
            <summary>
                Trim Start with string parameter
            </summary>
            <param name="target">The string to fix.</param>
            <param name="trimString">The string to remove.</param>
            <param name="comparisonType">comparison rule.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.TrimEnd(System.String,System.String)">
            <summary>
                Trim End with string parameter
            </summary>
            <param name="target">The string to fix.</param>
            <param name="trimString">The string to remove.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToJson(System.String)">
            <summary>
                Convert string to a JSON safe format
            </summary>
            <param name="str">The string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToJson(System.Boolean)">
            <summary>
                Convert string to a JSON safe format
            </summary>
            <param name="val">The string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.HtmlEncode(System.String)">
            <summary>
                HTMLs the encode.
            </summary>
            <param name="str">The string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsNullOrEmpty(System.String)">
            <summary>
                Determines whether the specified string is null or empty
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if the string is null or empty otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsNullOrEmptyOrWhiteSpace(System.String,System.Char[])">
            <summary>
                Determines whether the specified string is null or empty or include whitespaces
            </summary>
            <param name="str">The string.</param>
            <param name="otherCharsToIgnore">Optional chars to ignore </param>
            <returns><c>true</c> if the string is null or empty otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsNullOrDBNull(System.Object)">
            <summary>
                Determines whether the specified object is null or DBNull.
                Used for SqlScalarToObj result.
            </summary>
            <param name="obj">the object </param>
            <returns><c>true</c> if the object is null or DBNull otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsNullOrWhiteSpace(System.String)">
            <summary>
                Determines whether the specified string is null or empty without white-space
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if the string is null or empty otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsTrueString(System.String)">
            <summary>
                Determines whether the specified string is a valid true string
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if the string is a valid true string otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsNumber(System.String)">
            <summary>
                Determines whether the specified string is a valid number
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if the string is a number otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToInt64(System.Object)">
            <summary>
                Convert a string to long value
            </summary>
            <param name="str">The number in string format</param>
            <returns>long if the string is a number otherwise 0.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToInt64(System.Object,System.Int64)">
            <summary>
                To the int64.
            </summary>
            <param name="str">The string.</param>
            <param name="def">The definition.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToInt64Nullable(System.Object,System.Nullable{System.Int64})">
            <summary>
                To the int64 nullable.
            </summary>
            <param name="str">The string.</param>
            <param name="def">The definition.</param>
            <returns>System.Nullable{System.Int64}.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToInt32(System.Object)">
            <summary>
                Convert a string to int value
            </summary>
            <param name="str">The number in string format</param>
            <returns>int if the string is a number otherwise 0.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToInt32(System.Object,System.Int32)">
            <summary>
                To the int32.
            </summary>
            <param name="str">The string.</param>
            <param name="def">The definition.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToInt32Nullable(System.Object,System.Nullable{System.Int32})">
            <summary>
                To the int32 nullable.
            </summary>
            <param name="str">The string.</param>
            <param name="def">The definition.</param>
            <returns>System.Nullable{System.Int32}.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToInt16(System.Object)">
            <summary>
                Convert a string to short value
            </summary>
            <param name="str">The number in string format</param>
            <returns>short if the string is a number otherwise 0.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToInt16(System.Object,System.Int16)">
            <summary>
                To the int16.
            </summary>
            <param name="str">The string.</param>
            <param name="def">The definition.</param>
            <returns>System.Int16.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToByte(System.Object)">
            <summary>
                Convert a string to byte
            </summary>
            <param name="str">The number in string format</param>
            <returns>byte if the string is a number otherwise 0.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToByte(System.Object,System.Byte)">
            <summary>
                To the byte.
            </summary>
            <param name="str">The string.</param>
            <param name="def">The definition.</param>
            <returns>System.Byte.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToSByte(System.Object)">
            <summary>
            Convert a object to sbyte value
            </summary>
            <param name="str">object to convert.</param>
            <returns>sbyte if object can be converted otherwise default</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToSByte(System.Object,System.SByte)">
            <summary>
            Convert a object to sbyte value
            </summary>
            <param name="str">object to convert.</param>
            <param name="def">default value.</param>
            <returns>sbyte if object can be converted otherwise default</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToBoolean(System.Object,System.Boolean)">
            <summary>
                To the boolean.
            </summary>
            <param name="str">The string.</param>
            <param name="def">if set to <c>true</c> [definition].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.FormatToPercent(System.Decimal)">
            <summary>
                Formats to percent.
            </summary>
            <param name="dec">The decimal.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToBooleanNullable(System.Object,System.Nullable{System.Boolean})">
            <summary>
                To the boolean nullable.
            </summary>
            <param name="str">The string.</param>
            <param name="def">if set to <c>true</c> [definition].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToDecimal(System.Object)">
            <summary>
                Convert a string to decima
            </summary>
            <param name="str">The number in string format</param>
            <returns>decima if the string is a number otherwise 0.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToDecimal(System.Object,System.Decimal)">
            <summary>
                To the decimal.
            </summary>
            <param name="str">The string.</param>
            <param name="def">The definition.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToDouble(System.Object)">
            <summary>
                Convert a string to decima
            </summary>
            <param name="str">The number in string format</param>
            <returns>decima if the string is a number otherwise 0.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToDouble(System.Object,System.Double)">
            <summary>
                To the double.
            </summary>
            <param name="str">The string.</param>
            <param name="def">The definition.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToFloat(System.Object)">
            <summary>
                To the float.
            </summary>
            <param name="str">The string.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToFloat(System.Object,System.Single)">
            <summary>
                To the float.
            </summary>
            <param name="str">The string.</param>
            <param name="def">The definition.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToDatetime(System.Object)">
            <summary>
                Convert a string to datetime
            </summary>
            <param name="str">The datetime in string format</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToDatetimeNullable(System.Object)">
            <summary>
                Convert a string to datetime
            </summary>
            <param name="str">The datetime in string format</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToDatetime(System.Object,System.DateTime)">
            <summary>
                To the datetime.
            </summary>
            <param name="str">The string.</param>
            <param name="def">The definition.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToDatetimeISO(System.Object,System.IFormatProvider)">
            <summary>
                To the datetime iso.
            </summary>
            <param name="str">The string.</param>
            <param name="provider">The provider.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToDatetimeExact(System.Object,System.String,System.IFormatProvider)">
            <summary>
                To the datetime exact.
            </summary>
            <param name="str">the string</param>
            <param name="format">the format like "yyMMdd"</param>
            <param name="provider">the provider like UC.MyDTFI</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsValidDateTime(System.DateTime)">
            <summary>
                Determines whether the specified DateTime is valid to save in Database, so it is between
                01/01/1753 and 31/12/9999
            </summary>
            <param name="date">The DateTime</param>
            <returns><c>true</c> if the DateTime is valid otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsValidDateTime(System.Nullable{System.DateTime})">
            <summary>
                Determines whether the specified DateTime is valid to save in Database, so it is between
                01/01/1753 and 31/12/9999
            </summary>
            <param name="date">The DateTime</param>
            <returns><c>true</c> if the DateTime is valid otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToDataTable``1(System.Collections.Generic.List{``0},System.Boolean,System.Func{System.Object,System.Object},System.Boolean,System.Collections.Generic.List{System.Type})">
            <summary>
                Convert an IList&lt;class&gt; to a Datatable rapresentation.
                The column name will be the name of the public property in the class.
                The function serialize only the properties, not the fields of the object
            </summary>
            <typeparam name="T">the type must be a class</typeparam>
            <param name="obj">the IList</param>
            <param name="includeIndex">if set to <c>true</c> [include index].</param>
            <param name="typesExceptionsToTrap">not raise exceptions if reflection getValue generate an error.</param>
            
            <returns>the serialization of the class into datatable</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToDataTable(System.String[])">
            <summary>
                To the data table.
            </summary>
            <param name="obj">The object.</param>
            <returns>DataTable.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToDatabaseString(System.DateTime)">
            <summary>
                DateTime string in sql server format
                (yyyyMMdd HH:mm)
            </summary>
            <param name="dt">The dt.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToTimeString(System.DateTime)">
            <summary>
                To the time string.
            </summary>
            <param name="dt">The dt.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToLongDateAndTimeString(System.DateTime)">
            <summary>
                To the long date and time string.
            </summary>
            <param name="dt">The dt.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Join(System.Int64[],System.String)">
            <summary>
                Joins the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="separator">The separator.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Join(System.Int32[],System.String)">
            <summary>
                Joins the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="separator">The separator.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Join(System.Object[],System.String)">
            <summary>
                Joins the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="separator">The separator.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Join(System.String[],System.String,System.Boolean)">
            <summary>
                Joins the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="separator">The separator.</param>
            <param name="trim">if set to <c>true</c> [trim].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Join``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
                Joins the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="separator">The separator.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Join``1(System.Collections.Generic.List{``0},System.String,System.Func{``0,System.String})">
            <summary>
                Joins the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="separator">The separator.</param>
            <param name="toString">To string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Pipe``1(System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
                Join an array in a pipe separated string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.UnPipe(System.Object,System.Boolean)">
            <summary>
                Split a pipe separated string in an array with distinct
            </summary>
            <param name="val">The value.</param>
            <param name="distinct">Remove duplicate values</param>
            <returns>List{System.Int64}.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.UnPipeInt32(System.Object,System.Boolean)">
            <summary>
                Split a pipe separated string in a int32 array with distinct
            </summary>
            <param name="val">The value.</param>
            <returns>List{System.Int32}.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Shift``1(System.Collections.Generic.List{``0})">
            <summary>
                Removes the first element from the list and returns it,
                or null if the list is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Pop``1(System.Collections.Generic.List{``0})">
            <summary>
                Removes the last element from the list and returns it,
                or null if the list is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.First``1(System.Collections.Generic.List{``0})">
            <summary>
                Returns the first element from the list or null if the list is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Last``1(System.Collections.Generic.List{``0})">
            <summary>
                Returns the last element from the list or null if the list is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Skip``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
                Returns the List or null if the list is empty skipping the first n elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="numberOfElementsToSkip">Number of elements to skip</param>
            <returns>List{``0}.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Select``1(System.Collections.Generic.List{``0},System.Func{``0,``0})">
            <summary>
                Returns the List after applyng the delegate function to each element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="del">The delete.</param>
            <returns>List{``0}.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Case insensitive contains
            </summary>
            <param name="source"></param>
            <param name="toCheck"></param>
            <param name="comp"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ContainsValue``2(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{``0,``1}},``1)">
            <summary>
                Determines whether the specified list contains value.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="list">The list.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified list contains value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ContainsKey``2(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{``0,``1}},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines whether the specified list contains key.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="list">The list.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified list contains key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.GetKey``2(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{``0,``1}},``0)">
            <summary>
                Gets the value of item in KeyValuePairList with key in argument.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="list">The list.</param>
            <param name="key">The key yo search in item.</param>
            <returns>``1.</returns>
            <exception cref="T:System.ArgumentNullException">list</exception>
            <exception cref="T:System.MissingFieldException"></exception>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToStream(System.String)">
            <summary>
            To the stream.
            </summary>
            <param name="str">The string.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.SaveToFile(System.IO.MemoryStream,System.String)">
            <summary>
                Saves to file.
            </summary>
            <param name="ms">The ms.</param>
            <param name="savePath">The save path.</param>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsBetween(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
                Check if the date is between two dates
            </summary>
            <param name="d">The d.</param>
            <param name="minDate">The min date</param>
            <param name="maxDate">The max date</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsBetween(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
                Check if the date is in a range
            </summary>
            <param name="d">The d.</param>
            <param name="targetDate">The base date of the range</param>
            <param name="range">The timespan surrounding the date</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsBetweenButNotEqual(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
                Check if the date is between two dates but not equal to range
            </summary>
            <param name="d">The d.</param>
            <param name="minDate">The min date</param>
            <param name="maxDate">The max date</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsBetweenButNotEqual(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
                Check if the date is in a range but not equal to range
            </summary>
            <param name="d">The d.</param>
            <param name="targetDate">The base date of the range</param>
            <param name="range">The timespan surrounding the date</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsBetween(System.Int64,System.Int64,System.Int64)">
            <summary>
            Check if the date is in a range but not equal to range
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsBetweenButNotEqual(System.Int64,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Check if the date is in a range but not equal to range
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsBetweenButNotEqual(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.AddRangeUnique``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object})">
            <summary>
                Adds the range unique.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="collection">The collection.</param>
            <param name="keyReturn">The key return.</param>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Add``1(``0[],``0)">
            <summary>
                Adds the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="value">The value.</param>
            <returns>``0[][].</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Insert``1(``0[],System.Int32,``0)">
            <summary>
                Inserts the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="position">The position.</param>
            <param name="value">The value.</param>
            <returns>``0[][].</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.DuplicateNode(System.Xml.XmlNode,System.Xml.XmlDocument)">
            <summary>
                Clone a node for a new XmlDocument
            </summary>
            <param name="xmln">The XMLN.</param>
            <param name="xmldoc">the document</param>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.SelectSingleNodeInnerText(System.Xml.XmlNode,System.String)">
            <summary>
                Make a query with xpath Language and return the InnerText value in safe mode. if the node does not exists return
                string.Empty
            </summary>
            <param name="xmln">The XMLN.</param>
            <param name="xpath">The xpath.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToInt32Array(System.String[])">
            <summary>
                Convert a Strings array to a ints array.
            </summary>
            <param name="arr">The string array.</param>
            <returns>System.Int32[][].</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToInt32Array(System.Collections.Generic.List{System.String})">
            <summary>
                To the int32 array.
            </summary>
            <param name="arr">The arr.</param>
            <returns>System.Int32[][].</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToInt64Array(System.String[])">
            <summary>
                Convert a Strings array to a longs array.
            </summary>
            <param name="arr">The string array.</param>
            <returns>System.Int64[][].</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToInt64Array(System.Collections.Generic.List{System.String})">
            <summary>
                To the int64 array.
            </summary>
            <param name="arr">The arr.</param>
            <returns>System.Int64[][].</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToInt64List(System.Collections.Generic.List{System.String})">
            <summary>
                To the int64 list.
            </summary>
            <param name="arr">The arr.</param>
            <returns>List{System.Int64}.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToStringList(System.Collections.Generic.List{System.Int64})">
            <summary>
                To the string list.
            </summary>
            <param name="arr">The arr.</param>
            <returns>List{System.String}.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsException``1(System.Exception)">
            <summary>
                Determines whether the specified ex is exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
                Copies to.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToArray(System.IO.Stream)">
            <summary>
                To the array.
            </summary>
            <param name="input">The input.</param>
            <returns>System.Byte[][].</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Capitalize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Capitalizes the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns>List{System.String}.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Chunks the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="chunkSize">Size of the chunk.</param>
            <returns>IEnumerable{IEnumerable{``0}}.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsNullOrEmpty``1(System.Collections.Generic.List{``0})">
            <summary>
                Determines whether [is null or empty] [the specified list].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns><c>true</c> if [is null or empty] [the specified list]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Clone``1(System.Collections.Generic.IList{``0})">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listToClone"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Inside``1(``0,``0[])">
            <summary>
            Check T Value is inside the list of values passed
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <param name="insideValues"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsValidEmail(System.String,System.Boolean)">
            <summary>
            Check if email is valid
            </summary>
            <param name="email"></param>
            <param name="addressOnly">Return true only if the email is address only without displayname (strict)</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            Get the Property value via reflection.
            </summary>
            <typeparam name="T">The return Type</typeparam>
            <param name="obj">The obj.</param>
            <param name="name">The name (case sensitive).</param>
            <returns>``0.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.GetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Get the Property value via reflection.
            </summary>
            <typeparam name="T">The return Type</typeparam>
            <param name="obj">The obj.</param>
            <param name="name">The name (case sensitive).</param>
            <param name="defaultValue"></param>
            <returns>``0.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.SetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Get the Property value via reflection.
            </summary>
            <typeparam name="T">The setter Type</typeparam>
            <param name="obj">The obj.</param>
            <param name="name">The name (case sensitive).</param>
            <param name="value">The TValue to set</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.UriCombine(System.String,System.String)">
            <summary>
              URIs the combine.
            </summary>
            <param name="basePath"> The base path. </param>
            <param name="relativePath"> The relative path. </param>
            <returns> </returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.FilterInvalidCharPath(System.String)">
            <summary>
            Remove Invalid FileName Chars
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.FilterInvalidDirectoryPath(System.String)">
            <summary>
            Remove Invalid FileName Chars
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToUInt16(System.Object)">
            <summary>
            Convert a object to ushort value
            </summary>
            <param name="str">object to convert.</param>
            <returns>ushort if object can be converted otherwise default</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToUInt16(System.Object,System.UInt16)">
            <summary>
            Convert a object to ushort value
            </summary>
            <param name="str">object to convert.</param>
            <param name="def">default value.</param>
            <returns>ushort if object can be converted otherwise default</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToUInt32(System.Object)">
            <summary>
            Convert a object to uint value
            </summary>
            <param name="str">object to convert.</param>
            <returns>uint if object can be converted otherwise default</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToUInt32(System.Object,System.UInt32)">
            <summary>
            Convert a object to uint value
            </summary>
            <param name="str">object to convert.</param>
            <param name="def">default value.</param>
            <returns>uint if object can be converted otherwise default</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToUInt64(System.Object)">
            <summary>
            Convert a object to ulong value
            </summary>
            <param name="str">object to convert.</param>
            <returns>ulong if object can be converted otherwise default</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToUInt64(System.Object,System.UInt64)">
            <summary>
            Convert a object to ulong value
            </summary>
            <param name="str">object to convert.</param>
            <param name="def">default value.</param>
            <returns>ulong if object can be converted otherwise default</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.WrapInHtmlTag(System.Object,System.String,System.String,System.Boolean,System.String,System.String[])">
            <summary>
            Wraps the in HTML tag.
            </summary>
            <param name="src">The source.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="cssClass">The CSS class.</param>
            <param name="emptyWhenEmptyOrSpace">if set to <c>true</c> an empty string is returned when the input string is empty.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.AddOrReplace(System.Collections.Generic.List{System.Collections.DictionaryEntry},System.Collections.DictionaryEntry)">
            <summary>
            Add or replace a dictionary entry in a entries list
            </summary>
            <param name="entries">The entries.</param>
            <param name="dictionaryEntry">The dictionary entry.</param>
            <returns>Enums.Changes.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToCrmTable(Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            To the CRM table.
            </summary>
            <param name="bot">The bot.</param>
            <returns>Enums.CRMTables.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToBusinessObjectType(Digita.Tustena.Core.Enums.CRMTables)">
            <summary>
            To the type of the business object.
            </summary>
            <param name="table">The table.</param>
            <returns>Enums.BusinessObjectType.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.GetExtensionAttribute(System.Enum)">
            <summary>
            Gets the extension attribute.
            </summary>
            <param name="type">The type.</param>
            <returns>ExtensionAttribute.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.GetEnumFieldAttributes(System.Enum,System.Boolean)">
            <summary>
            Gets the extension attribute.
            </summary>
            <param name="type">The type.</param>
            <param name="inherit"></param>
            <returns>ExtensionAttribute.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.GetEnumFieldAttribute``1(System.Enum)">
            <summary>
            Gets the extension attribute.
            </summary>
            <param name="type">The type.</param>
            <returns>ExtensionAttribute.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.GetEnumFieldAttributes``1(System.Enum)">
            <summary>
            Gets the extension attribute.
            </summary>
            <param name="type">The type.</param>
            <returns>ExtensionAttribute.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.IsWithHours(Digita.Tustena.Core.Enums.ActivityMode)">
            <summary>
            Determines whether [is with hours] [the specified mode].
            </summary>
            <param name="mode">The mode.</param>
            <returns><c>true</c> if [is with hours] [the specified mode]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.ToRowElementsArray(System.Collections.Generic.IEnumerable{System.Data.IDataRecord})">
            <summary>
            To the row elements array.
            </summary>
            <param name="reader">The reader.</param>
            <returns>RowElements[][].</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.Exists(System.Web.HttpCookieCollection,System.String)">
            <summary>
            Checks whether a cookie exists.
            </summary>
            <param name="cookieCollection">A CookieCollection, such as Response.Cookies.</param>
            <param name="name">The cookie name to delete.</param>
            <returns>A bool indicating whether a cookie exists.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.ExtensionMethods.GetAttributeInsensitive(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Same as getattribute but insensitive
            </summary>
            <param name="el">XmlElement</param>
            <param name="name">attribute name</param>
            <param name="def">default value as string</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Core.FileFunctions">
            <summary>
            FileFunctions.
            </summary>
            <summary>
            FileFunctions.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Core.FileFunctions.BaseDirectory">
            <summary>
            Gets the base directory.
            </summary>
            <value>The base directory.</value>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.GetTimeBasedFileName(System.String,System.DateTime,System.String)">
            <summary>
            Gets the name of the time based file.
            </summary>
            <param name="shortFileName">Short name of the file.</param>
            <param name="timeStamp">The time stamp.</param>
            <param name="shortExtension">The short extension.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.GetFileNameWithoutExtension(System.IO.FileInfo)">
            <summary>
            Gets the file name without extension.
            </summary>
            <param name="fi">The file.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.EnsureLocation(System.IO.DirectoryInfo)">
            <summary>
            Ensures the location.
            </summary>
            <param name="path">The path.</param>
            <exception cref="T:System.ArgumentNullException">path;Unable to ensure a null path</exception>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.EnsureLocation(System.String)">
            <summary>
            Ensures the location.
            </summary>
            <param name="path">The path.</param>
            <exception cref="T:System.ArgumentNullException">Unable to ensure an empty or null path;path</exception>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.GetSafeFileName(System.String)">
            <summary>
            Gets the name of the safe file.
            </summary>
            <param name="fileSimpleName">Name of the file simple.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.EnsureFolderForFile(System.String)">
            <summary>
            Ensures the folder for file.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.SafeDeleteFile(System.String)">
            <summary>
            Safes the delete file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.SafeDelete(System.IO.FileInfo)">
            <summary>
            Safely delete the file
            </summary>
            <param name="f">The f.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.SafeDelete(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>
            Safely deletes the files.
            </summary>
            <param name="files">The files.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.SafeDeleteFilesInFolder(System.String,System.String)">
            <summary>
            Safely deletes the files.
            </summary>
            <param name="folderPath">The folder path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns>
            System.Int32.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.GetFilesCountInFolder(System.String,System.String)">
            <summary>
            Safely deletes the files.
            </summary>
            <param name="folderPath">The folder path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns>
            System.Int32.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.RemoveFileExtension(System.String)">
            <summary>
            Removes the file extension.
            </summary>
            <param name="fileNameOrPath">The file name or path.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.SafeCopyFilesInFolder(System.String,System.String,System.String)">
            <summary>
            Safes the copy files in folder.
            </summary>
            <param name="sourceFolder">The source folder.</param>
            <param name="destinationFolder">The destination folder.</param>
            <param name="filesFilter">The files filter.</param>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.TempPath">
            <summary>
            Get the temporary path of the User Id data storage
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.TempPath(Digita.Tustena.Core.UserConfig)">
            <summary>
            Get the temporary path of the User Id data storage
            </summary>
            <param name="uc">The uc.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.FileStorageBasePath(Digita.Tustena.Core.UserConfig)">
            <summary>
            Files the storage base path.
            </summary>
            <param name="uc">The uc.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.FileStorageBasePath(System.String)">
            <summary>
            Files the storage base path.
            </summary>
            <param name="subFolder">The sub folder.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.FileStorageBasePath(System.String,Digita.Tustena.Core.UserConfig)">
            <summary>
            Files the storage base path.
            </summary>
            <param name="subFolder">The sub folder.</param>
            <param name="uc">The uc.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.FileStorageBasePath(Digita.Tustena.Core.UserConfig,System.String[])">
            <summary>
            Files the storage base path and create folder if not exists
            </summary>
            <param name="uc">The uc.</param>
            <param name="subFolders">The sub folders.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.FileStoragePathCombine(Digita.Tustena.Core.UserConfig,System.String[])">
            <summary>
            Same as FileStorageBasePath, build base path to DataStorage for current tier, but not create if not exists
            </summary>
            <param name="uc"></param>
            <param name="subFolders"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.ConditionallyCreateDirectoryFromFile(System.String)">
            <summary>
            Create directory if not exists in file path 
            </summary>
            <param name="file">full file path</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.ConditionallyCreateDirectory(System.String)">
            <summary>
            Create directory if not exists
            </summary>
            <param name="directory">directory path</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Digita.Tustena.Core.FileFunctions"/> class from being created.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Core.FileFunctions.SpoolerDataPath">
            <summary>
            Gets the app data path.
            </summary>
            <value>The app data path.</value>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.SafeGuidName(System.String)">
            <summary>
             Return null if the guid formatted filename is not correct
            </summary>
            <param name="guidFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.CanonicalCombine(System.String,System.String,System.Boolean)">
            <summary>
            Path.Combine replacement to protect Path Traversal or Web Attacks
            </summary>
            <param name="basePath"></param>
            <param name="path"></param>
            <param name="checkInvalidFileName">Check for invalid chars in Filename</param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Core.FileFunctions.AppDataPath">
            <summary>
            Gets the app data path.
            </summary>
            <value>The app data path.</value>
        </member>
        <member name="P:Digita.Tustena.Core.FileFunctions.DocsCachePath">
            <summary>
            Gets the root path of the cache of the docs artifacts
            </summary>
        </member>
        <member name="P:Digita.Tustena.Core.FileFunctions.XmlDataPath">
            <summary>
            Gets the XML data path.
            </summary>
            <value>The XML data path.</value>
        </member>
        <member name="P:Digita.Tustena.Core.FileFunctions.CustomsDataPath">
            <summary>
            Gets the customs data path.
            </summary>
            <value>The customs data path.</value>
        </member>
        <member name="P:Digita.Tustena.Core.FileFunctions.LogDataPath">
            <summary>
            Gets the log data path.
            </summary>
            <value>The log data path.</value>
        </member>
        <member name="P:Digita.Tustena.Core.FileFunctions.TempDataPath">
            <summary>
            Gets the temporary data path.
            </summary>
            <value>The temporary data path.</value>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.RunningDataPath">
            <summary>
            Runnings the data path.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.RunningDataPath(System.String[])">
            <summary>
            Runnings the data path.
            </summary>
            <param name="subFolders">The sub folders.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.GetExtension(System.String)">
            <summary>
            Gets the extension.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.CheckDir(System.String,System.Boolean)">
            <summary>
            Checks the dir.
            </summary>
            <param name="dir">The directory path</param>
            <param name="create">if set to <c>true</c> will create the dir and is recursive.</param>
            <returns><c>true</c> if exists <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.GetFileImg(System.String)">
            <summary>
            Gets the file img.
            </summary>
            <param name="ext">The ext.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.GetFileIcoMoonLogo(System.String)">
            <summary>
            Gets the file img.
            </summary>
            <param name="ext">The ext.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.FolderSize(System.String)">
            <summary>
            the size of the Folder .
            </summary>
            <param name="path">The path.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.FolderFileSize(System.String)">
            <summary>
            the size of the file in the folder path .
            </summary>
            <param name="path">The path.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.ReadTextFile(System.String,System.String)">
            <summary>
            Reads the text file.
            </summary>
            <param name="file">The file.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.WriteTextToFile(System.String,System.String)">
            <summary>
            Writes the text to file.
            </summary>
            <param name="file">The file.</param>
            <param name="text">The text.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.LogErrorToFile(System.String)">
            <summary>
            Logs the error to file.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.LogMessageToFile(System.String,System.String)">
            <summary>
            Logs the message to file.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.CheckDirectoryAccessPermission(System.String,System.Exception@)">
            <summary>
            Checks the directory access permission and create directory if not exists.
            </summary>
            <param name="dirPath">The file path.</param>
            <param name="exception">The exception.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.IsDirectoryWritable(System.String,System.Boolean)">
            <summary>
            Check is the directory is writable.
            </summary>
            <param name="dirPath">The file path.</param>
            <param name="throwIfFails"></param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.PathCombine(System.String[])">
            <summary>
            Combine the files paths
            </summary>
            <param name="args">The path segments</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.SafeCombine(System.String[])">
            <summary>
            Combine the files paths checking for directory shortcuts
            </summary>
            <param name="args">The path segments</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.ClearDirectoryByTime(System.String)">
            <summary>
            Clears the directories older then.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.ClearDirectoryByTime(System.String,System.Int32)">
            <summary>
            Clears the directories older then.
            </summary>
            <param name="path">The path.</param>
            <param name="daysDiff">The days difference.</param>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.ClearDirectoryByTime(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Clears the directories older then.
            </summary>
            <param name="path">The path.</param>
            <param name="maintainCurrentDirectory">if set to <c>true</c> [maintain current directory].</param>
            <param name="daysDiff">The days difference.</param>
            <param name="maintainSubDirectory"></param>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.ClearDirectoryByTimeInternal(System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Clears the directories older then.
            </summary>
            <param name="initialPath">Used for recursive call</param>
            <param name="path">The path.</param>
            <param name="maintainCurrentDirectory">if set to <c>true</c> [maintain current directory].</param>
            <param name="daysDiff">The days difference.</param>
            <param name="maintainSubDirectory"></param>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.ClearFileByTime(System.String,System.Int32)">
            <summary>
            Clears the files older then.
            </summary>
            <param name="dir">The dir.</param>
            <param name="daysDiff">The days difference.</param>
        </member>
        <member name="T:Digita.Tustena.Core.FileFunctions.CustomDataPaths">
            <summary>
            Static CustomDataPaths helper class to prevent continious file/directory check
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.CustomDataPaths.DirectoryExists(System.String,System.Boolean)">
            <summary>
            Check if directory exists only the first time. Is reset by FilesystemWatcher.
            </summary>
            <param name="path">The full path</param>
            <param name="create">Force directory creation</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.CustomDataPaths.FileExists(System.String)">
            <summary>
            Check if file exists only the first time. Is reset by FilesystemWatcher.
            </summary>
            <param name="filePath">The file path name</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Core.FileFunctions.StaticPaths">
            <summary>
            Static StaticPaths helper class to prevent continious file/directory check, is not reset
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.StaticPaths.DirectoryExists(System.String,System.Boolean)">
            <summary>
            Check if directory exists only the first time. Is not reset by FilesystemWatcher and excluded in DEBUG.
            </summary>
            <param name="path">The full path</param>
            <param name="create">Force directory creation</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.FileFunctions.StaticPaths.FileExists(System.String)">
            <summary>
            Check if file exists only the first time. Is not reset by FilesystemWatcher and excluded in DEBUG.
            </summary>
            <param name="filePath">The file path name</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Core.DateAndTime">
            <summary>
            Date and Time helpers
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.DateDiff(Digita.Tustena.Core.DateAndTime.DateInterval,System.DateTime,System.DateTime)">
            <summary>
            Get the difference between two dates in DateInterval type
            </summary>
            <param name="interval">The interval.</param>
            <param name="dt1">The DT1.</param>
            <param name="dt2">The DT2.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfQuarter(System.Int32,Digita.Tustena.Core.DateAndTime.Quarter)">
            <summary>
            Gets the end of quarter.
            </summary>
            <param name="year">The year.</param>
            <param name="qtr">The QTR.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetQuarter(Digita.Tustena.Core.DateAndTime.Month)">
            <summary>
            Gets the quarter.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetQuarter(System.Int32)">
            <summary>
            Gets the quarter.
            </summary>
            <param name="nMonth">The n month.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfQuarter(System.Int32,Digita.Tustena.Core.DateAndTime.Quarter)">
            <summary>
            Gets the start of quarter.
            </summary>
            <param name="year">The year.</param>
            <param name="qtr">The QTR.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfLastQuarter">
            <summary>
            Gets the end of last quarter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfLastQuarter">
            <summary>
            Gets the start of last quarter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfNextQuarter">
            <summary>
            Gets the start of next quarter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfNextQuarter">
            <summary>
            Gets the end of next quarter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfCurrentQuarter">
            <summary>
            Gets the start of current quarter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfCurrentQuarter">
            <summary>
            Gets the end of current quarter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.DateDiff(Digita.Tustena.Core.DateAndTime.DateInterval,System.DateTime,System.DateTime,System.DayOfWeek)">
            <summary>
            Dates the diff.
            </summary>
            <param name="interval">The interval.</param>
            <param name="dt1">The DT1.</param>
            <param name="dt2">The DT2.</param>
            <param name="eFirstDayOfWeek">The e first day of week.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.Round(System.Double)">
            <summary>
            Rounds the specified val.
            </summary>
            <param name="dVal">The d val.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.LastDayOfMonth">
            <summary>
            Lasts the day of month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.LastDayOfMonth(System.DateTime)">
            <summary>
            Lasts the day of month.
            </summary>
            <param name="dt">The dt.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.LastDayOfMonth(System.Int32,System.Int32)">
            <summary>
            Lasts the day of month.
            </summary>
            <param name="strMonth">The STR month.</param>
            <param name="strYear">The STR year.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.FirstDayOfMonth">
            <summary>
            Firsts the day of month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.FirstDayOfMonth(System.DateTime)">
            <summary>
            Firsts the day of month.
            </summary>
            <param name="dt">The dt.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.FirstDayOfMonth(System.Int32,System.Int32)">
            <summary>
            Firsts the day of month.
            </summary>
            <param name="strMonth">The STR month.</param>
            <param name="strYear">The STR year.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfNextWeek">
            <summary>
            Gets the start of next week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfNextWeek">
            <summary>
            Gets the end of next week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfLastWeek">
            <summary>
            Gets the start of last week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfLastWeek">
            <summary>
            Gets the end of last week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfCurrentWeek">
            <summary>
            Gets the start of current week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the start of current week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfCurrentWeek">
            <summary>
            Gets the end of current week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the start of current week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfLastMonth">
            <summary>
            Gets the end of last month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfCurrentMonth">
            <summary>
            Gets the start of current month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfMonth(Digita.Tustena.Core.DateAndTime.Month,System.Int32)">
            <summary>
            Gets the start of month.
            </summary>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfMonth(Digita.Tustena.Core.DateAndTime.Month)">
            <summary>
            Gets the start of month.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfMonth(System.DateTime)">
            <summary>
            Gets the start of month.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfCurrentMonth">
            <summary>
            Gets the end of current month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfQuarter(System.DateTime)">
            <summary>
            Gets the start of Qx of month
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfQuarter(System.DateTime)">
            <summary>
            Gets the start of Qx of month
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfYear(System.DateTime)">
            <summary>
            Gets the start of month.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfYear(System.Int32)">
            <summary>
            Gets the start of year.
            </summary>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfMonth(Digita.Tustena.Core.DateAndTime.Month,System.Int32)">
            <summary>
            Gets the end of month.
            </summary>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfNextMonths(System.Int32)">
            <summary>
            Gets the start of next month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfNextMonth">
            <summary>
            Gets the start of next month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfNextMonth">
            <summary>
            Gets the end of next month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfNextMonths(System.Int32)">
            <summary>
            Gets the start of next month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfLastMonth">
            <summary>
            Gets the start of last month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfYear(System.Int32)">
            <summary>
            Gets the end of year.
            </summary>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfYear(System.DateTime)">
            <summary>
            Gets the start of month.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfLastYear">
            <summary>
            Gets the start of last year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfLastYear">
            <summary>
            Gets the end of last year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfCurrentYear">
            <summary>
            Gets the start of current year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfCurrentYear">
            <summary>
            Gets the end of current year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfNextYear">
            <summary>
            Gets the start of next year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfNextYear">
            <summary>
            Gets the end of next year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfNextYears(System.Int32)">
            <summary>
            Gets the start of next year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfNextYears(System.Int32)">
            <summary>
            Gets the end of next year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetStartOfDay(System.DateTime)">
            <summary>
            Gets the start of day.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetEndOfDay(System.DateTime)">
            <summary>
            Gets the end of day.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.AdjustFiscalYearStart(Digita.Tustena.Core.DateAndTime.Month)">
            <summary>
            Adjusts the fiscal year start.
            </summary>
            <param name="startMonth">The start month.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.GetNextFixedDay(System.DateTime,System.Int32)">
            <summary>
            Gets the next fixed day.
            </summary>
            <param name="d">The d.</param>
            <param name="fixedDay">The fixed day.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateAndTime.ParseStringToDate(System.String)">
            <summary>
            Parse the string to datetime.
            </summary>
            <param name="date">The date in format yymmdd</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Core.DateUtils">
            <summary>
            Dates utils
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.DateUtils.MinSqlDateTime">
            <summary>
            The min SQL date time
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.DateUtils.MaxSqlDateTime">
            <summary>
            The max SQL date time
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.DateUtils.MinValid(System.DateTime[])">
            <summary>
            the min date, between all dates where DateTime.IsValidDateTime()
            </summary>
            <param name="dates"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateUtils.Min(System.DateTime[])">
            <summary>
            The min date 
            </summary>
            <param name="dates"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateUtils.AreEqual(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Ares the equal.
            </summary>
            <param name="dt1">The DT1.</param>
            <param name="dt2">The DT2.</param>
            <param name="epsilon">The epsilon.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateUtils.ConstraintToSqlServerRange(System.DateTime)">
            <summary>
            Constraints to SQL server range.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateUtils.FromSqlFormat(System.String)">
            <summary>
              Froms the SQL format.
            </summary>
            <param name="dateTime"> The date time. </param>
            <returns> </returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateUtils.GetCompactReverseDateTimeFormat">
            <summary>
              Gets the compact reverse date format.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateUtils.GetCompactReverseDateTime(System.DateTime)">
            <summary>
              Gets the compact reverse date.
            </summary>
            <param name="dateTime"> The date time. </param>
            <returns> </returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateUtils.GetCompactReverseDateTimeFormatInfo">
            <summary>
              Gets the compact reverse date format info.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateUtils.GetDateLowerLimit(System.DateTime)">
            <summary>
              Gets the date lower limit.
            </summary>
            <param name="dt"> The dt. </param>
            <returns> </returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateUtils.GetDateUpperLimit(System.DateTime)">
            <summary>
              Gets the date upper limit.
            </summary>
            <param name="dt"> The dt. </param>
            <returns> </returns>
        </member>
        <member name="M:Digita.Tustena.Core.DateUtils.EnsureInclusiveDateRange(System.DateTime@,System.DateTime@)">
            <summary>
              Ensures a one-day range.
            </summary>
            <param name="dtFrom"> The dt from. </param>
            <param name="dtTo"> The dt to. </param>
        </member>
        <member name="M:Digita.Tustena.Core.InfoBox.SetInfo(System.String,Digita.Tustena.Core.Enums.Gravity,System.Object[])">
            <summary>
            Set the text printed to user screen
            </summary>
            <param name="resMessage">use a "!" in front of the resMessage to print a custom string and not a resource</param>
            <param name="gravity"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.InfoBox.SetInfoOnMain(System.String,Digita.Tustena.Core.Enums.Gravity,System.Object[])">
            <summary>
            Set the text printed to user screen forcing the main page (parent)
            </summary>
            <param name="resMessage">use a "!" in front of the resMessage to print a custom string and not a resource</param>
            <param name="gravity"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.InfoBox.Content">
            <summary>
            Get infobox content cache.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:Digita.Tustena.Core.LicenceKey.LicenceType">
            <summary>
             LicenceType
            </summary>
        </member>
        <member name="T:Digita.Tustena.Core.LicenceKey.LicenceStatus">
            <summary>
            LicenceStatus
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.LicenceKey.CompanyName">
            <summary>
            CompanyName
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.LicenceKey.CompanyVatCode">
            <summary>
            CompanyVatCode
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.LicenceKey.ResellerVatCode">
            <summary>
            ResellerVatCode
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.LicenceKey.ErpNotLinked">
            <summary>
            License without erp
            </summary>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Core.MajorType">
            <summary>
            MajorType
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.MajorType.BoS">
            <summary>
            
            </summary>
        </member>
        <member name="T:Digita.Tustena.Core.LicenceException">
            <summary>
            LicenseException
            </summary>
        </member>
        <member name="T:Digita.Tustena.Core.Normalize">
            <summary>
            Descrizione di riepilogo per NormalizeLatin.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Normalize.NormalizeLatin(System.String)">
            <summary>
            Normalizes the latin string.
            </summary>
            <param name="latinStr">The latin STR.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.Throw.IfNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the given value is null
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Throw.If(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the given condition is true
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Throw.IfOutOfRange``1(``0,System.String,System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the given value is outside of the specified range
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Throw`1.If(System.Boolean,System.String)">
            <summary>
            Throws an exception of type <see cref="!:TException"/> if the condition is true
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Throw`1.If(System.Boolean,System.Func{System.String})">
            <summary>
            As <see cref="M:Digita.Tustena.Core.Throw.If(System.Boolean,System.String)"/>, but allows the message to be specified lazily. The message function will only be evaluated
            if the condition is true
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.TicketPermits.AllowViewOtherUsersTicketInMyTicketList">
            <summary>
            The default view of Today and Ticket HomePage
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.TustenaServicesLocatorEnvironmentUtils._log">
            <summary>
                Reference to the logger
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.TypeSignatureUtils.GetSignature(System.Type)">
            <summary>
            Get a fully qualified signature for <paramref name="type"/>
            </summary>
            <param name="type">Type. May be generic or <see cref="T:System.Nullable`1"/></param>
            <returns>Fully qualified signature</returns>
        </member>
        <member name="M:Digita.Tustena.Core.TypeSignatureUtils.BuildGenericSignature(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Takes an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and creates a generic type signature (&lt;string, string&gt; for example)
            </summary>
            <param name="genericArgumentTypes"></param>
            <returns>Generic type signature like &lt;Type, ...&gt;</returns>
        </member>
        <member name="M:Digita.Tustena.Core.TypeUtils.IsGeneric(System.Type)">
            <summary>
            Is this type a generic type
            </summary>
            <param name="type"></param>
            <returns>True if generic, otherwise False</returns>
        </member>
        <member name="M:Digita.Tustena.Core.TypeUtils.GetQualifiedTypeName(System.Type)">
            <summary>
            Gets the fully qualified type name of <paramref name="type"/>.
            This will use any keywords in place of types where possible (string instead of System.String for example)
            </summary>
            <param name="type"></param>
            <returns>The fully qualified name for <paramref name="type"/></returns>
        </member>
        <member name="M:Digita.Tustena.Core.TypeUtils.RemoveGenericTypeNameArgumentCount(System.String)">
            <summary>
            This removes the `{argumentcount} from a the signature of a generic type
            </summary>
            <param name="genericTypeSignature">Signature of a generic type</param>
            <returns><paramref name="genericTypeSignature"/> without any argument count</returns>
        </member>
        <member name="M:Digita.Tustena.Core.TypeUtils.RemoveNestingPlusAggregator(System.String)">
            <summary>
            This removes the `{argumentcount} from a the signature of a generic type
            </summary>
            <param name="genericTypeSignature">Signature of a generic type</param>
            <returns><paramref name="genericTypeSignature"/> without any argument count</returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrlBuilder._queryStringList_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the _queryStringList control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Digita.Tustena.Core.UrnStringHelpers">
            <summary>
            Helper library fore Xslt transformation
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.GetDateTime(System.String,System.String)">
            <summary>
            Gets the date provided in the specified format.
            </summary>
            <param name="data">The data.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.Now(System.String)">
            <summary>
            Gets current date in the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.Blank(System.Int32)">
            <summary>
            Insert blank spaces.
            </summary>
            <param name="count">The number of spaces.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.PadLeft(System.String,System.Int32)">
            <summary>
            Pads left.
            </summary>
            <param name="text">The text.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.PadLeftChar(System.String,System.Int32,System.String)">
            <summary>
            Pads left with char.
            </summary>
            <param name="text">The text.</param>
            <param name="count">The count.</param>
            <param name="chr">The char.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.PadRight(System.String,System.Int32)">
            <summary>
            Pads right.
            </summary>
            <param name="text">The text.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.PadRightChar(System.String,System.Int32,System.String)">
            <summary>
            Pads right with char.
            </summary>
            <param name="text">The text.</param>
            <param name="count">The count.</param>
            <param name="chr">The char.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.PadLines(System.String,System.Int32)">
            <summary>
            Adds empty lines to the text block until count.
            </summary>
            <param name="text">The text.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.LinesCount(System.String)">
            <summary>
            Counts text lines.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.EmptyLines(System.Int32)">
            <summary>
            Adds empty lines.
            </summary>
            <param name="text">The text.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.RemoveLines(System.String,System.Int32)">
            <summary>
            removes more lines
            </summary>
            <param name="text">The text.</param>
            <param name="maxlines">The maxlines.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.RemoveDoubleSpaces(System.String)">
            <summary>
            RemoveDoubleSpaces
            </summary>
            <param name="text">The text.</param>        
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.RegEx(System.String,System.String)">
            <summary>
            Match the text value
            </summary>
            <param name="text">The text.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.Chars(System.String,System.Int32)">
            <summary>
            Repeat the char n times
            </summary>
            <param name="chr">The char.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="search">The search.</param>
            <param name="replace">The replace.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.Cut(System.String,System.Int32)">
            <summary>
            Cuts the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="len">The len.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.Split(System.String,System.Int32)">
            <summary>
            Cuts the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="len">The len.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.SplitByEndOfWord(System.String,System.Int32)">
            <summary>
            Cuts the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="len">The len.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.Rows(System.String,System.Int32)">
            <summary>
            Cuts the specified text in rows.
            </summary>
            <param name="text">The text.</param>
            <param name="len">The number of rows.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.RoundNumber(System.String,System.Int32)">
            <summary>
            Round text with decimal number 
            </summary>
            <param name="text">The string number.</param>
            <param name="len">The decimal number.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.CeilingNumber(System.String,System.Int32)">
            <summary>
            Round text with decimal number 
            </summary>
            <param name="text">The string number.</param>
            <param name="len">The decimal number.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.Decimals(System.String,System.String,System.Int32)">
            <summary>
            Count and add missing decimals to a number.
            </summary>
            <param name="number">The number.</param>
            <param name="separator">The separator.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.ToDecimal(System.String)">
            <summary>
            Convert string to decimal
            </summary>
            <param name="number">the string number</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.NameLeftValueRight(System.String,System.String,System.Int32)">
            <summary>
            Will create a fixed size string with the name on the left and value on the right
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.FixedTextLine(System.String,System.String,System.String)">
            <summary>
            Convert the line to a block of text of fixed size parts
            Append to each part a [LRM]{size}[separator]
            ex: linetextR4| - will padright the part for 4 spaces.
            ex: linetextM2| - will padleft  the part for 2 spaces and go to newline 4 times in each part.
            </summary>
            <param name="line">The line.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.UnEscape(System.String)">
            <summary>
            Unescape the string.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.FlattenMultiline(System.String)">
            <summary>
            Transform a multiline text into a single line text. The original 
            text is splitted using Environment.NewLine as separator and the 
            single tokens are trimmed and concatenated (each token separated 
            from the next by a single space char) in a new string.
            </summary>
            <param name="text">The input text</param>
            <returns>A flattended single line text</returns>
        </member>
        <member name="M:Digita.Tustena.Core.UrnStringHelpers.First(System.String,System.String)">
            <summary>
            Splits the input string using the given separator and returns 
            the first splitted item. 
            </summary>
            <param name="input">The input string</param>
            <param name="separator">The separator used for splitting</param>        
            <returns>The first splitted item. If the input string does not 
            contain the separator returns the original input string.</returns>
        </member>
        <member name="T:Digita.Tustena.Core.OnLoginSuccess">
            <summary>
            base current user structure
            </summary>
        </member>
        <member name="P:Digita.Tustena.Core.UserConfig.CurrentUC">
            <summary>
            Gets the current uc.
            </summary>
            <value>The current uc.</value>
        </member>
        <member name="M:Digita.Tustena.Core.UserConfig.AddParameter(System.String,System.Object)">
            <summary>
            Add the object to the UserConfig persistence
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Digita.Tustena.Core.UserConfig.RemoveParameter(System.String)">
            <summary>
            Remove the object to the UserConfig persistence
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Digita.Tustena.Core.UserConfig.GetParameter(System.String)">
            <summary>
            Retrieve the object to the UserConfig persistence
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Core.UserConfig.IsAuthorizable">
            <summary>
            When true, the methods <see cref="M:Digita.Tustena.Core.UserConfig.IsAuthorizedTo(System.String,Digita.Tustena.Core.Enums.BusinessObjectType)">IsAuthorizedTo</see> use the <see cref="P:Digita.Tustena.Core.UserConfig.SecurityPoliciesService">SecurityPoliciesService</see>
            to determine if the UC is authorized.
            When false, the methods <see cref="M:Digita.Tustena.Core.UserConfig.IsAuthorizedTo(System.String,Digita.Tustena.Core.Enums.BusinessObjectType)">IsAuthorizedTo</see> return the value of <see cref="P:Digita.Tustena.Core.UserConfig.DefaultValueForIsAuthorizedTo"/>  
            </summary>
        </member>
        <member name="P:Digita.Tustena.Core.UserConfig.DefaultValueForIsAuthorizedTo">
            <summary>
            The value returned by the methods <see cref="M:Digita.Tustena.Core.UserConfig.IsAuthorizedTo(System.String,Digita.Tustena.Core.Enums.BusinessObjectType)">IsAuthorizedTo</see> when <see cref="P:Digita.Tustena.Core.UserConfig.IsAuthorizable"/> is false
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Digita.Tustena.Core.Utility.AsyncHelpers.RunSync(System.Func{System.Threading.Tasks.Task})" -->
        <!-- Badly formed XML comment ignored for member "M:Digita.Tustena.Core.Utility.AsyncHelpers.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})" -->
        <member name="M:Digita.Tustena.Core.Utility.RoslynExtensions.GetRoslynCompilerPath">
            <summary>
            Try to obtain a valid path for the "csc.exe" compiler.
            If not found, return null.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Core.Utility.SerializableDictionary`2">
            <summary>
            Represents an XML serializable collection of keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="T:Digita.Tustena.Core.Utility.TypeIdentifier">
            <summary>Representation of a .NET type name, allowing access to the individual parts of the 
                     type name, both for reading and for modification.</summary>
            <remarks>Use <see cref="M:Digita.Tustena.Core.Utility.TypeIdentifier.Parse(System.String)"/> to create a new instance of a <see cref="T:Digita.Tustena.Core.Utility.TypeIdentifier" /></remarks>
        </member>
        <member name="P:Digita.Tustena.Core.Utility.TypeIdentifier.AssemblyName">
            <summary>Gets or sets the assembly name in which this type resides. This may be <see langword="null"/> if no 
                     assembly name was provided.</summary>
        </member>
        <member name="P:Digita.Tustena.Core.Utility.TypeIdentifier.TypeSpecifiers">
            <summary>Gets or sets the specifiers indicating whether this type is an array, pointer or reference type.</summary>
        </member>
        <member name="P:Digita.Tustena.Core.Utility.TypeIdentifier.Namespace">
            <summary>Gets or sets the namespace of the type. May be <see langword="null"/> if the type is not contained within a namespace.</summary>      
        </member>
        <member name="P:Digita.Tustena.Core.Utility.TypeIdentifier.NamespaceTypeName">
            <summary>
            Gets or sets the namespace and type name, without any array/pointer/reference specifiers or
            generic arguments. For example the
            <see cref="P:Digita.Tustena.Core.Utility.TypeIdentifier.NamespaceTypeName" /> of the type
            <c>System.Collections.Generic.Dictionary`2+KeyCollection[System.String,System.Int32][,]</c>
            is <c>System.Collections.Generic.Dictionary`2+KeyCollection</c>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
            illegal values.</exception>
            <value>The name of the namespace type.</value>
        </member>
        <member name="P:Digita.Tustena.Core.Utility.TypeIdentifier.AssemblyQualifiedName">
            <summary>Gets or sets the full assembly qualified name of the type.</summary>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
            illegal values.</exception>
        </member>
        <member name="P:Digita.Tustena.Core.Utility.TypeIdentifier.GenericArguments">
            <summary>Gets a list containing the generic arguments of this type, or an empty list if no generic arguments are available.</summary>      
        </member>
        <member name="P:Digita.Tustena.Core.Utility.TypeIdentifier.FullName">
            <summary>
            Gets or sets the full name of the type. This is equivalent to
            <see cref="P:System.Type.FullName"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
            illegal values.</exception>
        </member>
        <member name="P:Digita.Tustena.Core.Utility.TypeIdentifier.Name">
            <summary>
            Gets or sets the simple name of the type <b>without</b> any array/pointer/byref specs.
            </summary>
            <remarks>
            This is different from <see cref="P:System.Reflection.MemberInfo.Name"/> that does include the array/pointer/byRef
            specifiers.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
            illegal values.</exception>
            <value>The name.</value>
        </member>
        <member name="P:Digita.Tustena.Core.Utility.TypeIdentifier.IsArray">
            <summary>Returns true if this type is an array.</summary>
        </member>
        <member name="P:Digita.Tustena.Core.Utility.TypeIdentifier.IsPointer">
            <summary>Returns true if this type is a pointer.</summary>
        </member>
        <member name="P:Digita.Tustena.Core.Utility.TypeIdentifier.IsReference">
            <summary>Returns true if this type is a reference.</summary>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeIdentifier.GetElementType">
            <summary>
            Gets element type of this type if this type is an array, pointer or reference. Returns
            <see langword="null"/> otherwise.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeIdentifier.GetDeclaringType">
            <summary>Gets declaring type of this type if this type is a nested type, or returns <see langword="null"/> otherwise.</summary>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeIdentifier.Parse(System.String)">
            <summary>Parses a type name. This may be an assembly qualified name, a full type name or a simple type name.</summary>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
            illegal values.</exception>
            <param name="typeName">The type name to parse</param>
            <returns>A new TypeIdentifier representing the specified type.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeIdentifier.Equals(Digita.Tustena.Core.Utility.TypeIdentifier)">
            <summary>Tests if this TypeIdentifier is considered equal to another.</summary>
            <param name="other">The type identifier to compare to this object.</param>
            <returns>True if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeIdentifier.Equals(System.Object)">
            <summary>Tests if this object is considered equal to another.</summary>
            <param name="obj">The object to compare to this object.</param>
            <returns>True if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeIdentifier.ToString">
            <summary>Convert this object into a string representation.</summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeIdentifier.GetHashCode">
            <summary>Calculates a hash code for this object.</summary>
            <returns>A hash code for this object.</returns>
        </member>
        <member name="T:Digita.Tustena.Core.Utility.TypeNameParserException">
            <summary>Exception thrown when an invalid type name is parsed by a <see cref="T:Digita.Tustena.Core.Utility.TypeIdentifier"  /></summary>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeNameParserException.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeNameParserException.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeNameParserException.#ctor(System.String,System.Exception)">
            <summary>Constructor.</summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception or <see langword="null"/>.</param>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeNameParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Specialised constructor for use only by derived class.</summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Digita.Tustena.Core.Utility.TypeSpecifier">
            <summary>
            Description of a type specifier, that indicates whether a type is an array, pointer or
            reference.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Core.Utility.TypeSpecifier.Reference">
            <summary>Indicates a reference specifier in a type name, i.e. '&amp;'.</summary>
        </member>
        <member name="F:Digita.Tustena.Core.Utility.TypeSpecifier.Pointer">
            <summary>Indicates a pointer specifier in a type name, i.e. '*'.</summary>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeSpecifier.Array(System.Int32)">
            <summary>Indicates an array specifier in a type name, i.e. '[]', or '[,,]' etc.</summary>
            <param name="rank">The rank of the array. Must be greater than 0.</param>
        </member>
        <member name="P:Digita.Tustena.Core.Utility.TypeSpecifier.Kind">
            <summary>Gets the type of this specifier.</summary>
        </member>
        <member name="P:Digita.Tustena.Core.Utility.TypeSpecifier.ArrayRank">
            <summary>Gets the array rank if this indicates an array, or 0 otherwise.</summary>
            <value>The array rank.</value>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeSpecifier.ToString">
            <summary>Convert this object into a string representation.</summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeSpecifier.Equals(Digita.Tustena.Core.Utility.TypeSpecifier)">
            <summary>Tests if this TypeSpecifier is considered equal to another.</summary>
            <param name="other">The type specifier to compare to this object.</param>
            <returns>True if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeSpecifier.Equals(System.Object)">
            <summary>Tests if this object is considered equal to another.</summary>
            <param name="obj">The object to compare to this object.</param>
            <returns>True if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="M:Digita.Tustena.Core.Utility.TypeSpecifier.GetHashCode">
            <summary>Calculates a hash code for this object.</summary>
            <returns>A hash code for this object.</returns>
        </member>
        <member name="T:Digita.Tustena.Core.Utility.TypeSpecifierKind">
            <summary>Values that represent the type of a <see cref="T:Digita.Tustena.Core.Utility.TypeSpecifier" /></summary>
        </member>
        <member name="F:Digita.Tustena.Core.Utility.TypeSpecifierKind.Pointer">
            <summary>Indicates a pointer specifier (*)</summary>
        </member>
        <member name="F:Digita.Tustena.Core.Utility.TypeSpecifierKind.Reference">
            <summary>Indicates a reference specifier (&amp;).</summary>
        </member>
        <member name="F:Digita.Tustena.Core.Utility.TypeSpecifierKind.Array">
            <summary>Indicates an array specifier, e.g. ([], [,,]).</summary>
        </member>
        <member name="T:Digita.Tustena.Core.licencemanager.DownloadCRMLicence">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Core.licencemanager.DownloadCRMLicence.#ctor">
            <remarks/>
        </member>
        <member name="E:Digita.Tustena.Core.licencemanager.DownloadCRMLicence.GetLicenceCompleted">
            <remarks/>
        </member>
        <member name="E:Digita.Tustena.Core.licencemanager.DownloadCRMLicence.DownloadFileCompleted">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Core.licencemanager.DownloadCRMLicence.GetLicence(System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Core.licencemanager.DownloadCRMLicence.GetLicenceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Core.licencemanager.DownloadCRMLicence.GetLicenceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Core.licencemanager.DownloadCRMLicence.DownloadFile(System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Core.licencemanager.DownloadCRMLicence.DownloadFileAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Core.licencemanager.DownloadCRMLicence.DownloadFileAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Core.licencemanager.DownloadCRMLicence.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Core.licencemanager.GetLicenceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Core.licencemanager.GetLicenceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Core.licencemanager.GetLicenceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Core.licencemanager.DownloadFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Core.licencemanager.DownloadFileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Core.licencemanager.DownloadFileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Core.WindowServices.WindowServicesUtils">
            <summary>
              Window Services Utils
            </summary>
        </member>
        <member name="M:Digita.Tustena.Core.WindowServices.WindowServicesUtils.StopAndWait(System.String)">
            <summary>
            Stops the and wait.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.WindowServices.WindowServicesUtils.RestartAndWait(System.String)">
            <summary>
            Restarts the and wait.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Core.WindowServices.WindowServicesUtils.StartAndWait(System.String)">
            <summary>
            Starts the and wait.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <returns></returns>
        </member>
        <member name="F:Digita.Tustena.OData.TustenaODataEnvironment._log">
            <summary>
                Reference to the logger
            </summary>
        </member>
        <member name="T:Digita.Tustena.Utils.QueueUtils">
            <summary>
            </summary>
        </member>
        <member name="M:Digita.Tustena.Utils.QueueUtils.Dequeue``1(System.Collections.Generic.Queue{``0},System.Int64)">
            <summary>
              Dequeues the specified queue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queue">The queue.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Compress.CRC32">
            <summary>
            Calculates a 32bit Cyclic Redundancy Checksum (CRC) using the
            same polynomial used by Zip.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Compress.CRC32.#ctor">
            <summary>
            Construct an instance of the CRC32 class, pre-initialising the table
            for speed of lookup.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Compress.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Digita.Tustena.Compress.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="T:Digita.Tustena.Compress.ZipDirEntry">
            <summary>
            Zip helper class implements ZIP/GZIP archive handling functions
            </summary>
        </member>
        <member name="M:Digita.Tustena.Compress.ZipFile.Read(System.String)">
            <summary>
            This will throw if the zipfile does not exist. 
            </summary>
        </member>
        <member name="M:Digita.Tustena.Compress.ZipFile.Read(System.String,System.Boolean)">
            <summary>
            This will throw if the zipfile does not exist. 
            </summary>
        </member>
        <member name="M:Digita.Tustena.Compress.ZipFile.ReadByteArray(System.Byte[],System.Boolean)">
            <summary>
            This will throw if the zipfile does not exist. 
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Threading.Relaxed">
            <summary>
            Execute the delegate and wait for an amount of time equal to the elapsed execution time.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Threading.Relaxed.#ctor(System.Action,System.Double,System.Nullable{System.TimeSpan})">
            <summary>
            Execute the delegate and wait for an amount of time equal to the elapsed execution time.
            </summary>
            <param name="init">The delegate to execute</param>
            <param name="delayFactor">The delay factor ex: half of the time = 0,5</param>
            <param name="minimumExecutionCount"></param>
        </member>
        <member name="F:Digita.Tustena.VirtualFileSystem.TustenaVirtualFileSystemEnvironment._log">
            <summary>
                Reference to the logger
            </summary>
        </member>
        <member name="F:Digita.OData.Transformations.ODataTransformV4LiteraleDateTimeToV3ExplicitDateTime._regex">
             <summary>
             Positive matches:
             pippo eq 5 or (id lt 5 and DateTime eq 2015-07-28T10:23:00Z
             pippo eq 5 or (id lt 5 and DateTime eq  2015-07-28T10:23:00Z
             pippo eq 5 or (id lt 5 and DateTime eq  2015-07-28T10:23:00Z 
             pippo eq 5 or (id lt 5 and DateTime eq  2015-07-28T10:23:00Z)
             pippo eq 5 or (id lt 5 and DateTime eq  2015-07-28T10:23:00Z or aa gt 5)
             pippo eq 5 or (id lt 5 and DateTime eq  2015-07-28T10:23:00Z  or aa gt 5)
             pippo eq 5 or (id lt 5 and DateTime eq 2015-07-28T10:23:00.1Z
             pippo eq 5 or (id lt 5 and DateTime eq  2015-07-28T10:23:00.12Z
             pippo eq 5 or (id lt 5 and DateTime eq  2015-07-28T10:23:00.123Z 
             pippo eq 5 or (id lt 5 and DateTime eq  2015-07-28T10:23:00.1234Z)
             pippo eq 5 or (id lt 5 and DateTime eq  2015-07-28T10:23:00.12345Z or aa gt 5)
             pippo eq 5 or (id lt 5 and DateTime eq  2015-07-28T10:23:00.123456Z  or aa gt 5)
             pippo eq 5 or (id lt 5 and DateTime eq  2015-07-28T10:23:00.1234567Z  or aa gt 5)
            
             Negative matches:
             pippo eq 5 or (id lt 5 and DateTime eq  2015-07-28T10:23:00Z'
             pippo eq 5 or (id lt 5 and DateTime eq '2015-07-28T10:23:00Z'
             pippo eq 5 or (id lt 5 and DateTime eq cast(2015-07-28T10:23:00Z)
             pippo eq 5 or (id lt 5 and DateTime eq cast( 2015-07-28T10:23:00Z)
             pippo eq 5 or (id lt 5 and DateTime eq datetime'2015-07-28T10:23:00Z'
             </summary>
        </member>
        <member name="P:Digita.OData.ODataQueryCriteria.ReturnTransformedValueOnFilterPropertyGetter">
            <summary>
            When TRUE, the <see cref="!:IQueryCriteria.Filter">Filter</see> property will return the value of the <see cref="P:Digita.OData.ODataQueryCriteria.TransformedFilter">TransformedFilter</see> property instead of the original value
            </summary>
        </member>
        <member name="P:Digita.OData.ODataQueryCriteria.ReturnTransformedValueOnSelectPropertyGetter">
            <summary>
            When TRUE, the <see cref="!:IQueryCriteria.Select">Select</see> property will return the value of the <see cref="P:Digita.OData.ODataQueryCriteria.TransformedSelect">TransformedSelect</see> property instead of the original value
            </summary>
        </member>
        <member name="P:Digita.OData.ODataQueryCriteria.ReturnTransformedValueOnOrderByPropertyGetter">
            <summary>
            When TRUE, the <see cref="!:IQueryCriteria.OrderBy">OrderBy</see> property will return the value of the <see cref="P:Digita.OData.ODataQueryCriteria.TransformedOrderBy">TransformedOrderBy</see> property instead of the original value
            </summary>
        </member>
        <member name="T:TimeRange">
            <summary>
            Represents a time range which is defined with a START and END time (bounds).
            Both bounds are stored internally as Timespan objects.
            - it a range for one day (00:00-24:00) which means it is date independend!
            - precision is reduced to hours and minutes
            - bounds can be set directly with start and end properties or with SetEnd() und SetStart() methods.
            - 0:00 at the end is displayed as 24:00
            <creator>Michal Gabrukiewicz</creator>
            </summary>
        </member>
        <member name="F:TimeRange.MinutesOfTheDay">
            <summary>
            Gets the amount of minutes of a whole day (24 hours)
            </summary>
        </member>
        <member name="M:TimeRange.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Instantiates a new time range with a given start- and end-timespan
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:TimeRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Instantiates a new time range for a given Start and End with hours and minutes
            </summary>
            <param name="startH"></param>
            <param name="startM"></param>
            <param name="endH"></param>
            <param name="endM"></param>
        </member>
        <member name="M:TimeRange.#ctor">
            <summary>
            Instantiates a new timerange instance with the smallest possible lower and highest possible upper bound (00:00-24:00)
            </summary>
        </member>
        <member name="M:TimeRange.ToString">
            <summary>
            represents the timerange in a format like: 12:00-14:00
            </summary>
            <returns></returns>
        </member>
        <member name="M:TimeRange.FormatTime(System.TimeSpan)">
            <summary>
            Formats the time properly
            </summary>
            <param name="timefield"></param>
            <returns></returns>
        </member>
        <member name="M:TimeRange.SetStart(System.Int32,System.Int32)">
            <summary>
            Sets the hours and minutes of the start
            </summary>
            <param name="h"></param>
            <param name="m"></param>
        </member>
        <member name="M:TimeRange.SetEnd(System.Int32,System.Int32)">
            <summary>
            Sets the hours and minutes of the end
            </summary>
            <param name="h"></param>
            <param name="m"></param>
        </member>
        <member name="M:TimeRange.Equals(System.Object)">
            <summary>
            Checks equality
            </summary>
            <param name="obj">another TimeRange instance</param>
            <returns></returns>
        </member>
        <member name="M:TimeRange.Clashes(TimeRange)">
            <summary>
            Checks if this timerange clashes with another one.
            <constraint>bounds are exclusive</constraint>
            </summary>
            <param name="other"></param>
            <returns>true if there is a clash</returns>
        </member>
        <member name="M:TimeRange.Clashes(TimeRange,System.Boolean)">
            <summary>
            Checks if this timerange clashes with another one.
            </summary>
            <param name="other">The timerange to compare</param>
            <param name="inclusive">Use Inclusive or SemiExclusive Boundaries</param>
            <returns></returns>
        </member>
        <member name="M:TimeRange.op_Equality(TimeRange,TimeRange)">
            <summary>
            if Equals is overriden this operator needs to overloaded
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:TimeRange.op_Inequality(TimeRange,TimeRange)">
            <summary>
            if Equals is overriden this operator needs to overloaded
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:TimeRange.IsIn(System.TimeSpan)">
            <summary>
            Checks if a given time value is within the bounds of the instance
            <constraint>Bounds are inclusive!</constraint>
            </summary>
            <param name="timespan"></param>
            <returns></returns>
        </member>
        <member name="M:TimeRange.IsIn(TimeRange)">
            <summary>
            Checks if a given timerange is within the bounds of the instance
            <constraint>Bounds are inclusive</constraint>
            </summary>
            <param name="timespan"></param>
            <returns></returns>
        </member>
        <member name="M:TimeRange.Parse(System.String)">
            <summary>
            Tries to parse a given string into a TimeRange object
            Strings of the following format are parsed:
            - 1:00-12:20
            - 1:00:10-12:20:00
            - 01:00-12:30
            - 1:0-12:30
            - 100-1230
            - 0100-1230
            - 1-1230
            </summary>
            <param name="timeRangeString"></param>
            <returns>null if could not be parsed</returns>
        </member>
        <member name="M:TimeRange.ParseTimeSpan(System.String)">
            <summary>
            Takes a given string which represents a time (hours and minutes) and tries to parse it into a Timespan.
            It recognizes strings in the following formats: 10:30, 10, 10:0, 10:3, 1030
            </summary>
            <param name="input">your string which should be parsed</param>
            <returns>if cannot parse then null is returned</returns>
        </member>
        <member name="P:TimeRange.Start">
            <summary>
            Gets/Sets the Start bound
            <constraint>Must be before end</constraint>
            <constraint>Minimum is 00:00; Maximum is 23:59</constraint>
            </summary>
        </member>
        <member name="P:TimeRange.End">
            <summary>
            Gets/Sets the End bound
            <constraint>must be after start</constraint>
            <constraint>Minimum is 00:01; Maximum is 24:00</constraint>
            </summary>
        </member>
        <member name="T:System.Globalization.DaylightTimeChange">
            <summary>
            Helper class for Local Time Zone handler
            </summary>
        </member>
        <member name="T:System.Globalization.LocalTimeZone">
            <summary>
            Local Time Zone handler useful for timezone conversion.
            </summary>
        </member>
        <member name="T:Win32.TimeZones">
            <summary>
            Helper class for Local Time Zone handler
            </summary>
        </member>
        <member name="T:Win32.Win32LocalTimeZone">
            <summary>
            Helper class for Local Time Zone handler
            </summary>
        </member>
    </members>
</doc>
