<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Digita.Tustena.Base</name>
    </assembly>
    <members>
        <member name="M:Digita.Tustena.Base.AbstractBO.GroupManagerHelper.SetSafeGroups">
            <summary>
            Avoid automatisms setting the property "Groups"
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.AbstractBO.GroupManagerHelper.GetGroupMapIdMatchingList(Digita.Tustena.Core.UserConfig,System.Int64)">
            <summary>
            Gets the list of matching GROUPMAPID for a given Group ID
            </summary>
            <param name="uc">The current UserConfig</param>
            <param name="groupId">The Group id</param>
            <returns>A list of matching GROUPMAPIDs</returns>
        </member>
        <member name="M:Digita.Tustena.Base.AbstractBO.GroupManagerHelper.GetGroupMapIdMatchingList(Digita.Tustena.Core.UserConfig,System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets the list of matching GROUPMAPID for a given group IDs list
            </summary>
            <param name="uc">The current UserConfig</param>
            <param name="groupIds">The list of Groups ids</param>
            <returns>A list of matching GROUPMAPIDs</returns>
        </member>
        <member name="M:Digita.Tustena.Base.AbstractBO.GroupManagerHelper.GetGroupIdMatchingList(Digita.Tustena.Core.UserConfig,System.Int64)">
            <summary>
            Gets the list of matching GROUPID for a given Group map ID
            </summary>
            <param name="uc">The current UserConfig</param>
            <param name="groupMapId">The Group map id</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.AbstractBO.MergeBusinessObjectHelper.MergeProperty(System.Reflection.PropertyInfo,System.Object,System.Boolean,System.Int64)">
            <summary>
            
            </summary>
            <param name="propertyInfo"></param>
            <param name="propertyValue"></param>
            <param name="keepBoth"></param>
            <param name="freeFieldId"></param>
        </member>
        <member name="M:Digita.Tustena.Base.AbstractBO.MergeBusinessObjectHelper.MergeListProperties(System.Object,System.Object,Digita.Tustena.Interfaces.MergeableAttribute,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pinfoValue"></param>
            <param name="currentValue"></param>
            <param name="mergeAttribute"></param>
            <param name="keepBoth"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.CompanyBO.Restore(System.Int64)">
            <summary>
            Ripristina l'azienda e ripristina, se esiste il corrispondente indirizzo in CRM_ADDRESSES
            </summary>
            <param name="id">Company ID to restore</param>
            <returns>
            Ritorna TRUE se l'azienda viene ripristinata correttamente, FALSE altrimenti. 
            NB: se esiste l'indirizzo in CRM_ADDRESS viene ripristinato.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.CompanyBO.DeleteFinal(System.Int64[])">
            <summary>
            
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="F:Digita.Tustena.Base.BusinessObjects.CrmBusinessObjectsUtils._log">
            <summary>
            Reference to the logger
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.BusinessObjects.Infrastructure.LazyBOsStorage`1._log">
            <summary>
            Reference to the logger
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExtensionsPlaygroundBO.InternalProperty">
            <summary>
            DO NOT REMOVE: NEEDED TO VERIFY THAT INTERNAL PROPERTIES ARE NOT INCLUDED IN DTOs, AND THAT THEY DO NOT INTERFERE WITH SERIALIZATION
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.BusinessObjects.ExtensionsPlaygroundBO.PublicField">
            <summary>
            DO NOT REMOVE: NEEDED TO VERIFY THAT PUBLIC FIELDS ARE NOT INCLUDED IN DTOs, AND THAT THEY DO NOT INTERFERE WITH SERIALIZATION
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.CurrencyHelper.InvalidateCurrencyCache(Digita.Tustena.Core.UserConfig)">
            <summary>
                Invalidate currency cache
            </summary>
            <param name="uc"></param>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.PrivacyTypeManagementBO.TypePrivacy">
            <summary>
            Used for backward compatibility
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TaxValueBO.Load(System.String)">
            <summary>
            Load TaxValue from TaxCode
            </summary>
            <param name="code">tax code</param>
            <returns>True if exists a TaxValue with passed code</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FreeFieldsBO.Item.SaveSchema(Digita.Tustena.Core.UserConfig)">
            <summary>
            Save current fireefield schema (not the value but the structure)
            </summary>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Digita.Tustena.Base.BusinessObjects.FreeFieldsBO.ClearCache" -->
        <member name="M:Digita.Tustena.Base.BusinessObjects.BaseTustenaDBSearchConnectedCriteria.#ctor">
            <summary>
            Initializes a new instance of the BaseTustenaDBSearchConnectedCriteria class.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.BaseTustenaDBSearchConnectedCriteria.#ctor(Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBSearchSingleCriterion)">
            <summary>
            Initializes a new instance of the BaseTustenaDBSearchConnectedCriteria class.
            </summary> 
            <param name="criteria">The criteria.</param>
            <exception cref="T:System.ArgumentNullException">criteria;Cannot initialize using a null critera</exception>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.BaseTustenaDBSearchConnectedCriteria.TrailingOperator">
            <summary>
              Gets or sets the trailing operator.
            </summary>
            <value>
              The trailing operator.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.BaseTustenaDBSearchSingleCriterion.ParametersValues">
            <summary>
              Gets or sets the parameters values.
            </summary>
            <value>
              The parameters values.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.BaseTustenaDBSearchSingleCriterion.Comparator">
            <summary>
              Gets or sets the comparator.
            </summary>
            <value>
              The comparator.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.BaseTustenaDBSearchSingleCriterion.Operator">
            <summary>
              Gets or sets the operator.
            </summary>
            <value>
              The operator.
            </value>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.StructuredTustenaDBSearchEngine.#ctor(Digita.Tustena.Base.BusinessObjects.TustenaDBBO)">
            <summary>
            Initializes a new instance of the StructuredTustenaDBSearchEngine class.
            </summary>
            <param name="uc">The uc.</param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.StructuredTustenaDBSearchEngine.CountIdsBySingleCriterion(Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBSearchSingleCriterion)">
            <summary>
            Counts the ids by single criterion.
            </summary>   
            <param name="criterion">The criterion.</param>
            <returns>A long representing the number of records satisfying the given criterion</returns>       
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.StructuredTustenaDBSearchEngine.CountIdsByConnectedCriteria(Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBSearchConnectedCriteria[])">
            <summary>
            Counts the ids by connected criteria.
            </summary>   
            <param name="criteria">The criteria.</param>
            <returns>A long representing the number of records satisfying the given criteria</returns>     
        </member>
        <!-- Badly formed XML comment ignored for member "M:Digita.Tustena.Base.BusinessObjects.StructuredTustenaDBSearchEngine.SearchDataItemsBySingleCriterion(Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBSearchSingleCriterion)" -->
        <!-- Badly formed XML comment ignored for member "M:Digita.Tustena.Base.BusinessObjects.StructuredTustenaDBSearchEngine.SearchDataItemsByConnectedCriteria(Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBSearchConnectedCriteria[])" -->
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetDataItemsCount">
            <summary>
            Counts all TustenaDBDataItems.
            </summary>   
            <returns>A long representing the number of all TustenaDBDataItems</returns>       
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetDataItemsCount(Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBSearchSingleCriterion)">
            <summary>
            Counts the TustenaDBDataItems satisfying the given criterion.
            </summary>   
            <param name="criterion">The criterion.</param>
            <returns>A long representing the number of TustenaDBDataItems satisfying the given criterion</returns>               
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetDataItemsCount(Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBSearchConnectedCriteria[])">
            <summary>
            Counts the TustenaDBDataItems satisfying the given connected criteria.
            </summary>   
            <param name="criteria">The criteria.</param>
            <returns>A long representing the number of TustenaDBDataItems satisfying the given connected criteria</returns>      
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetDataItems">
            <summary>
            Gets all the TustenaDBDataItems.       
            </summary>          
            <returns>A list (of type ITustenaDBDataItem) containing all TustenaDBDataItems</returns>   
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetDataItems(Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBSearchSingleCriterion)">
            <summary>
            Gets the TustenaDBDataItems satisfying the criterion.
            </summary>      
            <param name="criterion">The criterion.</param>
            <returns>A list (of type ITustenaDBDataItem) containing all TustenaDBDataItems satisfying the given criterion</returns>  
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetDataItems(Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBSearchConnectedCriteria[])">
            <summary>
            Gets the TustenaDBDataItems satisfying the connected criteria.
            </summary>      
            <param name="criteria">The criteria.</param>
            <returns>A list (of type ITustenaDBDataItem) containing all TustenaDBDataItems satisfying the given conneceted criteria</returns>  
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetEmptyDataItem">
            <summary>
            Gets an empty TustenaDBDataItem for this TustenaDBBO with the complete Columns structure
            </summary>
            <returns>An empty TustenaDBDataItem </returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetDataItem(System.Int64)">
            <summary>
            Gets the TustenaDBDataItem with the given Id
            </summary>
            <param name="id">The TustenaDBDataItem Id</param>
            <returns>A TustenaDBDataItem</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetDataItemsAsTable(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets all Gets all the TustenaDBDataItems and returns them as a DataTable.
            </summary>
            <param name="showAllEstructColumns">If true all "estruct" columns are included in the DataTable, 
            unregarding of their respective IsVisible value</param>
            <param name="showMatrixColumns">If true Matrix columns (that is columns whose Content field is 
            not empty) are included in the DataTable</param>
            <param name="isHoursNormalizationRequired">If true fields of type TustenaDBColumnType.Hour are 
            converted from long to DateTime</param>
            <param name="useDescendantOrder">If true the DataTable is sorted by ID in descendant order</param>
            <returns>A DataTable containing the rows of _DATA table</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetDataItemsAsTable(System.Boolean,System.Boolean,System.Boolean,System.Boolean,Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBSearchSingleCriterion)">
            <summary>
            Gets all Gets all the TustenaDBDataItems satisfying the given criterion and returns them as a DataTable.
            </summary>
            <param name="showAllEstructColumns">If true all "estruct" columns are included in the DataTable, 
            unregarding of their respective IsVisible value</param>
            <param name="showMatrixColumns">If true Matrix columns (that is columns whose Content field is 
            not empty) are included in the DataTable</param>
            <param name="isHoursNormalizationRequired">If true fields of type TustenaDBColumnType.Hour are 
            converted from long to DateTime</param>
            <param name="useDescendantOrder">If true the DataTable is sorted by ID in descendant order</param>
            <param name="criterion">The BaseTustenaDBSearchSingleCriterion search criterion</param>
            <returns>A DataTable containing the rows of _DATA table</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetDataItemsAsTable(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBSearchConnectedCriteria})">
            <summary>
            Gets all Gets all the TustenaDBDataItems satisfying the given criterion and returns them as a DataTable.
            </summary>
            <param name="showAllEstructColumns">If true all "estruct" columns are included in the DataTable, 
            unregarding of their respective IsVisible value</param>
            <param name="showMatrixColumns">If true Matrix columns (that is columns whose Content field is 
            not empty) are included in the DataTable</param>
            <param name="isHoursNormalizationRequired">If true fields of type TustenaDBColumnType.Hour are 
            converted from long to DateTime</param>
            <param name="useDescendantOrder">If true the DataTable is sorted by ID in descendant order</param>
            <param name="criteria">The BaseTustenaDBSearchConnectedCriteria multiple search criteria</param>
            <returns>A DataTable containing the rows of _DATA table</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.SaveDataItem(Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBDataItem)">
            <summary>
            Saves the TustenaDBDataItem into the respective _DATA table; 
            if the TustenaDBDataItem is new inserts it.
            </summary>
            <param name="dataItem">The TustenaDBDataItem</param>
            <returns>The id of the saved/new TustenaDBDataItem</returns>    
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.InsertDataItemsBulk(System.Collections.Generic.IEnumerable{Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBDataItem})">
            <summary>
            Inserts the TustenaDBDataItems into the respective _DATA table by using
            a SqlBulkCopy for performance boost.
            </summary>
            <param name="dataItems">The ITustenaDBDataItem collection to be inserted.</param>
            <returns>The number of inserted rows</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.DeleteDataItems(System.Int64)">
            <summary>
            Deletes the specified TustenaDBDataItem from the respective _DATA table.
            </summary>
            <param name="id">The id of the TustenaDBDataItems to be deleted</param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.DeleteDataItems(System.Int64[])">
            <summary>
            Deletes the specified TustenaDBDataItems from the respective _DATA table.
            </summary>
            <param name="ids">The ids of the TustenaDBDataItems to be deleted</param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetUsersListsFields(System.String)">
            <summary>
            Ges the list of items of "multiple value" fields from the USERSLISTSFIELDS table
            </summary>
            <param name="field">The field value, corresponding to the respective _ESTRUCT.FIELDNAME</param>
            <returns>A List&lt;string&gt; containing the possible values for the given field</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.UpdateUsersListsFields(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Updates (that is deletes all matching rows and re-inserts the given items) in the 
            table USERSLISTSFIELDS the list of rows having the TABLEREF equal to
            TableDataSqlName and the FIELD equals to the given field value.
            </summary>
            <param name="field">The field value, corresponding to the respective _ESTRUCT.FIELDNAME</param>
            <param name="items">The list of items</param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetUsersListsFieldsLocalizing(System.String)">
            <summary>
            Ges the list of the localizations of the "multiple value" items from the USERSLISTSFIELDS_LOCALIZING table
            </summary>
            <param name="field">The field value, corresponding to the respective _ESTRUCT.FIELDNAME</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.GetLocalizedUserListField(System.Collections.Generic.List{Digita.Tustena.Interfaces.BusinessObjects.IUserListFieldLocalizing},System.String)">
            <summary>
            Gets the IUserListFieldLocalizing from userListFieldLocalizings matching with the given 
            listItem and the current UC language.
            </summary>
            <param name="userListFieldLocalizings">The list of IUserListFieldLocalizing objects</param>
            <param name="listItem">The item used as key to retrive the localization</param>
            <returns>The IUserListFieldLocalizing from userListFieldLocalizings matching with the given 
            listItem and the current UC language; if no match is found returns listItem</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.UpdateUsersListsFieldsLocalizing(System.String,System.Collections.Generic.List{Digita.Tustena.Interfaces.BusinessObjects.IUserListFieldLocalizing})">
            <summary>
            Updates (that is deletes all matching rows and re-inserts the given items) in the 
            table USERSLISTSFIELDS_LOCALIZING the list of rows having the TABLEREF equal to
            TableDataSqlName and the FIELD equal to the given field value.
            </summary>
            <param name="field">The field value corresponding to the respective _ESTRUCT.FIELDNAME</param>
            <param name="localizings">The list of localized items</param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBBO.CreateTables">
            <summary>
            If they do not exist creates the tables _ESTRUCT" and _DATA".
            </summary>     
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.TustenaDBColumn.LocalizedDisplayName">
            <summary>
            Gets the localized DisplayName according to the current UC language
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.TustenaDBColumn.LocalizedDefText">
            <summary>
            Gets the localized DefText according to the current UC language
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.TustenaDBColumn.LocalizedQuestion">
            <summary>
            Gets the localized Question according to the current UC language
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBColumn.GetLocalizedDisplayNameForLanguage(System.String)">
            <summary>
            Gets the localized DisplayName according to the given language
            </summary>
            <param name="lang">The language code</param>
            <returns>The localized DisplayName according to the given language</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBColumn.GetLocalizedDefTextForLanguage(System.String)">
            <summary>
            Gets the localized DefText according to the given language
            </summary>
            <param name="lang">The language code</param>
            <returns>The localized DefText according to the given language</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBColumn.GetLocalizedQuestionForLanguage(System.String)">
            <summary>
            Gets the localized Question according to the given language
            </summary>
            <param name="lang">The language code</param>
            <returns>The localized Question according to the given language</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBColumn.DBStandardFormatToDefText(System.String,Digita.Tustena.Core.Enums.TustenaDBColumnType,Digita.Tustena.Core.UserConfig)">
            <summary>
            Converts the given DEFTEXT field coming from the _ESTRUCT table to  
            the current UC's Culture representation.
            </summary>
            <param name="dbValue">The value retreved from the DEFTEXT field in the _ESTRUCT table</param>
            <param name="fieldType">The TustenaDBColumnType</param>
            <param name="uc">The current UC</param>
            <returns>A string formatted according the specific conversion pattern</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBColumn.DefTextToDBStandardFormat(System.String,Digita.Tustena.Core.Enums.TustenaDBColumnType,Digita.Tustena.Core.UserConfig)">
            <summary>
            Converts the given DefText to a standard representation for the Tustena DB
            The conversion uses the following patterns for the respectives TustenaDBColumnType:
            - AutomaticDate and Date: "yyyy-MM-dd HH:mm:ss" ("2016-05-31 23:50:52")
            - Number: "D" (14500)
            - Currency: "F" (45300.1234)
            </summary>
            <param name="defText">The DefText property's value</param>
            <param name="fieldType">The TustenaDBColumnType</param>
            <param name="uc">The current UC</param>
            <returns>A string formatted according the specific conversion pattern</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBDataItem.#ctor(Digita.Tustena.Core.UserConfig,System.Collections.Generic.IEnumerable{Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBColumn},System.String)">
            <summary>
            Creates a new instance of TustenaDBColumn initializing its 
            Values dictionary with the _ESTRUCT columns keys
            </summary>
            <param name="uc">The current UC</param>
            <param name="allColumns">All the columns as defined in the 
            _ESTRUCT table (matrix columns included)</param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBDataItem.SetDataItemValue(System.String,System.String)">
            <summary>
            Stores the given string value in the Values dictionary at the specified 
            fieldName key. The value may be converted to a different Type before storing
            it in Values; in this case the current UC language is used for the conversion.
            </summary>
            <param name="fieldName">The key of the Values dictionary</param>
            <param name="value">The value as string</param>
            <returns>True if the value is correctly stored, otherwise false</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TustenaDBDataItem.SetDataItemValue(System.String,System.String,System.String)">
            <summary>
            Stores the given string value in the Values dictionary at the specified 
            fieldName key. The value may be converted to a different Type before storing
            it in Values; in this case the localizationLang language is used for the conversion.
            </summary>
            <param name="fieldName">The key of the Values dictionary</param>
            <param name="value">The value as string</param>
            <param name="localizationLang">The language to be used in eventual Type conversion</param>
            <returns>True if the value is correctly stored, otherwise false</returns>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ContractBO.PaymentType">
            <summary>
            Gets the type of the sepa sequence.
            </summary>
            <value>
            The type of the sepa sequence.
            </value>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ContractBO.Restore(System.Int64)">
            <summary>
            Ripristina l'oggetto AnagraphicBO di tipo BusinessObject
            </summary>
            <param name="id">Id dell'oggetto da ripristinare</param>
            <returns>Ritorna TRUE se viene ripristinato correttamente, FALSE altrimenti</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ContractBO.DeleteFinal(System.Int64[])">
            <summary>
            Elimina definitavamente la sequenza di oggetti del tipo BusinessObject
            </summary>
            <param name="ids">array di id delle righe da eliminare</param>
            <returns>Ritorna TRUE se l'eliminazione viene completata correttamente, FALSE altrimenti</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ContractBO.BuildContractPrintFileName(System.Boolean,System.String)">
            <summary>
            Build the contract print file name.
            </summary>
            <param name="isPrintPreview">True if the print file is a preview.</param>
            <param name="extension">The print file extension without the "." char (ex: "docx", "pdf")</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ApprovalPendingBO.GetQuoteApprovalResults(Digita.Tustena.Interfaces.BusinessObjects.IQuoteBO,Digita.Tustena.Interfaces.BusinessObjects.IApprovalRule)">
            <summary>
            Business logic for approval of IQuoteBo 
            </summary>
            <param name="bo"></param>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ApprovalPendingBO.GetOpportunityApprovalResults(Digita.Tustena.Interfaces.BusinessObjects.IOpportunityBO,Digita.Tustena.Interfaces.BusinessObjects.IApprovalRule)">
            <summary>
            Build the opportunity approval result
            </summary>
            <param name="bo"></param>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ApprovalPendingBO.GetExpenseReportListApprovalResults(Digita.Tustena.Interfaces.BusinessObjects.IExpenseReportListBO,Digita.Tustena.Interfaces.BusinessObjects.IApprovalRule)">
            <summary>
            Build the ExpenseReportList approval result
            </summary>
            <param name="bo"></param>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.ActivityIds">
            <summary>
            The id of linked activities in EXPENSEREPORT_CROSSACTIVITY table
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.ExpensePaymentMethodId">
            <summary>
            The type of payment cc/cash - ref to enum PaymentType
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.ExpenseDate">
            <summary>
            The date of the expense
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.ExpenseItemId">
            <summary>
            The payment type id - ref to enum CostType
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.Cost">
            <summary>
            The cost of the expense
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.Note">
            <summary>
            The expense row note
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.CcTotal">
            <summary>
            The day total of cc qty
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.CashTotal">
            <summary>
            The day total of cash qty
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.CashGrandTotal">
            <summary>
            The grand total of cash qty
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.CcGrandTotal">
            <summary>
            The grand total of cc qty
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.DocumentId">
            <summary>
            The Expense report linked document
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.Quantity">
            <summary>
            The quantity
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.UnitaryCost">
            <summary>
            The unitary cost
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.JobOrderId">
            <summary>
            The expense report linked joborder"
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.ExpenseVehicleId">
            <summary>
            The expense vehicle id"
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.Status">
            <summary>
            The current status
            </summary>        
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.Limbo">
            <summary>
             Implements the logical deletion of the record; furthermore indicates whether this BO is going to be deleted when synced with GestioneStudio (TeamSystem customization only).
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.Load(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.Load(Digita.Tustena.Core.RowElements)">
            <summary>
            
            </summary>
            <param name="dr"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.GetCashTotal">
            <summary>
            return the cash total
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.GetCcTotal">
            <summary>
            return the cc total
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ExpenseReportBO.DeleteFinal(System.Int64[])">
            <summary>
            Elimina definitavamente la sequenza di oggetti del tipo BusinessObject
            </summary>
            <param name="ids">array di id delle righe da eliminare</param>
            <returns>Ritorna TRUE se l'eliminazione viene completata correttamente, FALSE altrimenti</returns>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportListBO.ExpenseReportAmount">
            <summary>
            the expensereportlist total amount
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportListBO.ExpenseReportMonth">
            <summary>
            the expensereportlist month
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportListBO.ExpenseReportYear">
            <summary>
            the expensereportlist year
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportListBO.OwnerId">
            <summary>
            the expensereportlist ownerid
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportListBO.Status">
            <summary>
            the expensereportlist status
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportListBO.CashGrandTotal">
            <summary>
            The grand total of cash qty
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportListBO.CcGrandTotal">
            <summary>
            The grand total of cc qty
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.ExpenseReportListBO.ActivityIds">
            <summary>
            The id of linked activities in EXPENSEREPORT_CROSSACTIVITY table
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ExpenseReportListBO.GetCashGrandTotal">
            <summary>
            return the cash total
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ExpenseReportListBO.GetCcGrandTotal">
            <summary>
            return the cc total
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TrackingRecord.SetRecord17Data(Digita.Tustena.Interfaces.BusinessObjects.IStreamBankBO,Digita.Tustena.Interfaces.BusinessObjects.IInvoiceBO,Digita.Tustena.Interfaces.BusinessObjects.IAnagraphicBO,Digita.Tustena.Interfaces.BusinessObjects.IContractBO)">
            <summary>
            Sets the record17 data.
            </summary>
            <param name="tr">The tr.</param>
            <param name="invoiceBo">The invoice bo.</param>
            <param name="anagraphicBO">The anagraphic BO.</param>
            <param name="contractBo">The contract bo.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.AccountBO.IMapMail">
            <summary>
            Gets or sets a value indicating whether [I map mail].
            </summary>
            <value>
              <c>true</c> if [I map mail]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AccountBO.GetAccountByAddedParameter(System.String,System.String,Digita.Tustena.Core.UserConfig)">
            <summary>
            Retrieve the account id using the TUSTENA_PARAMETER key value pair
            </summary>
            <param name="parameterName"></param>
            <param name="parameterValue"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ActivityBO.SaveAndSendMail">
            <summary>
            Save the activity and send the email if type=5
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ActivityBO.AddAnagraphicToNewCampaignList">
            <summary>
            
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.AlarmBO.AlarmDate">
            <summary>
            The alarm's date
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.AlarmBO.Note">
            <summary>
            The alarm's note
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.AlarmBO.Body">
            <summary>
            The alarm's body
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.AlarmBO.Link">
            <summary>
            The alarm's link
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.AlarmBO.Notifications">
            <summary>
            The alarm's notifications
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AlternativeUnitBO.Load(System.String)">
            <summary>
            Load AlternativeUnitBO from baseUnit
            </summary>
            <param name="baseUnit">the base unit</param>
            <returns>True if exists an AlternativeUnit with passed base unit</returns>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.AnagraphicBO.PortalPassword">
            <summary>
            Is password is not set but PortalEnabled is True a new random password is generated and stored
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AnagraphicBO.LastContactForAccount(System.Int32)">
            <summary>
            Get last contact for passed ID. 
            </summary>
            <param name="uid">the uid. if 0 the last contact generic date (all account)</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AnagraphicBO.CanLoad(System.Int64)">
            <summary>
            Check if the specified id ca be loaded.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AnagraphicBO.AddSalesPerson(System.Int32)">
            <summary>
            Add the SalePerson in SalePersons int[]
            </summary>
            <param name="salePersonId"></param>
            <returns>true if added, false is just exists</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AnagraphicBO.ChangeSalesPerson(System.Int32)">
            <summary>
            Change the SalePerson in SalePersons
            </summary>
            <param name="salePersonId"></param>
            <returns>true if changed, false whether exists</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AnagraphicBO.SaveCategory(Digita.Tustena.Base.BusinessObjects.Infrastructure.LazyWrapper{System.Collections.Generic.List{System.Int64}},System.Boolean)">
            <summary>
            Save the category of the element in CrossCategory Table. The function return a string of category normalized with no repetition
            </summary>
            <param name="categories"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AnagraphicBO.Restore(System.Int64)">
            <summary>
            Ripristina l'oggetto AnagraphicBO di tipo BusinessObject
            </summary>
            <param name="id">Id dell'oggetto da ripristinare</param>
            <returns>Ritorna TRUE se viene ripristinato correttamente, FALSE altrimenti</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AnagraphicBO.DeleteFinal(System.Int64[])">
            <summary>
            Elimina definitavamente la sequenza di oggetti del tipo BusinessObject
            </summary>
            <param name="ids">array di id delle righe da eliminare</param>
            <returns>Ritorna TRUE se l'eliminazione viene completata correttamente, FALSE altrimenti</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AnagraphicBO.Merge(Digita.Tustena.Interfaces.ICrmBusinessObjects)">
            <summary>
            
            </summary>
            <param name="copyFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AnagraphicBO.Merge(Digita.Tustena.Interfaces.ICrmBusinessObjects,System.Collections.Generic.List{Digita.Tustena.Interfaces.Merge.IMergeProperty})">
            <summary>
            
            </summary>
            <param name="copyFrom"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AnagraphicBO.UpdateReferences(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Aggiorna le tabelle con il vecchio riferimento (cancellato) sostituendoci quello corrente.
            Le tabelle (e colonne) da aggiornare vengono lette dal file AppData/Merge.xml
            </summary>
            <param name="crossid">Id da sostituire (old)</param>
            <param name="crossType">CrossType degli oggetti uniti</param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AppointmentBO.HasChanged(Digita.Tustena.Interfaces.ICrmBusinessObjects)">
            <summary>
            Check if current BO is changed
            </summary>
            <param name="otherBo">Optional compare BO, default is OriginalBo</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AppointmentBO.IsFree(Digita.Tustena.Core.UserConfig,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Int64,System.Boolean,System.String,System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Check if the user time range is Free
            </summary>
            <param name="uc"></param>
            <param name="appointmentId"></param>
            <param name="userAppointmentId"></param>
            <param name="startDate">Localized Date (not UTC)</param>
            <param name="endDate">Localized Date (not UTC)</param>
            <param name="isAllDay">Is All Day</param>
            <param name="calendarId"></param>
            <param name="isGroupAppointment"></param>
            <param name="columnNameWithAppId"></param>
            <param name="subTypeActivity"></param>
            <param name="ownerId"></param>
            <param name="activityID"></param>
            <param name="raiseCustomEvent"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.AppointmentBO.NotifyAbsencesOverlapping">
            <summary>
            If the current Appointment is an Absence notify eventual overlappings with
            other Appointment or Activities
            </summary>       
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.CallLogBO.DateStart">
            <summary>
            Call Start Set in UTC
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.CallLogBO.DateEnd">
            <summary>
            Call End Set in UTC
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.Id">
            <summary>
            L'ID dello slot della pratica
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.FileId">
            <summary>
            L'ID del file associato allo slot
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.DossierId">
            <summary>
            ID della pratica a cui è associato lo slot
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.CreatedDate">
            <summary>
            Data di creazione dello slot
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.LastModifiedByDate">
            <summary>
            Data ultima modifica allo slot
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.ReceivingDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.CreatedBy">
            <summary>
            Utente che ha creato lo slot
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.LastModifiedBy">
            <summary>
            Utente che ha modificato per ultimo lo slot
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.ApprovedBy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.HasFile">
            <summary>
            Indica se lo slot è stato associato ad unfile
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.Load(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.SaveSlotToDb(Digita.Tustena.Core.UserConfig)">
            <summary>
            Salva su db le informazione dello slot
            </summary>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.DeleteSlot(System.Int64)">
            <summary>
            
            </summary>
            <param name="slotId"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.DeleteSlot">
            <summary>
            Rimuove da db uno slot
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.LoadStorageFile(Digita.Tustena.Core.UserConfig)">
            <summary>
            Carica il file associato allo slot
            </summary>
            <param name="uc"></param>
            <returns>StorageBO relativo al file dello slot</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.LoadStorageFile(Digita.Tustena.Core.UserConfig,System.Int64)">
            <summary>
            
            </summary>
            <param name="uc"></param>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.GetFile(Digita.Tustena.Core.UserConfig)">
            <summary>
            
            </summary>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.GetDossierFiles(Digita.Tustena.Core.UserConfig)">
            <summary>
            
            </summary>
            <param name="dossierId"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierSlot.DeserializeXml(System.String)">
            <summary>
            Deserializza una stringa in xml: utilizzato per deserializzare i template delle pratiche,
            dove viene indicato quanti e quali slot sono richiesti
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierBO.LastModifiedByUser">
            <summary>
            Ritorna il nome dell'utente autore dell'ultima modifica
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierBO.CreatedByUser">
            <summary>
            Ritorna il nome dell'utente che ha aperto la pratica
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierBO.ExpireDate">
            <summary>
            Data ultima per chiudere la pratica
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.FileDossierBO.ClosedDate">
            <summary>
            Data di effettiva chiusura della pratica
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.ContainsFile(System.Int64)">
            <summary>
            
            </summary>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.GetSlotIdFromFileId(System.Int64)">
            <summary>
            
            </summary>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.LoadFileFromStorage(System.Int64)">
            <summary>
            Ritorna le informazione del file con id=fileId nella tabella FILEMANAGER, se esiste
            </summary>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.AddFile(System.Int64,System.Int64,System.String,System.String)">
            <summary>
            Aggiunge un file alla pratica
            </summary>
            <param name="fileId"></param>
            <param name="dossierId"></param>
            <param name="title"></param>
            <param name="description"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.UpdateFileSlot(System.Int64,System.Int64,System.String,System.String)">
            <summary>
            Modifica un file associato ad una pratica.
            Le modifiche verranno salvate su db quando l'intera pratica verrà salvata
            </summary>
            <param name="fileId"></param>
            <param name="dossierId"></param>
            <param name="title"></param>
            <param name="description"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.LoadDossierFields(Digita.Tustena.Base.BusinessObjects.FileDossierBO,System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="dossier"></param>
            <param name="dbRowResult"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.LoadFileDossierSlots(System.Int64)">
            <summary>
            Carica gli slot dei della pratica (dopo essere stata carica), quindi carica
            sia documenti effettivamente associati alla pratica sia "spazi" riservati a documenti
            ancora da caricare
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.RemoveFileFromSlot(Digita.Tustena.Interfaces.BusinessObjects.IFileDossierSlot)">
            <summary>
            Rimuove un file dalla pratica
            </summary>
            <param name="slot"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.LoadXmlDossierTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.AddFileToDossier(System.Int64,System.String,System.String)">
            <summary>
            Associa un file già caricato alla pratica caricata, 
            quindi basta sapere l'id del file già caricato per eseguire l'associazione
            </summary>
            <param name="fileId"></param>
            <param name="title"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.AddFilesToDossier(System.Collections.Generic.List{System.Int64},System.String,System.String)">
            <summary>
            Associa più files al fascicolo caricato
            </summary>
            <param name="filesIds"></param>
            <param name="title"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.LoadDossierTemplates">
            <summary>
            Carica da db il nome e l'id dei vari template di pratica
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.AddFileToDossier(Digita.Tustena.Interfaces.BusinessObjects.IStorageBO)">
            <summary>
            
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.AddFilesToDossier(System.Collections.Generic.List{Digita.Tustena.Interfaces.BusinessObjects.IStorageBO},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="files"></param>
            <param name="title"></param>
            <param name="description"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.MoveFileToDossier(System.Int64,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="fileId"></param>
            <param name="dossierId"></param>
            <param name="newDossierId"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.MoveFileToDossier(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="fileId"></param>
            <param name="newDossierId"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.GetDossierFile(Digita.Tustena.Interfaces.BusinessObjects.IFileDossierSlot)">
            <summary>
            
            </summary>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.GetDossierFile(System.Int64)">
            <summary>
            
            </summary>
            <param name="dossierId"></param>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.RemoveFileFromDossier(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="fileId"></param>
            <param name="dossierId"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.RemoveFileSlots(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="slotIds"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.RemoveFileSlots(System.Collections.Generic.List{System.Int64})">
            <summary>
            
            </summary>
            <param name="slotIds"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.ReserveFileSlot(System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dossierId"></param>
            <param name="title"></param>
            <param name="description"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.GetFilesAsByteList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.GetFilesAsByteArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.DeleteDossier(System.Int64)">
            <summary>
            Rimuove la pratica e tutti i relativi file
            </summary>
            <param name="dossierId">Id della pratica</param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.DeleteDossiers(System.Int64[])">
            <summary>
            
            </summary>
            <param name="dossierIds"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.DeleteDossiers(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="dossierIds"></param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.DeleteDossier">
            <summary>
            Rmuove la pratica corrente e tutti i suoi documenti
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.FileDossierBO.SaveFileDossierSlots">
            <summary>
            Salva su db i dati relativi agli slot dei documenti della pratica
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ERPBaseBO.IsCommercialYear(Digita.Tustena.Core.UserConfig)">
            <summary>
              Gets if Commercial Year is in use.
            </summary>
            <value>False</value>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ERPBaseBO.InvoiceFixedMonth(Digita.Tustena.Core.UserConfig,System.Int32)">
            <summary>
              Gets if the invoice is on fixed month.
            </summary>
            <value>0</value>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.LeadBO.ConvertLead(Digita.Tustena.Core.Enums.LeadConversionType,System.Int64)">
            <summary>
            
            </summary>
            <param name="lct">The type of cross</param>
            <param name="companyIdToLink"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.OpportunityBO.AddAnagraphicToNewCampaignList">
            <summary>
            Aggiunge l'anagrafica corrente (CrossId/CrossType) ad una nuova lista nella campagna selezionata
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.BusinessObjects.OrderBO">
            <summary>
            
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.OrderBO.CustomerChanged">
            <summary>
            Customer has changed 
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.CatalogProductPriceBO.GetPriceList(System.Int64,System.Int64,System.Decimal,System.Int64)">
            <summary>
            Return the final price for the product, company, listId, quantity specified
            </summary>
            <param name="listID"></param>
            <param name="productId"></param>
            <param name="qta"></param>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.QuoteBO.CustomerChanged">
            <summary>
            Customer has changed 
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.RollingStockBO.GetWarrantyExpireString(System.Int32)">
            <summary>
            this take from the businessObject the WarrantyType
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.RollingStockBO.GetWarrantyExpireString(System.Int32,Digita.Tustena.Core.Enums.WarrantyTypology)">
            <summary>
            If you want to calculate the expire from an custom type date
            </summary>
            <param name="val"></param>
            <param name="wt"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.SalesPerformanceTargetBO.CreateOpportunitySqlCteQuery(Digita.Tustena.Database.DbSqlParameterCollection)">
            <summary>
            Sales performance use OpportunityLog to determine opportunity ownership and change datetime.
            </summary>
            <param name="param">The DbSqlParameterCollection collection</param>
            <returns>The query string</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.SlaTemplateBO.CalculateMinuteInterval(System.DateTime,System.DateTime)">
            <summary>
            return minutes interval
            </summary>
            <param name="startDate">UTC Start Date</param>
            <param name="endDate">UTC End Date</param>
        </member>
        <member name="F:Digita.Tustena.Base.BusinessObjects.StorageBO._log">
            <summary>
            Reference to the logger
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.StorageBO.FileToSaveByteArray">
            <summary>
            Da usare nel web Service
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.StorageBO.FileExistsByName(System.String)">
            <summary>
            Check if file exists by name
            </summary>
            <param name="fileName">The Filename to check</param>
            <returns>The ID if exists, else null</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.StorageBO.GetHash(System.IO.Stream)">
            <summary>
            Gets the hash for the specified stream.
            </summary>
            <param name="stream">Stream.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.StorageBO.GetHashBytes(System.IO.Stream)">
            <summary>
            Compute the MD5 hash for the specified stream.
            </summary>
            <param name="stream">stream to MD5</param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.StorageBO.BuildRepeaterQueryFromIds(Digita.Tustena.Core.UserConfig,Digita.Tustena.Database.DbSqlParameterCollection,System.String[])">
            <summary>
            Get the list of DataStorage where id IN (params[])
            </summary>
            <param name="??"></param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.SurveyBO.LocalizeType">
            <summary>
            Gets the default LocalizeType (LocalizeType.SurveyTitle) for this BO
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.SurveyBO.LocalizedTitle">
            <summary>
            Gets the localized title according to the current UC language
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.SurveyBO.LocalizedWelcomeMessage">
            <summary>
            Gets the localized welcome message according to the current UC language
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.SurveyBO.LocalizedThanksMessage">
            <summary>
            Gets the localized thanks message according to the current UC language
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.SurveyBO.Localize">
            <summary>
            Gets the localized default property (Title) according to the current UC language
            </summary>
            <param name="lang">The language code</param>
            <returns>The localized welcome message according to the given language</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.SurveyBO.LocalizeForLanguage(System.String)">
            <summary>
            Gets the localized default property (Title) according to the given language
            </summary>
            <param name="lang">The language code</param>
            <returns>The localized default property (Title) according to the given language</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.SurveyBO.GetLocalizedWelcomeMessageForLanguage(System.String)">
            <summary>
            Gets the localized welcome message according to the given language
            </summary>
            <param name="lang">The language code</param>
            <returns>The localized welcome message according to the given language</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.SurveyBO.GetLocalizedThanksMessageForLanguage(System.String)">
            <summary>
            Gets the localized thanks message according to the given language
            </summary>
            <param name="lang">The language code</param>
            <returns>The localized thanks message according to the given language</returns>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.SurveyBO.SurveyCondition.QuestionId">
            <summary>
            Check if this question is visible for the nexy condition
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.TicketBO.Latitude">
            <summary>
            Gets or sets the Latitude of a TicketAction
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.BusinessObjects.TicketBO.Longitude">
            <summary>
            Gets or sets the Longitude of a TicketAction
            </summary>
            
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.TicketBO.Exists(System.String)">
            <summary>
            check if a ticket with the provided id exists
            </summary>
            <param name="ticketId"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.WorkRangeBO.CalculateEndDate(System.DateTime,System.Int64)">
            <summary>
            Calculate a TimeSpan starting with a Date adding duration minutes
            using WorkRange slot configurations.
            </summary>
            <param name="fromDate">date from (in utc)</param>
            <param name="duration">duration in minutes</param>
            <returns>date time result in utc</returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.WorkRangeBO.CalculateMinuteInterval(System.DateTime,System.DateTime)">
            <summary>
            return minutes interval
            </summary>
            <param name="startDate">UTC Start Date</param>
            <param name="endDate">UTC End Date</param>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ZoneBO.LoadChilds(System.Int64)">
            <summary>
            /// Load parent zones ids list
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.BusinessObjects.ZoneBO.LoadChilds(System.Int64,System.Int32)">
            <summary>
            Load parent zones ids list
            </summary>
            <param name="parent"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Messaging.Services.RemoteMassMailingSendingContext.IncludeTraceImg(System.String)">
            <summary>
            
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Messaging.Services.BaseMassMailingSendingContext.SwitchThreadCulture(System.String,System.Action)">
            <summary>
            Switches the thread culture for LanguageResources to load Signature with correct profile language culture
            </summary>
            <param name="nation">The nation.</param>
            <param name="del">The delete.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Messaging.Services.UtilityEMailService.IncludeCss(System.String,System.String)">
            <summary>
            add css to the mail body
            </summary>
            <param name="body">the body</param>
            <param name="cssUrl">the email path</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Messaging.Services.UtilityEMailService.IncludeTraceImg(System.String,System.String)">
            <summary>
            Add trace bug for mail open statistics
            </summary>
            <param name="body">Email Body</param>
            <param name="url">base url</param>
            <param name="page">urlpath1</param>
            <param name="pathInfo">urlpath1</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Messaging.Services.LocalEMailService">
            <summary>
            MessagesHandler Descrpition Summary .
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Messaging.TustenaMessage.Send(Digita.Tustena.Core.UserConfig)">
            <summary>
            Sends an internal message.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Messaging.TustenaMessage.NotifyNewMessage(System.Int32,System.String,System.Int64)">
            <summary>
            Notify the new message from CometHandler to the uid
            </summary>
            <param name="uid">The UID.</param>
            <param name="subject">The subject of the message.</param>
            <param name="msgId">The Msg Id.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Search.Prompters.BasePrompterService`2.PrepareConditionUsingAnd(System.String,System.String)">
            <summary>
            prepare sql condition with  AND
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Base.Tasking.DiagnosticMessageWorkingTask.WatchDogTriggerTime">
            <summary>
            The maximum time elapsed after the <see cref="P:Digita.Tustena.Base.Tasking.Contracts.IWorkingTaskStatus.LastStatusUpdateOnUtc">LastStatusUpdateOnUtc</see>.
            It's used with <see cref="P:Digita.Tustena.Base.Tasking.Contracts.IWorkingTaskStatus.LastStatusUpdateOnUtc">LastStatusUpdateOnUtc</see> to calculate the value of
            <see cref="P:Digita.Tustena.Base.Tasking.Contracts.IWorkingTaskStatus.ConsideredStaleAfterUtc">ConsideredStaleAfterUtc</see> and determine if
            the task is considered "stale" (<see cref="P:Digita.Tustena.Base.Tasking.Contracts.IWorkingTaskStatus.IsStale">IsStale</see>) and should be killed by the watchdog
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Tasking.PluginsLogMaintenanceWorkingTask.WatchDogTriggerTime">
            <summary>
            The maximum time elapsed after the <see cref="P:Digita.Tustena.Base.Tasking.Contracts.IWorkingTaskStatus.LastStatusUpdateOnUtc">LastStatusUpdateOnUtc</see>.
            It's used with <see cref="P:Digita.Tustena.Base.Tasking.Contracts.IWorkingTaskStatus.LastStatusUpdateOnUtc">LastStatusUpdateOnUtc</see> to calculate the value of
            <see cref="P:Digita.Tustena.Base.Tasking.Contracts.IWorkingTaskStatus.ConsideredStaleAfterUtc">ConsideredStaleAfterUtc</see> and determine if
            the task is considered "stale" (<see cref="P:Digita.Tustena.Base.Tasking.Contracts.IWorkingTaskStatus.IsStale">IsStale</see>) and should be killed by the watchdog
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Tasking.EventSchedulerWorkingTask.InitSchedule(Digita.Tustena.Base.Threading.Scheduler.ScheduleType,System.DateTime,System.String,System.Int32)">
            <summary>
            Initialize a new scheduled event
            </summary>
            <param name="scheduleType">es: ScheduleType.ProcessExtension</param>
            <param name="dateTime">Next run UTC</param>
            <param name="name">The name of the scheduler event passed as Action in the InvokeEvent </param>
            <param name="minutesInterval">Reschedule after x minutes. 0 for single event</param>
        </member>
        <member name="M:Digita.Tustena.Base.Tasking.EventSchedulerWorkingTask.CleanUpExpiredSchedule">
            <summary>
            Clear the expired event older than 10 minutes
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Tasking.EventSchedulerWorkingTask.RemoveSchedule(Digita.Tustena.Base.Threading.Scheduler.ScheduleType,System.String)">
            <summary>
            Remove a planned scheduler. 
            </summary>
            <param name="scheduleType"></param>
            <param name="name">Name is mandatory</param>
        </member>
        <member name="M:Digita.Tustena.Base.Tasking.EventSchedulerWorkingTask.UpdateSchedule(Digita.Tustena.Base.Threading.Scheduler.ScheduleType,System.String)">
            <summary>
            Schedule the event again after processing
            </summary>
            <param name="st"></param>
            <param name="name"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Tasking.NotifierErrorWorkingTask.CleanFolderWithErrors">
            <summary>
            When the setting "StoreErrors" delete the folder DataStoragePath\Errors\Notified
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Tasking.RecurrenceSchedulerWorkingTask.GetRecurrenceSchedule">
            <summary>
            Recupera la lista degli eventi schedulati
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Tasking.SimpleImportEngineWorkingTask.CheckRollingStockProductExists(Digita.Tasking.TaskReport,Digita.Tustena.Core.UserConfig,System.String,System.String)">
            <summary>
            Controlla se su DB esiste già un prodotto con codice uguale a productCode.
            Se si, ritorna l'id di quel prodotto, altrimenti ne aggiunge uno di nuovo
            con codice prodotto il productCode passato(e rimanenti valori predefiniti)
            e ritorna l'id di questo nuovo prodotto dopo la scrittura su db
            </summary>
            <param name="context"></param>
            <param name="importUC"></param>
            <param name="productCode">Il codice prodotto per cui verificarne l'esistenza</param>
            <param name="supplierName"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Tasking.SimpleImportEngineWorkingTask.LoadBoIfExists(Digita.Tasking.TaskReport,Digita.Tustena.Interfaces.ICrmBusinessObjects@,Digita.Tustena.Base.Import.ImportItem)">
            <summary>
            Cerca di carica il bo passato come parametro in base ai dati da importare
            </summary>
            <param name="context"></param>
            <param name="bo"></param>
            <param name="item"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Tasking.SimpleImportEngineWorkingTask.GetAnagraphicCustomerId(System.String,System.Int32)">
            <summary>
            Ritorna l'id del tier dato un company code o company name
            </summary>
            <param name="value"></param>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Tasking.SimpleImportEngineWorkingTask.GetPropertyValue(Digita.Tasking.TaskReport,Digita.Tustena.Interfaces.ICrmBusinessObjects,Digita.Tustena.Base.Import.ImportItem.Property,System.Reflection.PropertyInfo,Digita.Tustena.Core.UserConfig,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Converte il valore di un campo, salvato come stringa negli attributi del file .xml temporaneo, nel tipo di dato corretto.
            Il tipo di dato viene ricavato dalla PropertyInfo del BO che si sta valorizzando.
            </summary>
            <param name="bo"></param>
            <param name="property">Oggetto contenente informazioni sull'attributo (nome, valore, tipo etc)</param>
            <param name="propInfo">La proprietà del BO da valorizzare</param>
            <param name="uc"></param>
            <param name="fileImport"></param>
            <param name="listValues_Code_desc"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Tasking.SimpleImportEngineWorkingTask.GetMultiselectTreeItemValue(Digita.Tasking.TaskReport,Digita.Tustena.Base.Import.ImportItem.Property,System.Int32,System.Int64,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Cerca il valore corretto da assegnare ad un freefield di tipo MultiSelect Tree
            </summary>
            <param name="context"></param>
            <param name="property"></param>
            <param name="customerId"></param>
            <param name="tustenaId"></param>
            <param name="fileImport"></param>
            <param name="listValues_Code_desc"></param>
            <returns>Valore da assegnar a Value del freefield corrispondente</returns>
        </member>
        <member name="M:Digita.Tustena.Base.TeamSystemID3.Tsid3FacadeService.HandleAuthCallback(Digita.Tustena.TeamSystemID3.Models.Signin.AuthCallBackResponse,System.Web.Http.ApiController,System.Threading.CancellationToken)">
            <summary>
            Callback invoked by the TSID v3 service after the login process at TSID-side
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.TeamSystemID3.Tsid3UserMappingService.DeleteRedundantMappings(Digita.Tustena.Core.UserConfig,System.String)">
            <summary>
            Delete all redundant mappings in the database
            </summary>
            <param name="uc"></param>
            <param name="tsid3SubjectIdentifier"></param>
            <returns>TRUE if exactly 1 mapping exists in the database. FALSE if no mappings exists in the database</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelperService.GetFreeLightAccount(Digita.Tustena.Core.UserConfig)">
            <summary>
            Get Avaliable Licence count for Light
            </summary>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelperService.GetFreeAccount(Digita.Tustena.Core.UserConfig)">
            <summary>
            Get Avaliable Licence Account count
            </summary>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelperService.GetAreaManagerSubAccount(Digita.Tustena.Core.UserConfig,System.Boolean)">
            <summary>
            Get all childs account of the UC
            </summary>
            <param name="uc"></param>
            <param name="showOnlyActive">Default=false</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelperService.GetAreaManagerSubAccount(Digita.Tustena.Core.UserConfig,System.Int32,System.Boolean)">
            <summary>
            Get all childs account of the user id
            </summary>
            <param name="uc"></param>
            <param name="userId"></param>
            <param name="showOnlyActive">Default=false</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelperService.GetAreaManagerParentAccount(Digita.Tustena.Core.UserConfig)">
            <summary>
            Get all manager tree of the UC 
            </summary>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelperService.GetAreaManagerParentAccount(Digita.Tustena.Core.UserConfig,System.Int32)">
            <summary>
            Get all manager tree of the userId
            </summary>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelperService.GetGroupOfAccount(System.Int32)">
            <summary>
            Get the groupId of the uid
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.IPropertiesCopier.CopyProperties(System.Type,System.Object,System.Type,System.Object,Digita.Tustena.Core.UserConfig,Digita.Tustena.Interfaces.IDataShapingProvider)">
            <summary>
            Copies the properties.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="sourceValue">The source value.</param>
            <param name="destinationType">Type of the destination.</param>
            <param name="destinationValue">The destination value.</param>
            <param name="userConfig">The user config.</param>
            <param name="dataShapingProvider">The data shaping provider.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.PropertiesCopier.CopyProperties(System.Type,System.Object,System.Type,System.Object,Digita.Tustena.Core.UserConfig,Digita.Tustena.Interfaces.IDataShapingProvider)">
            <summary>
            Copies the properties.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Digita.Tustena.Base.Utility.AsyncHelpers.RunSync(System.Func{System.Threading.Tasks.Task})" -->
        <!-- Badly formed XML comment ignored for member "M:Digita.Tustena.Base.Utility.AsyncHelpers.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})" -->
        <member name="T:Digita.Tustena.Base.Utility.ClassCheckVatServiceIT">
            <summary>
            Check VatCode with Italian rules
            Cloned from GammaEv. Validation Rules
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.FreeFieldsManager.Load(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Load the freefield item
            </summary>
            <param name="entityId"></param>
            <param name="bot"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.FreeFieldsManager.Save(System.Collections.Generic.List{Digita.Tustena.Interfaces.BusinessObjects.IFreeFieldsItem},System.Int64)">
            <summary>
            Sale the freefield
            </summary>
            <param name="items"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.FreeFieldsManager.Exists(Digita.Tustena.Core.Enums.BusinessObjectType,System.String,System.String)">
            <summary>
            Check i a freefield exists
            </summary>
            <param name="bot"></param>
            <param name="code">The code or null</param>
            <param name="name">The name or null</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.FreeFieldsManager.SearchByCode(Digita.Tustena.Core.Enums.BusinessObjectType,System.String,System.String)">
            <summary>
            Search the freefield by code and search key
            </summary>
            <param name="bot"></param>
            <param name="code"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.FreeFieldsManager.SearchByName(Digita.Tustena.Core.Enums.BusinessObjectType,System.String,System.String)">
            <summary>
            Search the freefield by name and search key
            </summary>
            <param name="bot"></param>
            <param name="name"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.FreeFieldsManager.Search(System.Int64,System.String)">
            Search the freefield by code and search key
        </member>
        <member name="M:Digita.Tustena.Base.Utility.FreeFieldsManager.idSearch(System.Int64,System.String)">
            <summary>
            Search the freefield by id and search key
            </summary>
            <param name="freeFieldId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.RegistryUtils">
            <summary>
              Registry keys helper
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.RegistryUtils.LocalCurrent">
            <summary>
              Enumerate the appliancy of an entry
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.RegistryUtils.StartupMode">
            <summary>
              Enumerate the avaiable startup modes for auto-startup entries
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.RegistryUtils.windowsCurrentVersionPath">
            <summary>
              Base path for windows registry tree nodes
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.RegistryUtils._log">
            <summary>
            Reference to the logger
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RegistryUtils.AddAssemblyEntry(Digita.Tustena.Base.Utility.RegistryUtils.LocalCurrent,System.Reflection.Assembly,System.String,System.String)">
            <summary>
              To Add new Entry
            </summary>
            <param name="a"> Assembly </param>
            <param name="localCurrent"> Entry appliancy </param>
            <param name="entryName"> Value to add </param>
            <param name="entryValue"> data to hold in value </param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RegistryUtils.AddEntry(Digita.Tustena.Base.Utility.RegistryUtils.LocalCurrent,System.String,System.String,System.String)">
            <summary>
              To Add new Entry
            </summary>
            <param name="localCurrent">Entry appliancy</param>
            <param name="keySubPath">Defines the sub path od the entry</param>
            <param name="entryName">Value to add</param>
            <param name="entryValue">data to hold in value</param>
            <exception cref="T:System.ArgumentException">Unsupported root: + localCurrent.ToString()</exception>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RegistryUtils.GetFormattedRegistryDate(System.DateTime)">
            <summary>
              Gets the formatted registry date.
            </summary>
            <param name="dt">The dt.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RegistryUtils.AddCurrentUserEntry(System.String,System.String,System.Object)">
            <summary>
              Adds the current user entry.
            </summary>
            <param name="keySubPath">The key sub path.</param>
            <param name="entryName">Name of the entry.</param>
            <param name="entryValue">The entry value.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RegistryUtils.AddLocalMachineEntry(System.String,System.String,System.Object)">
            <summary>
              Adds the local machine entry.
            </summary>
            <param name="keySubPath">The key sub path.</param>
            <param name="entryName">Name of the entry.</param>
            <param name="entryValue">The entry value.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RegistryUtils.RemoveEntry(Digita.Tustena.Base.Utility.RegistryUtils.LocalCurrent,System.String,System.String)">
            <summary>
              To Remove new Entry
            </summary>
            <param name="keySubPath"> Defines the sub path od the entry </param>
            <param name="localCurrent"> Entry appliancy </param>
            <param name="entryName"> Value to Remove </param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RegistryUtils.GetEntryValue(Digita.Tustena.Base.Utility.RegistryUtils.LocalCurrent,System.String,System.String)">
            <summary>
              To Get new Entry
            </summary>
            <param name="keySubPath"> Defines the sub path od the entry </param>
            <param name="localCurrent"> Entry appliancy </param>
            <param name="entryName"> Value to Get </param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RegistryUtils.GetCurrentUserEntryValue(System.String,System.String)">
            <summary>
              Gets the current user entry value.
            </summary>
            <param name="keySubPath">The key sub path.</param>
            <param name="entryName">Name of the entry.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RegistryUtils.GetCurrentUserEntryValue(System.String,System.String,System.Boolean,System.Object)">
            <summary>
              Gets the current user entry value.
            </summary>
            <param name="keySubPath">The key sub path.</param>
            <param name="entryName">Name of the entry.</param>
            <param name="createIfNotExists">
              if set to <c>true</c> [create if not exists].
            </param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RegistryUtils.GetCurrentUserEntryValue(System.String,System.String,System.Boolean,System.String)">
            <summary>
              Gets the current user entry value.
            </summary>
            <param name="keySubPath">The key sub path.</param>
            <param name="entryName">Name of the entry.</param>
            <param name="createIfNotExists">
              if set to <c>true</c> [create if not exists].
            </param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RegistryUtils.GetCurrentUserEntryValue(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
              Gets the current user entry value.
            </summary>
            <param name="keySubPath">The key sub path.</param>
            <param name="entryName">Name of the entry.</param>
            <param name="createIfNotExists">
              if set to <c>true</c> [create if not exists].
            </param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.ShortGuid">
            <summary>
            Represents a globally unique identifier (GUID) with a
            shorter string value. Sguid
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.ShortGuid.Empty">
            <summary>
            A read-only instance of the ShortGuid class whose value
            is guaranteed to be all zeroes.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.#ctor(System.String)">
            <summary>
            Creates a ShortGuid from a base64 encoded string
            </summary>
            <param name="value">The encoded guid as a
            base64 string</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.#ctor(System.Guid)">
            <summary>
            Creates a ShortGuid from a Guid
            </summary>
            <param name="guid">The Guid to encode</param>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.ShortGuid.Guid">
            <summary>
            Gets/sets the underlying Guid
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.ShortGuid.Value">
            <summary>
            Gets/sets the underlying base64 encoded string
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.ToString">
            <summary>
            Returns the base64 encoded guid as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a
            specified Object represent the same type and value.
            </summary>
            <param name="obj">The object to compare</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.GetHashCode">
            <summary>
            Returns the HashCode for underlying Guid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.NewGuid">
            <summary>
            Initialises a new instance of the ShortGuid class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.Encode(System.String)">
            <summary>
            Creates a new instance of a Guid using the string value,
            then returns the base64 encoded version of the Guid.
            </summary>
            <param name="value">An actual Guid string (i.e. not a ShortGuid)</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.Encode(System.Guid)">
            <summary>
            Encodes the given Guid as a base64 string that is 22
            characters long.
            </summary>
            <param name="guid">The Guid to encode</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.Decode(System.String)">
            <summary>
            Decodes the given base64 string
            </summary>
            <param name="value">The base64 encoded string of a Guid</param>
            <returns>A new Guid</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.op_Equality(Digita.Tustena.Base.Utility.ShortGuid,Digita.Tustena.Base.Utility.ShortGuid)">
            <summary>
            Determines if both ShortGuids have the same underlying
            Guid value.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.op_Inequality(Digita.Tustena.Base.Utility.ShortGuid,Digita.Tustena.Base.Utility.ShortGuid)">
            <summary>
            Determines if both ShortGuids do not have the
            same underlying Guid value.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.op_Implicit(Digita.Tustena.Base.Utility.ShortGuid)~System.String">
            <summary>
            Implicitly converts the ShortGuid to it's string equivilent
            </summary>
            <param name="shortGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.op_Implicit(Digita.Tustena.Base.Utility.ShortGuid)~System.Guid">
            <summary>
            Implicitly converts the ShortGuid to it's Guid equivilent
            </summary>
            <param name="shortGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.op_Implicit(System.String)~Digita.Tustena.Base.Utility.ShortGuid">
            <summary>
            Implicitly converts the string to a ShortGuid
            </summary>
            <param name="shortGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ShortGuid.op_Implicit(System.Guid)~Digita.Tustena.Base.Utility.ShortGuid">
            <summary>
            Implicitly converts the Guid to a ShortGuid
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.DescriptiveResult">
            <summary>
            The result class the holds the analysis results
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.DescriptiveResult.#ctor">
            <summary>
            DescriptiveResult default constructor
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.Sum">
            <summary>
            Sum
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.Mean">
            <summary>
            Arithmatic mean
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.GeometricMean">
            <summary>
            Geometric mean
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.HarmonicMean">
            <summary>
            Harmonic mean
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.Range">
            <summary>
            The range of the values
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.Variance">
            <summary>
            Sample variance
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.StdDev">
            <summary>
            Sample standard deviation
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.Skewness">
            <summary>
            Skewness of the data distribution
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.Kurtosis">
            <summary>
            Kurtosis of the data distribution
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.IQR">
            <summary>
            Interquartile range
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.Median">
            <summary>
            Median, or second quartile, or at 50 percentile
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.FirstQuartile">
            <summary>
            First quartile, at 25 percentile
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.ThirdQuartile">
            <summary>
            Third quartile, at 75 percentile
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.SumOfError">
            <summary>
            Sum of Error
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.DescriptiveResult.SumOfErrorSquare">
            <summary>
            The sum of the squares of errors
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.DescriptiveResult.Percentile(System.Double)">
            <summary>
            Normalize
            </summary>
            <param name="percent">Pecentile, between 0 to 100</param>
            <returns>Normalize</returns>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.Descriptive">
            <summary>
            Descriptive class
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.Descriptive.Result">
            <summary>
            Descriptive results
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Descriptive.#ctor">
            <summary>
            Descriptive analysis default constructor
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Descriptive.#ctor(System.Double[])">
            <summary>
            Descriptive analysis constructor
            </summary>
            <param name="dataVariable">Data array</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Descriptive.Analyze">
            <summary>
            Run the analysis to obtain descriptive information of the data
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Descriptive.percentile(System.Double[],System.Double)">
            <summary>
            Calculate percentile of a sorted data set
            </summary>
            <param name="sortedData"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.WebUtils">
            <summary>
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.WebUtils._log">
            <summary>
              Reference to the logger
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.WebUtils.GetHttpHeaders(System.Uri,System.String,System.Boolean,System.String,System.String,System.Int32,System.Net.IWebProxy,System.String,System.String)">
            <summary>
              Gets the HTTP headers.
            </summary>
            <param name="uri">The URI.</param>
            <param name="enableAuthentication">if set to <c>true</c> [enable authentication].</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="timeoutMilliseconds">The timeout milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.WebUtils.IsPortAvailable(System.Int32)">
            <summary>
              Determines whether [is port available] [the specified port].
            </summary>
            <param name="port">The port.</param>
            <returns>
              <c>true</c> if [is port available] [the specified port]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.WebUtils.OpenBrowser(System.String)">
            <summary>
              Opens the browser.
            </summary>
            <param name="urlstr">The urlstr.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.WebUtils.UriExists(System.String,System.Boolean,System.Int32)">
            <summary>
              Check if the given URI exists
            </summary>
            <param name="uri">The URI.</param>
            <param name="requestHead">
              if set to <c>true</c> [request head].
            </param>
            <param name="timeoutMilliseconds">The timeout milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.WebUtils.IsAbsoluteUri(System.String)">
            <summary>
              Determines whether [is absolute URI] [the specified URL].
            </summary>
            <param name="url"> The URL. </param>
            <returns>
              <c>true</c> if [is absolute URI] [the specified URL]; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.WebUtils.JsonPost(System.String,System.String,System.Net.HttpStatusCode@,System.String@,System.String,System.String)">
            <summary>
            Post a JSON request to a specified URL, with or without authentication
            </summary>
            <param name="url">the url</param>
            <param name="json">the json string</param>
            <param name="statusCode">return code</param>
            <param name="response">server response</param>
            <param name="username">optional username for basic authentication</param>
            <param name="password">optional password</param>
            <returns><c>true</c> if completed successfully otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelper.GetFreeLightAccount(Digita.Tustena.Core.UserConfig)">
            <summary>
            Get Avaliable Licence count for Light
            </summary>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelper.GetFreeAccount(Digita.Tustena.Core.UserConfig)">
            <summary>
            Get Avaliable Licence Account count
            </summary>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelper.GetAreaManagerSubAccount(Digita.Tustena.Core.UserConfig,System.Boolean)">
            <summary>
            Get all childs account of the UC
            </summary>
            <param name="uc"></param>
            <param name="showOnlyActive">Default=false</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelper.GetAreaManagerSubAccount(Digita.Tustena.Core.UserConfig,System.Int32,System.Boolean)">
            <summary>
            Get all childs account of the user id
            </summary>
            <param name="uc"></param>
            <param name="userId"></param>
            <param name="showOnlyActive">Default=false</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelper.GetAreaManagerParentAccount(Digita.Tustena.Core.UserConfig)">
            <summary>
            Get all manager tree of the UC 
            </summary>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelper.GetAreaManagerParentAccount(Digita.Tustena.Core.UserConfig,System.Int32)">
            <summary>
            Get all manager tree of the userId
            </summary>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AccountHelper.GetGroupOfAccount(System.Int32)">
            <summary>
            Get the groupId of the uid
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AsyncRefreshCache`2.Invalidate">
            <summary>
            Invalidate cache
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.DataTransformationProvider.TransformValue(System.Type,System.Object,System.Type,Digita.Tustena.Core.UserConfig,Digita.Tustena.Interfaces.IDataShapingProvider)">
            <summary>
            Transforms the given value to the appropriate value of the desired type
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="sourceValue">The source value.</param>
            <param name="destinationType">Type of the destination.</param>
            <param name="userConfig">The user config.</param>
            <param name="dataShapingProvider">The data shaping provider.</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.FastDataTable">
            <summary>
            DataTable fast serializer
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.FastDataTable.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Digita.Tustena.Base.Utility.FastDataTable"/> class.
            </summary>
            <param name="dt">The dt.</param>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.FastDataTable.DataTable">
            <summary>
            Gets or sets the data table.
            </summary>
            <value>The data table.</value>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.FastDataTable.HardDiskGuid">
            <summary>
            Gets or sets the hard disk GUID.
            </summary>
            <value>The hard disk GUID.</value>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.FastDataTable.UseDBPaging">
            <summary>
            Gets or sets a value indicating whether [use DB paging].
            </summary>
            <value><c>true</c> if [use DB paging]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.FastDataTable.QueryTime">
            <summary>
            Gets or sets the query time.
            </summary>
            <value>The query time.</value>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.FastDataTable.SqlDataSource">
            <summary>
            Gets or sets the SQL data source.
            </summary>
            <value>The SQL data source.</value>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.FastSerialize.Serialize(System.String,System.Data.DataTable)">
            <summary>
            Serializes the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="dt">The dt.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.FastSerialize.Deserialize(System.String)">
            <summary>
            Deserializes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.ExchangeRate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ExchangeRate.Init">
            <summary>
            Initializes this instance.
            </summary>
            <returns>ExchangeRate.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.ExchangeRate.GetCurrent">
            <summary>
            Gets the Currency Exchange rate for today.
            </summary>
            <returns>DataTable.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AppDataPersistenceCache.Get(System.String,System.String)">
            <summary>
            Retrieve the object with the specific name and group
            </summary>
            <param name="name"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AppDataPersistenceCache.GetItem(System.String,System.String)">
            <summary>
            Retrieve the item (with the cache structure) with the specific name and group
            </summary>
            <param name="name"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AppDataPersistenceCache.Add(System.String,System.Object,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Add the item with the specific name and group
            </summary>
            <param name="name"></param>
            <param name="item"></param>
            <param name="path">The folder where the original file is stored</param>
            <param name="group">The belonging group</param>
            <param name="userId"></param>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AppDataPersistenceCache.Remove(System.String,System.String)">
            <summary>
            Remove the items by name and group
            </summary>
            <param name="name"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AppDataPersistenceCache.Count">
            <summary>
            Count the items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AppDataPersistenceCache.ToArray">
            <summary>
            Get The cache array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AppDataPersistenceCache.Count(System.String)">
            <summary>
            Count the items by group
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AppDataPersistenceCache.Expire(System.DateTime)">
            <summary>
            Force items expiration by date
            </summary>
            <param name="fromDateTime"></param>
            <returns>Items removed count</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AppDataPersistenceCache.ExpireByRelativeAppDataPath(System.String,System.String)">
            <summary>
            Expire the object by the full path
            </summary>
            <param name="relativeAppDataPath"></param>
            <param name="group"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AppDataPersistenceCache.ExpireByGroup(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Expire the object by the full path
            </summary>
            <param name="group"></param>
            <param name="userId"></param>
            <param name="customerId"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.AppDataPersistenceCache.Clear">
            <summary>
            Clear the whole cache
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.MarkdownOptions">
            <summary>
            Options for configuring MarkdownSharp.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.MarkdownOptions.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.MarkdownOptions.AutoNewlines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.MarkdownOptions.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.MarkdownOptions.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.MarkdownOptions.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.MarkdownOptions.AsteriskIntraWordEmphasis">
            <summary>
            when true, asterisks may be used for intraword emphasis
            this does nothing if StrictBoldItalic is false
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.Markdown">
            <summary>
            Markdown is a text-to-HTML conversion tool for web writers. 
            Markdown allows you to write using an easy-to-read, easy-to-write plain text format, 
            then convert it to structurally valid XHTML (or HTML).
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.#ctor">
            <summary>
            Create a new Markdown instance using default options
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.#ctor(Digita.Tustena.Base.Utility.MarkdownOptions)">
            <summary>
            Create a new Markdown instance and set the options from the MarkdownOptions object.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.Markdown.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.Markdown.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.Markdown.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.Markdown.AsteriskIntraWordEmphasis">
            <summary>
            when true, asterisks may be used for intraword emphasis
            this does nothing if StrictBoldItalic is false
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.Markdown.AutoNewLines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.Markdown.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.Markdown._nestDepth">
            <summary>
            maximum nested depth of [] and () supported by the transform; implementation detail
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Utility.Markdown._tabWidth">
            <summary>
            Tabs are automatically converted to spaces as part of the transform  
            this constant determines how "wide" those tabs become in spaces  
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.#cctor">
            <summary>
            In the static constuctor we'll initialize what stays the same across all transforms.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.Markdown.Version">
            <summary>
            current version of MarkdownSharp;  
            see http://code.google.com/p/markdownsharp/ for the latest code or to contribute
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.Transform(System.String)">
            <summary>
            Transforms the provided Markdown-formatted text to HTML;  
            see http://en.wikipedia.org/wiki/Markdown
            </summary>
            <remarks>
            The order in which other subs are called here is
            essential. Link and image substitutions need to happen before
            EscapeSpecialChars(), so that any *'s or _'s in the a
            and img tags get encoded.
            </remarks>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.RunBlockGamut(System.String,System.Boolean,System.Boolean)">
            <summary>
            Perform transformations that form block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.RunSpanGamut(System.String)">
            <summary>
            Perform transformations that occur *within* block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.FormParagraphs(System.String,System.Boolean,System.Boolean)">
            <summary>
            splits on two or more newlines, to form "paragraphs";    
            each paragraph is then unhashed (if it is a hash and unhashing isn't turned off) or wrapped in HTML p tag
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.GetNestedBracketsPattern">
            <summary>
            Reusable pattern to match balanced [brackets]. See Friedl's 
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.GetNestedParensPattern">
            <summary>
            Reusable pattern to match balanced (parens). See Friedl's 
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.StripLinkDefinitions(System.String)">
            <summary>
            Strips link definitions from text, stores the URLs and titles in hash references.
            </summary>
            <remarks>
            ^[id]: url "optional title"
            </remarks>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.GetBlockPattern">
            <summary>
            derived pretty much verbatim from PHP Markdown
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.HashHTMLBlocks(System.String)">
            <summary>
            replaces any block-level HTML blocks with hash entries
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.TokenizeHTML(System.String)">
            <summary>
            returns an array of HTML tokens comprising the input string. Each token is 
            either a tag (possibly with nested, tags contained therein, such 
            as &lt;a href="&lt;MTFoo&gt;"&gt;, or a run of text between tags. Each element of the 
            array is a two-element array; the first is either 'tag' or 'text'; the second is 
            the actual value.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.DoAnchors(System.String)">
            <summary>
            Turn Markdown link shortcuts into HTML anchor tags
            </summary>
            <remarks>
            [link text](url "title") 
            [link text][id] 
            [id] 
            </remarks>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.DoImages(System.String)">
            <summary>
            Turn Markdown image shortcuts into HTML img tags. 
            </summary>
            <remarks>
            ![alt text][id]
            ![alt text](url "optional title")
            </remarks>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.DoHeaders(System.String)">
            <summary>
            Turn Markdown headers into HTML header tags
            </summary>
            <remarks>
            <para>
            Header 1  
            ========  
            </para>
            <para>
            Header 2  
            --------  
            </para>
            <para>
            # Header 1  
            ## Header 2  
            ## Header 2 with closing hashes ##  
            ...  
            ###### Header 6  
            </para>
            </remarks>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.DoHorizontalRules(System.String)">
            <summary>
            Turn Markdown horizontal rules into HTML hr tags
            </summary>
            <remarks>
            ***  
            * * *  
            ---
            - - -
            </remarks>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.DoLists(System.String)">
            <summary>
            Turn Markdown lists into HTML ul and ol and li tags
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.ProcessListItems(System.String,System.String)">
            <summary>
            Process the contents of a single ordered or unordered list, splitting it
            into individual list items.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.DoCodeBlocks(System.String)">
            <summary>
            /// Turn Markdown 4-space indented code into HTML pre code blocks
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.DoCodeSpans(System.String)">
            <summary>
            Turn Markdown `code spans` into HTML code tags
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.DoItalicsAndBold(System.String)">
            <summary>
            Turn Markdown *italics* and **bold** into HTML strong and em tags
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.DoHardBreaks(System.String)">
            <summary>
            Turn markdown line breaks (two space at end of line) into HTML break tags
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.DoBlockQuotes(System.String)">
            <summary>
            Turn Markdown > quoted blocks into HTML blockquote blocks
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.DoAutoLinks(System.String)">
            <summary>
            Turn angle-delimited URLs into HTML anchor tags
            </summary>
            <remarks>
            &lt;http://www.example.com&gt;
            </remarks>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.Outdent(System.String)">
            <summary>
            Remove one level of line-leading spaces
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.EncodeEmailAddress(System.String)">
            <summary>
            encodes email address randomly  
            roughly 10% raw, 45% hex, 45% dec 
            note that @ is always encoded and : never is
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.EncodeCode(System.String)">
            <summary>
            Encode/escape certain Markdown characters inside code blocks and spans where they are literals
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.EncodeAmpsAndAngles(System.String)">
            <summary>
            Encode any ampersands (that aren't part of an HTML entity) and left or right angle brackets
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.EscapeBackslashes(System.String)">
            <summary>
            Encodes any escaped characters such as \`, \*, \[ etc
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.Unescape(System.String)">
            <summary>
            swap back in all the special characters we've hidden
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.EscapeBoldItalic(System.String)">
            <summary>
            escapes Bold [ * ] and Italic [ _ ] characters
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.EscapeSpecialCharsWithinTagAttributes(System.String)">
            <summary>
            Within tags -- meaning between &lt; and &gt; -- encode [\ ` * _] so they 
            don't conflict with their use in Markdown for code, italics and strong. 
            We're replacing each such character with its corresponding hash 
            value; this is likely overkill, but it should prevent us from colliding 
            with the escape values by accident.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.Normalize(System.String)">
            <summary>
            convert all tabs to _tabWidth spaces; 
            standardizes line endings from DOS (CR LF) or Mac (CR) to UNIX (LF); 
            makes sure text ends with a couple of newlines; 
            removes any blank lines (only spaces) in the text
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Markdown.RepeatString(System.String,System.Int32)">
            <summary>
            this is to emulate what's evailable in PHP
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RandomPasswordGenerator.Generate">
            <summary>
            Generates a random password with the default length.
            </summary>
            <returns>Randomly generated password.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RandomPasswordGenerator.Generate(System.String)">
            <summary>
            Generates a random password with the default length.
            </summary>
            <returns>Randomly generated password.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RandomPasswordGenerator.Generate(System.Int32)">
            <summary>
            Generates a random password with the default length.
            </summary>
            <returns>Randomly generated password.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RandomPasswordGenerator.Generate(System.Int32,System.String)">
            <summary>
            Generates a random password.
            </summary>
            <returns>Randomly generated password.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RandomPasswordGenerator.GeneratePassword(System.Int32,System.String)">
            <summary>
            Generates the password.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.RandomPasswordGenerator.GetRandom">
            <summary>
            Gets a random object with a real random seed
            </summary>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.Evaluator">
            <summary>
            Runtime Evaluator
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Evaluator.EvaluateString(System.String)">
            <summary>
            Return a string
            ex: Evaluator.EvaluateToString("DateTime.Parse(\"10/12/2007\").AddMinutes(1)");
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.EvaluatorItem">
            <summary>
            Collection of evaluators
            ex:
            EvaluatorItem[] items = {new EvaluatorItem(typeof(int), "(30 + 4) * 2", "GetNumber")};
            Evaluator eval = new Evaluator(items);
            Console.WriteLine(eval.EvaluateInt("GetNumber"));
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.Mht">
            <summary>
            MSHTML builder
            </summary>
            
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Mht.#ctor(System.String)">
            <summary>
            Creates a new mht instance.
            </summary>
            <param name="s">Start path.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Mht.WriteStructure(System.String)">
            <summary>
            Write the structure of the HTML. 
            </summary>
            <param name="html">The HTML.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.Mht.ParseHtml(System.String,System.String[]@)">
            <summary>
            Parses the HTML string.
            </summary>
            <param name="bodyin">The bodyin.</param>
            <param name="cids">The cids.</param>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.PageUtils">
            <summary>
            PageUtils.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.PageUtils.SetInitialFocus(System.Web.UI.Control)">
            <summary>
            Set the InitialFocus to the given control. Only works when JavaScript is supported.
            </summary>
            <param name="control">Control to set the InitialFocus on.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.PageUtils.GetStatusNotModified">
            <summary>
            Get the status not modified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.PageUtils.GetStatusNotModified(System.DateTime)">
            <summary>
            Get the status not modified.
            </summary>
            <param name="latest">The last modification date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.PageUtils.GetPostBackControl(System.Web.UI.Page)">
            <summary>
            Get The button origin of postback
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.PageUtils.Urlize(System.String)">
            <summary>
            Convert a title string to an url readable and safe format
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.PageUtils.SetCORSHeaders(System.Web.HttpContext)">
            <summary>
            Create a CORS compliant Header
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.PageUtils.AddParameterToUrl(System.String,System.String,System.String)">
            <summary>
            Add a custom parameter to querystring checkign for url format.
            </summary>
            <param name="url"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.BlockingQueue">
            <summary>
            Same as Queue except Dequeue function blocks until there is an object to return.
            Note: This class does not need to be synchronized
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BlockingQueue.#ctor(System.Collections.ICollection)">
            <summary>
            Create new BlockingQueue.
            </summary>
            <param name="col">The System.Collections.ICollection to copy elements from</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BlockingQueue.#ctor(System.Int32,System.Single)">
            <summary>
            Create new BlockingQueue.
            </summary>
            <param name="capacity">The initial number of elements that the queue can contain</param>
            <param name="growFactor">The factor by which the capacity of the queue is expanded</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BlockingQueue.#ctor(System.Int32)">
            <summary>
            Create new BlockingQueue.
            </summary>
            <param name="capacity">The initial number of elements that the queue can contain</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BlockingQueue.#ctor">
            <summary>
            Create new BlockingQueue.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Utility.BlockingQueue.Closed">
            <summary>
            Gets flag indicating if queue has been closed.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BlockingQueue.Finalize">
            <summary>
            BlockingQueue Destructor (Close queue, resume any waiting thread).
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BlockingQueue.Clear">
            <summary>
            Remove all objects from the Queue.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BlockingQueue.Close">
            <summary>
            Remove all objects from the Queue, resume all dequeue threads.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BlockingQueue.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            </summary>
            <returns>Object in queue.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BlockingQueue.Dequeue(System.TimeSpan)">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            </summary>
            <param name="timeout">time to wait before returning</param>
            <returns>Object in queue.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BlockingQueue.Dequeue(System.Int32)">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            </summary>
            <param name="timeout">time to wait before returning (in milliseconds)</param>
            <returns>Object in queue.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BlockingQueue.Enqueue(System.Object)">
            <summary>
            Adds an object to the end of the Queue.
            </summary>
            <param name="obj">Object to put in queue</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BlockingQueue.Open">
            <summary>
            Open Queue.
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.BoEnumReflectionHelper">
            <summary>
            Business Objects Enums reflection functions 
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BoEnumReflectionHelper.AddressTypeEnum(Digita.Tustena.Core.UserConfig,System.Object)">
            <summary>
            Return a string array filled with the AddressesList enums type.
            </summary>
            <param name="uc">The uc.</param>
            <param name="mainbo">The mainbo.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BoEnumReflectionHelper.CommercialZoneEnum(Digita.Tustena.Core.UserConfig)">
            <summary>
            Return a string array filled with the CommercialZone's enums type.
            </summary>
            <param name="uc">The uc.</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.Settings">
            <summary>
            Settings for BoToXML
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Utility.BoToXML">
            <summary>
            Business Object to XML converter
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BoToXML.ToXML(Digita.Tustena.Interfaces.ICrmBusinessObjects,System.String)">
            <summary>
            Business Object to XML with GUID injection.
            </summary>
            <param name="bo">The BO.</param>
            <param name="keyGuid">The key GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BoToXML.SaveBo(Digita.Tustena.Interfaces.ICrmBusinessObjects,System.String)">
            <summary>
            Saves the Business Object to an xml document.
            </summary>
            <param name="bo">The bo.</param>
            <param name="xmldoc">The xmldoc.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BoToXML.SaveBo(Digita.Tustena.Interfaces.ICrmBusinessObjects,System.String,System.Boolean)">
            <summary>
            Saves the Business Object to an xml document.
            </summary>
            <param name="bo">The bo.</param>
            <param name="xmldoc">The xmldoc.</param>
            <param name="forceLoad">if set to <c>true</c> will force load.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BoToXML.SaveBo(Digita.Tustena.Interfaces.ICrmBusinessObjects,System.Xml.XmlNode)">
            <summary>
            Saves the Business Object to an Xml Node.
            </summary>
            <param name="bo">The bo.</param>
            <param name="xmlNode">The XML node.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BoToXML.SaveBo(Digita.Tustena.Interfaces.ICrmBusinessObjects,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Saves the Business Object to an Xml Node.
            </summary>
            <param name="bo">The bo.</param>
            <param name="xmlNode">The XML node.</param>
            <param name="forceLoad">if set to <c>true</c> will force load.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BoToXML.FillBo(Digita.Tustena.Interfaces.ICrmBusinessObjects,System.Xml.XmlNode)">
            <summary>
            Fills the the Business Object from an Xml Node.
            </summary>
            <param name="bo">The bo.</param>
            <param name="xmlNode">The XML node.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.BoToXML.GetXpathStringForAttributeValue(System.String)">
            <summary>
            Returns a valid XPath statement to use for searching attribute values regardless of 's or "s
            </summary>
            <param name="attributeValue">Attribute value to parse</param>
            <returns>Parsed attribute value in concat() if needed</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.SchemaPreferences.Load">
            <summary>
            Load default Pref for the account / group / default
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.SearchUtils.PrepareSafeParamForMakeCondition(System.String)">
            <summary>
            Replace the char | with a safe char. The char | is used like separator)
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.SearchUtils.BuildQuery(System.String,System.Text.StringBuilder,System.String)">
            <summary>
            Parse the keys object, removing the last 3 charachter, and return if the Next Query is in And
            </summary>
            <param name="keys"></param>
            <param name="sqlAv"></param>
            <param name="sAnd"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.TustenaLiquid.AddReportDataTable(System.Data.DataTable)">
            <summary>
            Build the datatable in liquid with row index
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.TustenaLiquid.AddTustenaAnonymousObject(System.String,System.Object)">
            <summary>
            Add a object to Tustena namespace. So will be access to Tustena.name
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.TustenaLiquid.NormalizeTustenaDBFieldValueForLiquid(Digita.Tustena.Core.Enums.TustenaDBColumnType,System.Object)">
            <summary>
            Gets the normalized value according to the given TustenaDBColumnType by defining
            a valid Liquid printable value (in case the input value is null or empty).
            </summary>
            <param name="fieldType">The TustenaDBComlumn type</param>
            <param name="value">The TustenaDBDataItem field value</param>
            <returns>A valid Liquid printable value</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.TustenaLiquid.GeteRelatedTustenaDBDataItems(Digita.Tustena.Interfaces.ICrmBusinessObjects)">
            <summary>
            Retrieve all TustenaDBDataItems that are related to the given BusinessObject
            </summary>
            <param name="bo">The given BusinessObject</param>
            <returns>A Dictionary&lt;string, IEnumerable&lt;ITustenaDBDataItem&gt;&gt; of 
            TustenaDBDataItems indexed by their TustenaDBBO name</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Utility.WatermarkProtocolSelector.Find(System.String)">
            <summary>
            Search if exists a class to watermark the file with the Protocol, otherwise return null
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="F:Digita.Tustena.Base.Agyo.Log.Management.LogFile.TustenaCryptoLogFilePathGenerator._log">
            <summary>
            Reference to the logger
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Agyo.Log.Management.TustenaCryptoLogEnvironment._log">
            <summary>
                Reference to the logger
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Agyo.Log.Management.TustenaCryptoLogEnvironment.Initialize(System.Xml.XmlElement,System.String)">
            <summary>
                Initialize the crypto-logging system.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Agyo.Log.Management.TustenaCryptoLogUtils._log">
            <summary>
                Reference to the logger
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.MethodAttribute.FormPost">
            <summary>
            Append all form input in the post. Requires if use ViewState and object in Page
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.MethodAttribute.Session">
            <summary>
            If call AjaxSessionWriteHandler, or AjaxSessionReadHandler, or AjaxHandler
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.MethodAttribute.NotRegistered">
            <summary>
            Switch to preventi control registration
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Manager.ProtoTypeAjaxResponse(System.Object,System.String)">
            <summary>
            Ajax gateway for ProtoType
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.AjaxedPage.AjaxedType.Inner">
            <summary>
            Sostituisce il contenuto dentro il container
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.AjaxedPage.AjaxedType.Outer">
            <summary>
            Sostituisce il contentuto a se stesso
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.AjaxedPage.AjaxedType.Append">
            <summary>
            Appende il contenuto al container
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.AjaxedPage.AjaxedType.Value">
            <summary>
            Inietta il valore nel val() del container
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.AjaxedPage.AjaxedType.Javascript">
            <summary>
            Exegue blocchi di javascript, dentro i tag <script></script>
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.AjaxedPage.AjaxedType.ExecJS">
            <summary>
            Esegue il javascript inline
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.AjaxedPage.AjaxedType.PostbackEvent">
            <summary>
            Gestisce l'evento di postback
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.AjaxedPage.AjaxedType.Replace">
            <summary>
            Sostituisce il contenuto al riferimento del target
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.AjaxedPage.AjaxedType.Form">
            <summary>
            Sostitiuisce l'intera form
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Avatar.GravatarImage.GetURL(System.String,System.Int32,System.String)">
            <summary>
            Get the URL of the image
            </summary>
            <param name="email">The email address</param>
            <param name="size">The size of the image (1 - 600)</param>
            <param name="rating">The MPAA style rating(g, pg, r, x)</param>
            <returns>The image URL</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Avatar.GravatarImage.GetURL(System.String,System.Int32)">
            <summary>
            Get the URL of the image
            </summary>
            <param name="email">The email address</param>
            <param name="size">The size of the image (20 - 80)</param>
            <returns>The image URL</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Avatar.GravatarImage.GetURL(System.String)">
            <summary>
            Get the URL of the image
            </summary>
            <param name="email">The email address</param>
            <returns>The image URL</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Avatar.GravatarImage.getMd5Hash(System.String)">
            <summary>
            Hash an input string and return the hash as a 32 character hexadecimal string
            </summary>
            <param name="input">The string to hash</param>
            <returns>The MD5 hash</returns>
        </member>
        <member name="T:Digita.Tustena.Base.Comparers.OpportunityProductListComparer">
            <summary>
            Simple comparer. Assume that OriginalBO.FreeFields and current FreeFields contains always all changed fields
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Comparers.ErpRowExtensionListComparer">
            <summary>
            Simple comparer. Assume that OriginalBO.FreeFields and current FreeFields contains always all changed fields
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Comparers.ErpRowListComparer">
            <summary>
            Simple comparer. Assume that OriginalBO.FreeFields and current FreeFields contains always all changed fields
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Comparers.FreeFieldListComparer">
            <summary>
            Simple comparer. Assume that OriginalBO.FreeFields and current FreeFields contains always all changed fields
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Converters.CrmXmlNodeConverter.DeserializeRootElementName">
            <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produced multiple root elements.
            </summary>
            <value>The name of the deserialized root element.</value>
        </member>
        <member name="P:Digita.Tustena.Base.Converters.CrmXmlNodeConverter.WriteArrayAttribute">
            <summary>
            Gets or sets a value to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
            <value><c>true</c> if the array attribute is written to the XML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Digita.Tustena.Base.Converters.CrmXmlNodeConverter.WriteTypeAttribute">
            <summary>
            Gets or sets a value to indicate whether to write the Json.NET type attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
            <value><c>true</c> if the type attribute is written to the XML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Digita.Tustena.Base.Converters.CrmXmlNodeConverter.OmitRootObject">
            <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
            <value><c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Digita.Tustena.Base.Converters.CrmXmlNodeConverter.EncodeSpecialCharacters">
            <summary>
            Gets or sets a value indicating whether to encode special characters when converting JSON to XML.
            If <c>true</c>, special characters like ':', '@', '?', '#' and '$' in JSON property names aren't used to specify
            XML namespaces, attributes or processing directives. Instead special characters are encoded and written
            as part of the XML element name.
            </summary>
            <value><c>true</c> if special characters are encoded; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Digita.Tustena.Base.Converters.CrmXmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="serializer">The calling serializer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Converters.CrmXmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Converters.CrmXmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the <paramref name="attributeName"/> is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns><c>true</c> if attribute name is for a namespace attribute, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Converters.CrmXmlNodeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Digita.Tustena.Base.Converters.CrmXmlNodeHelper.CrmJsonSerializationException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Digita.Tustena.Base.Converters.CrmXmlNodeHelper.CrmJsonSerializationException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Digita.Tustena.Base.Converters.CrmXmlNodeHelper.CrmJsonSerializationException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Digita.Tustena.Base.Converters.CrmXmlNodeHelper.CrmJsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Converters.CrmXmlNodeHelper.CrmJsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Converters.CrmXmlNodeHelper.CrmJsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Converters.CrmXmlNodeHelper.CrmJsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="M:Digita.Tustena.Base.Converters.CrmXmlNodeHelper.CrmJsonSerializationException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message, JSON path, line number, line position, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="lineNumber">The line number indicating where the error occurred.</param>
            <param name="linePosition">The line position indicating where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:Digita.Tustena.Base.Converters.NameValueCollectionConverter">
            <summary>
            Custom converter for (de)serializing NameValueCollection
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Database.TustenaDBNormalizer.NormalizeTustenaDatabase(System.Boolean)">
            <summary>
            Launches the normalization scripts for all Tustena Database tables 
            (Remember that there may be two different databases: the main Tustena 
            db and the TustenaDatabase dedicated db containing just the _ESTRUCT, 
            _DATA and USERSLISTSFIELDS tables and their localizations).
            </summary>
            <returns>Returns a message indicating wether the procedure succeded or the exception occurred.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Database.DbReflectionUtils.GetColumnsInfo(System.Data.SqlClient.SqlConnection)">
            <summary>
              Gets the columns type names.
            </summary>
            <param name="conn">The conn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">conn</exception>
        </member>
        <member name="P:Digita.Tustena.Base.Database.TableColumnsInfo.TableSchema">
            <summary>
            Gets or sets the table schema.
            </summary>
            <value>
            The table schema.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Database.TableColumnsInfo.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Database.TableColumnsInfo.TableFullName">
            <summary>
            Gets the full name of the table.
            </summary>
            <value>
            The full name of the table.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Database.TableColumnsInfo.TableCatalog">
            <summary>
            Gets or sets the table catalog.
            </summary>
            <value>
            The table catalog.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Database.TableColumnsInfo.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <value>
            The name of the column.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Database.TableColumnsInfo.ColumnFullName">
            <summary>
            Gets the full name of the column.
            </summary>
            <value>
            The full name of the column.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Database.TableColumnsInfo.ColumnDataType">
            <summary>
            Gets or sets the type of the column data.
            </summary>
            <value>
            The type of the column data.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Database.TableColumnsInfo.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether this instance is primary key.
            </summary>
            <value>
            <c>true</c> if this instance is primary key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Database.TableColumnsInfo.IsIdentity">
            <summary>
            Gets or sets a value indicating whether this instance is identity.
            </summary>
            <value>
            <c>true</c> if this instance is identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Digita.Tustena.Base.Database.TableColumnsInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Base.Database.DataStorageUtils.BuildExtensionsFilterQuery(System.String[])">
            <summary>
            Return a subquery with all the extension filters pecified
            </summary>
            <param name="extensions">extension filters</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ERP.ErpRowEditorService`1.UpdateTaxDescription(Digita.Tustena.Interfaces.BusinessObjects.IERPBaseBO,Digita.Tustena.Interfaces.BusinessObjects.IERPRow)">
            <summary>
            Cerco il valore IVA predefinito per l'azienda (a cui si sta facendo il preventivo)
            </summary>
            <param name="ph"></param>
            <param name="row"></param>
        </member>
        <member name="F:Digita.Tustena.Base.HttpLogging.UserHttpMessagesLoggingService._itemsIdsCache">
            <summary>
            Contains the IDs of all the logged messages.
            This is needed because it's not possible to get all the messages given a specific region
            (and a cache based on List&lt;HttpMessageLogItem&gt; would have horrible serialization performances for big payloads a numerous items)
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.HttpLogging.UserHttpMessagesLoggingService._itemsCache">
            <summary>
            Contains the messages logged for all users
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.HttpLogging.UserHttpMessagesLoggingService._isEnabledCache">
            <summary>
            Contains the enable-state of logging for all the enabled users
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Import.PreImportEngine">
            <summary>
            
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Import.SerializableDictionary`2">
            <summary>
            Represents an XML serializable collection of keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:Digita.Tustena.Base.Threading.MassiveUpdate.QueueEnqueue(Digita.Tustena.Core.UserConfig,Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64[],Digita.Tustena.Base.Threading.MassiveAction[])">
            <summary>
            
            </summary>
            <param name="uc"></param>
            <param name="businessObjectType"></param>
            <param name="multiSelectArray"></param>
            <param name="actions"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Threading.MassiveUpdate.EnqueueMassiveChangeStruct(Digita.Tustena.Core.UserConfig,Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64[],Digita.Tustena.Base.Threading.MassiveAction[])">
            <summary>
            Save file .mass and Enqueue
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Threading.MassiveUpdate.UpdateAndSaveCrmBusinessObjects(Digita.Tustena.Core.UserConfig,Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64,Digita.Tustena.Base.Threading.MassiveAction[])">
            <summary>
            Update the properties of bo with informations of the MassiveChange
            </summary>
            <param name="uc"></param>
            <param name="type"></param>
            <param name="id"></param>
            <param name="actions"></param>
            <returns></returns>
        </member>
        <member name="F:Digita.Tustena.Base.Threading.SchedulerCluster._log">
            <summary>
            Reference to the logger
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Threading.SchedulerUtils._log">
            <summary>
            Reference to the logger
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Threading.DBMaintenance.taskReport">
            <summary>
            logger x working status
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Threading.DBMaintenance.Trace(System.Int32)">
            <summary>
            called from page diagnostic
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="F:Digita.Tustena.Base.Threading.Scheduler._log">
            <summary>
            Reference to the logger
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Threading.Scheduler.InitSchedule(Digita.Tustena.Base.Threading.Scheduler.ScheduleType,System.DateTime,System.String,System.Int32)">
            <summary>
            Initialize a new scheduled event (Same as EventSchedulerThread.Init().InitSchedule)
            </summary>
            <param name="scheduleType">es: ScheduleType.ProcessExtension</param>
            <param name="dateTime">Next run UTC</param>
            <param name="name">The name of the scheduler event passed as Action in the InvokeEvent </param>
            <param name="minutesInterval">Reschedule after x minutes. 0 for single event</param>
        </member>
        <member name="T:Digita.Tustena.Base.Billing.ActivityBillingService">
            <summary>
            Get billing of activityies without JobOrder,JoborderTask, Contract and Service
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Billing.ServiceToBill.Cost">
            <summary>
            The List price
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Billing.ServiceToBill.ListPrice">
            <summary>
            The List price
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Billing.ServiceToBill.UnitPrice">
            <summary>
            the Unit single price without apply DiscountFormula
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Billing.ServiceToBill.NewUPrice">
            <summary>
            The Unit single price with apply Discount Formula
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Billing.ServiceToBill.GrandTotal">
            <summary>
            The grand total of row. New UnitPrice * Qta * DiscountFormula
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Billing.ServiceToBill.GrandTotalWithVat">
            <summary>
            The grand total of row. New UnitPrice * Qta * DiscountFormula + ((UnitPrice * Qta * DiscountFormula) * TaxValue / 100)
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Billing.GroupedBillingRows.CrossId">
            <summary>
            AnagraphicId
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Billing.GroupBillingRow.CrossId">
            <summary>
            Main Billing Reference (Contract / JobOrder ...)
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Print.Liquid.TustenaFilters.FormatAsMoney(System.Object,System.String,System.String)">
            <summary>
            Return money
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.Liquid.TustenaFilters.FormatDecimal(System.Object,System.Int32)">
            <summary>
            Return money
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.Liquid.TustenaFilters.FormatTime(System.Object,System.String,System.String)">
            <summary>
            Return the formatted time from minutes or seconds
            </summary>
            <param name="input">the value</param>
            <param name="inputtype">minutes or seconds</param>
            <param name="outFormat">ex. %O0%CD:%O1:D2%CH:%O2:D2%CM:%O3:D2%CS</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.Liquid.TustenaFilters.FormatTotalTime(System.Object,System.String)">
            <summary>
            Return the total time from minutes or seconds
            </summary>
            <param name="input">the value</param>
            <param name="inputtype">minutes or seconds</param>        
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Print.BasePrintManager">
            <summary>
            Abstract class for base print manager.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.BasePrintManager.TemplateItem">
            <summary>
            The template item.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.BasePrintManager.Liquid">
            <summary>
            Tustena Liquid.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.BasePrintManager.UC">
            <summary>
            The current user.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.BasePrintManager.TemplateName">
            <summary>
            The template name.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Print.BasePrintManager.#ctor(Digita.Tustena.Core.UserConfig,Digita.Tustena.Interfaces.Print.ITemplateItem,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="uc"></param>
            <param name="item"></param>
            <param name="name"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.BasePrintManager.CreateBO(Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64)">
            <summary>
            Get the business object with the specified type and key.
            </summary>
            <param name="bot"></param>
            <param name="id"></param>
            <returns>ICrmBusinessObjects</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.BasePrintManager.GenerateFile(System.Boolean,System.Int64[])">
            <summary>
            Abstrast method for generate files.
            </summary>
            <param name="preview"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.BasePrintManager.GenerateFile(System.Collections.Generic.List{Digita.Tustena.Interfaces.ICrmBusinessObjects})">
            <summary>
            Abstrast method for generate files.
            </summary>
            <param name="crmBOs"></param>
            <returns></returns>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXContants.START_FIELD_DELIMITER">
            <summary>
            Constant string for begin field.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXContants.END_FIELD_DELIMITER">
            <summary>
            Costant string for end field.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXContants.START_INCLUDED_PICTURE_DELIMITER">
            <summary>
            Const string for included picture field.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXContants.DATASOURCEPREFIX">
            <summary>
            Constant for datasource prefix.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXContants.START_PARAMETER_DELIMITER">
            <summary>
            Constant for start parameter delimiter.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXContants.END_PARAMETER_DELIMITER">
            <summary>
            Constant for end parameter delimiter.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXContants.DOUBLE_QUOTE_ESCAPE">
            <summary>
            Constant for double quote escape sequence.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXContants.LIQUID_FIELD_START_DELIMITER">
            <summary>
            Constat for liquid field start delimiter.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXContants.LIQUID_FIELD_END_DELIMITER">
            <summary>
            Constat for liquid field end delimiter.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXContants.DATASOURCE_TAG">
            <summary>
            Const for datasource tag.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXContants.SQLSOURCE_TAG">
            <summary>
            const for sqlsource tag.
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Print.DocXGenerator.DocXDiagnostic">
            <summary>
            This class perform a diagnostic for a DocX document.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDiagnostic._docXGenerator">
            <summary>
            Parent object.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDiagnostic.#ctor(Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator)">
            <summary>
            Ctor.
            </summary>
            <param name="docXGenerator"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDiagnostic.GetProfile">
            <summary>
            Perform a diagnostic for the current DocX document, and build a report profile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDiagnostic.ParseDocumentParts(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Collections.Generic.List{System.Tuple{System.Exception,DocumentFormat.OpenXml.Wordprocessing.FieldCode}},System.Collections.Generic.List{System.Tuple{System.Exception,DocumentFormat.OpenXml.Wordprocessing.SimpleField}})">
            <summary>
            Parse the Header or Footer part of the document.
            </summary>
            <param name="documentPart">(OpenXmlPart).The OpenXmlPart. Can be the header or footer part of the document.</param>
            <param name="parsedFieldCodeList">The list of the FieldCode parsed.</param>
            <param name="parsedSimpleFieldList">The lost of the SimpleFiel parsed.</param>
            <returns>(bool).Return true if the parse have an error.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDiagnostic.ParseField(System.Collections.Generic.List{System.Tuple{System.Exception,DocumentFormat.OpenXml.Wordprocessing.SimpleField}},DocumentFormat.OpenXml.Wordprocessing.SimpleField)">
            <summary>
            Parse a SimpleField and put the result into a list.
            </summary>
            <param name="parsedSimpleFieldList">The List of the parsed SimpleField.</param>
            <param name="simpleField">(SimpleField).The SimpleField object.</param>
            <returns>(bool).Return true if the parse have an error.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDiagnostic.ParseField(System.Collections.Generic.List{System.Tuple{System.Exception,DocumentFormat.OpenXml.Wordprocessing.FieldCode}},DocumentFormat.OpenXml.Wordprocessing.FieldCode)">
            <summary>
            Parse a FieldCode and put the result into a list.
            </summary>
            <param name="parsedSimpleFieldList">The List of the parsed FieldCode.</param>
            <param name="fieldCode">(FieldCode).The FieldCode object.</param>
            <returns>(bool).Return true if the parse have an error.</returns>
        </member>
        <member name="T:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile">
            <summary>
            The document profile is a diagnosic report for DocX document.
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.DocumentState">
            <summary>
            Enumerator definition.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.DocumentState.NOT_CHECKED">
            <summary>
            Document state not defined/checked.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.DocumentState.NOT_WELL_FORMED">
            <summary>
            The document have some kind of errors.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.DocumentState.WELLFORMED">
            <summary>
            The document is well formed and can be used for databinding.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile._documentState">
            <summary>
            The state of the document.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.documentParsedFieldCode">
            <summary>
            The list of the FieldCode of the main document.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.documentParsedSimpleField">
            <summary>
            The List of the SimpleField of the main document.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.headerParsedFieldCode">
            <summary>
            The List of the FieldCode of the header section.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.headerParsedSimpleField">
            <summary>
            The List of the SimpleField of the header section.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.footerParsedFieldCode">
            <summary>
            The List of the FieldCode of the footer section.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.footerParsedSimpleField">
            <summary>
            The List of the SimpleField of the footer section.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile._TableNumber">
            <summary>
            The number of the table defined into the main part of the document.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile._HaveRepeatingRegion">
            <summary>
            Boolean flag.True the document have a repeating region defined.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile._HaveFooterDefined">
            <summary>
            Boolean flag.True if the document have a footer region defined.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile._HaveHeaderDefined">
            <summary>
            Boolean flag.True if the document have a header region defined.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.TableNumber">
            <summary>
            Get the number of table defined into the main part of the document.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.HaveRepeatingRegion">
            <summary>
            Return True if the document have a repeating region defined.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.HaveFooterDefined">
            <summary>
            Return True if the document have a footer region defined.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.HaveHeaderDefined">
            <summary>
            Return True if the document have an header region defined.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.State">
            <summary>
            Return an DocumentState enumerator for the state of the document.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.AddHeaderParsingField(System.Collections.Generic.List{System.Tuple{System.Exception,DocumentFormat.OpenXml.Wordprocessing.FieldCode}})">
            <summary>
            Add a list of parsed FieldCode for the header part.
            </summary>
            <param name="fieldList">The list of parsed field.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.AddHeaderParsingField(System.Collections.Generic.List{System.Tuple{System.Exception,DocumentFormat.OpenXml.Wordprocessing.SimpleField}})">
            <summary>
            Add a list of parsed SimleField for the header part.
            </summary>
            <param name="fieldList">The list of parsed field.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.AddFooterParsingField(System.Collections.Generic.List{System.Tuple{System.Exception,DocumentFormat.OpenXml.Wordprocessing.FieldCode}})">
            <summary>
            Add a list of parsed FieldCode for the footer part.
            </summary>
            <param name="fieldList">The list of parsed field.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.AddFooterParsingField(System.Collections.Generic.List{System.Tuple{System.Exception,DocumentFormat.OpenXml.Wordprocessing.SimpleField}})">
            <summary>
            Add a list of parsed SimpleField for the footer part.
            </summary>
            <param name="fieldList">The list of parsed field.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.AddDocumentParsedFields(System.Collections.Generic.List{System.Tuple{System.Exception,DocumentFormat.OpenXml.Wordprocessing.FieldCode}})">
            <summary>
            Add a list of parsed FieldCode for the main document part.
            </summary>
            <param name="fieldList">The list of parsed field.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.AddDocumentParsedFields(System.Collections.Generic.List{System.Tuple{System.Exception,DocumentFormat.OpenXml.Wordprocessing.SimpleField}})">
            <summary>
            Add a list of parsed SimpleField for the main document part.
            </summary>
            <param name="fieldList">The list of parsed field.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.SetMainDocumentTable(System.Int32)">
            <summary>
            Add the number of the tables find into the main part of the document.
            </summary>
            <param name="tableNumber">(int).The numer of the tables.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.SetRepetingRegionFound(System.Boolean)">
            <summary>
            Set the boolean flag, if the document contains a repeating region.
            </summary>
            <param name="haveRepetingRegion">(bool).Boolean flag.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.SetFooterDefined(System.Boolean)">
            <summary>
            Set the boolean flag, if the document contains a footer region.
            </summary>
            <param name="haveFooterDefined">(bool).Boolean flag.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.SetHeaderDefined(System.Boolean)">
            <summary>
            Set the boolean flag, if the document contains a header region.
            </summary>
            <param name="haveHeaderDefined">(bool).Boolean flag.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXDocumentProfile.SetError(System.Boolean)">
            <summary>
            Set the document parsing error.
            </summary>
            <param name="parseError">(bool).Boolean flag.</param>
        </member>
        <member name="T:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXFieldNotCompliant">
            <summary>
            Class for manage the exception for fields that are not MERGE FIELD WELL FORMED.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXFieldNotCompliant._TheField">
            <summary>
            Not compliant field.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXFieldNotCompliant.TheField">
            <summary>
            The not compliant field.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXFieldNotCompliant.#ctor(DocumentFormat.OpenXml.Wordprocessing.FieldCode)">
            <summary>
            Constuctor.
            </summary>
            <param name="notCompliantFieldCode"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXFieldNotCompliant.#ctor(DocumentFormat.OpenXml.Wordprocessing.SimpleField)">
            <summary>
            Constuctor.
            </summary>
            <param name="notCompliantSimpleField"></param>
        </member>
        <member name="T:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXFieldParsingError">
            <summary>
            Class for manage the parsing field exceptions.
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXSaveDocumentException">
            <summary>
            Class for manage saving document exceptions.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXSaveDocumentException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="innerException">(Exception).The inner exception.</param>
        </member>
        <member name="T:Digita.Tustena.Base.Print.DocXGenerator.FieldType">
            <summary>
            Enumerator for field type definition.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.FieldType.FieldCode">
            <summary>
            Is a FieldCode.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.FieldType.SimpleField">
            <summary>
            Is a Simple Field.
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition">
            <summary>
            This class is an abstraction layer for the SimpleField and FieldCode data.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition._fieldType">
            <summary>
            Enumerator that specify the type of the field.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition._parameter">
            <summary>
            The parameter associated at this field.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition._fieldName">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition._ParentName">
            <summary>
            The parent name.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition._DataSourceName">
            <summary>
            The Datasource name.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition.FieldType">
            <summary>
            Get the FieldType enumerator, that specify the type of the field.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition.FieldName">
            <summary>
            Get the field name.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition.Parameter">
            <summary>
            Get the parameter associated at this field.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition.ParentName">
            <summary>
            Get the parent name.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition.DataSource">
            <summary>
            Get the datasource name.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition.IsDataSouceField">
            <summary>
            Return true if the field is defined into a datasouce region.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition.#ctor(System.String,System.String,System.String,System.String,Digita.Tustena.Base.Print.DocXGenerator.FieldType)">
            <summary>
            Internal constructor.
            </summary>
            <param name="fieldName">(string).The FieldName.</param>
            <param name="parameter">(string).The parameter.></param>
            <param name="dataSourceName">(string).The parameter.></param>
            <param name="fieldType">(FieldType).The FieldType.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition.IsLiquidField">
            <summary>
            Return true if the field is a Liquid field.
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition.ContainsLiquidMarkUp(System.String)">
            <summary>
            Return true if the string contains Liquid Markup language.
            </summary>
            <param name="field"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition.GetDataSourceName(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Get the datasouce na.e
            </summary>
            <param name="field"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition.ParseField(System.String)">
            <summary>
            Parse the field name.
            </summary>
            <param name="fieldText">(string).The raw field data.</param>
            <returns>Tuple{string,string}.The first parameter is the name of the field, the second parameter the parameter of the field.</returns>
            <remarks>If the raw field data don't contains field definition, the result is the field text.</remarks>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition.Parse(DocumentFormat.OpenXml.Wordprocessing.FieldCode)">
            <summary>
            Parse the FieldCode object and return an XFieldDefintion.
            </summary>
            <param name="field">(FieldCode).The FieldCode object.</param>
            <returns>(DocXFieldDefinition).The DocXFieldDefinition object.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXFieldParsingError"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition.Parse(DocumentFormat.OpenXml.Wordprocessing.SimpleField)">
            <summary>
            Parse the FieldCode object and return an XFieldDefintion.
            </summary>
            <param name="field">(SimpleField).The SimpleField object.</param>
            <returns>(DocXFieldDefinition).The DocXFieldDefinition object.</returns>
            <exception cref="T:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXFieldParsingError"></exception>
            <exception cref="T:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXFieldParsingError"></exception>
        </member>
        <member name="T:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator">
            <summary>
            Class for creating Microsoft Office Word document for Digita.
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.WorkingModeKind">
            <summary>
            Enumerator that specify a working mode.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator._disposed">
            <summary>
            Flag: Has Dispose already been called?
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator._memoryStream">
            <summary>
            The memory Stream.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.dictionaryValue">
            <summary>
            The dictionary of fields/value.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator._Debug">
            <summary>
            The diagnostic debug object.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator._tustenaLiquid">
            <summary>
            The tustena liquid.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.FullFilePath">
            <summary>
            The full file path.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.Working">
            <summary>
            The working mode.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.Docx">
            <summary>
            The OpenXml document,
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.Buffer">
            <summary>
            InternalBuffer.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.Fields">
            <summary>
            The fields of the documents.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.DebugDocument">
            <summary>
            The debug system.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.Item(System.Int32)">
            <summary>
            Get or set the merge field value by index.
            </summary>
            <param name="index"></param>
            <returns>(string).The value of the field.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.#ctor(Digita.Tustena.Base.Utility.TustenaLiquid)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.#ctor(System.String,Digita.Tustena.Base.Utility.TustenaLiquid)">
            <summary>
            Constructor.Create a new DocXGenerator instance, with a specified full file path;
            </summary>
            <param name="fullModelPath">(string).The full file path of the word document.</param>
            <param name="tustenaLiquid">object of type TustenaLiquid</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.#ctor(System.Byte[],Digita.Tustena.Base.Utility.TustenaLiquid)">
            <summary>
            Constructor.Create a new DocXGenerator instnce, with a specifidied byte array content.
            </summary>
            <param name="buffer">(byte[]). Byte array content.</param>
            <param name="tustenaLiquid"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.ContainsField(System.String)">
            <summary>
            Return true if the document contains a parsed field.
            </summary>
            <param name="fieldName"></param>
            <returns>(Bool).Boolean flag.Return true if the document contains field.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.LoadDocument">
            <summary>
            This method load and parse the Microsoft Office Word document.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXDocumentLoadException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.DataBind(System.Collections.Hashtable)">
            <summary>
            Perform the databinding.
            </summary>
            <param name="datasource"></param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXRenderException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.SetMergeField(System.String,System.String)">
            <summary>
            Set the MergeField Value.
            </summary>
            <param name="fieldName">(string).The fielname to set.</param>
            <param name="fieldValue">(string).The field value.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.Check">
            <summary>
            Check the document.
            </summary>
            <remarks>It's a shortcut call, for DebugDocument->GetProfile()</remarks>
            <returns>(bool).Return true if the document is well formed.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.Save">
            <summary>
            Save the document.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXSaveDocumentException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.SaveToStream">
            <summary>
            Save the document to the specified stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:Digita.Tustena.Base.Print.DocXGenerator.DocXExceptions.DocXSaveDocumentException"></exception>
            <returns>byte[].The byte array.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.IsImageIncludedFieldCompliant(DocumentFormat.OpenXml.Wordprocessing.FieldCode)">
            <summary>
            Return true if the FieldCopde is an IncludePicture.
            </summary>
            <param name="fieldCode"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.IsMergeFieldCompliant(DocumentFormat.OpenXml.Wordprocessing.FieldCode)">
            <summary>
            Return true if the FieldCode is a MergeField compliant.
            </summary>
            <param name="fieldCode">(FieldCode).The FieldCode object.</param>
            <returns>(bool).Return True if the FieldCode is a MergeField compliant.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.IsMergeFieldCompliant(DocumentFormat.OpenXml.Wordprocessing.SimpleField)">
            <summary>
            Return ture if the SimpleField is a MergeField compliant.
            </summary>
            <param name="simpleField">(SimpleField).The SimpleFiel object.</param>
            <returns>(bool).Return true if the SimpleField is a MergeField compliant.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.GetRepeatingRegionReference">
            <summary>
            Find the RepeatingTableRow associated with a region repeter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.GetAllRepeatingRegionReference">
            <summary>
            Find the RepeatingTableRow associated with a region repeter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.IsDataSourceElement(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Perform a lookback into the document for search the datasource properties.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.DataBindTables(System.Collections.Hashtable)">
            <summary>
            Populate the tables.
            </summary>
            <param name="datasource"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.BindLiquidIEnumerable(System.Collections.Hashtable,System.String,Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference)">
            <summary>
            Bind the the IEnumerable datasource to a datatable.
            </summary>
            <param name="datasource"></param>
            <param name="datasourceName"></param>
            <param name="regionReference"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.GetObjectMemberValue(System.String,System.Object)">
            <summary>
            Get the value of member with the specified object.
            </summary>
            <param name="memberName"></param>
            <param name="theObject"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.DataBindRow(DocumentFormat.OpenXml.Wordprocessing.TableRow,DotLiquid.Hash)">
            <summary>
            Bind The spefied row with the current liquid hash.
            </summary>
            <param name="tableRow"></param>
            <param name="currentHash"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.BindDataTable(System.Collections.Hashtable,System.String,Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference)">
            <summary>
            Bind the datatable to the word table.
            </summary>
            <param name="datasource"></param>
            <param name="datasourceName"></param>
            <param name="regionReference"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.ConvertValue(System.Object)">
            <summary>
            Perfom a dataconversion.
            </summary>
            <param name="objectToConvert"></param>
            <returns>(string).The converted value.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.SearchFirstField(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Search the first DocXField defined as child openXmlElement 
            </summary>
            <param name="openXmlElement"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.IsDataSourceField(DocumentFormat.OpenXml.Wordprocessing.SimpleField)">
            <summary>
            This method verify, if the SimpleField object is a datasource field.
            </summary>
            <param name="simpleField">(SimpleField).The SimpleField object to check.</param>
            <returns>(bool).Return True if the SimpleField is a dataSource Field.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.IsDataSourceField(DocumentFormat.OpenXml.Wordprocessing.FieldCode)">
            <summary>
            Return true if the specified FieldCode is a Datasource field, used in a table.
            </summary>
            <param name="fieldCode">(FieldCode).The FieldCode object to inspect.</param>
            <returns>(Boolean).Return true if the specified field contains a field reference.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.GetValueFromDataSource(System.Collections.Hashtable,Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition)">
            <summary>
            Get the value for the specified field.
            </summary>
            <param name="datasource"></param>
            <param name="dataField"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.DataBindField(System.Collections.Hashtable,DocumentFormat.OpenXml.Wordprocessing.SimpleField)">
            <summary>
            Perform the databind from hashtable to SimpleField.
            </summary>
            <param name="datasource">(Hashtable).The data source.</param>
            <param name="simpleField">SimpleField).The SimpleField object.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.DataBindField(System.Collections.Hashtable,DocumentFormat.OpenXml.Wordprocessing.FieldCode)">
            <summary>
            Perform the databind from hashtable to FieldCode.
            </summary>
            <param name="datasource">(Hashtable).The data source.</param>
            <param name="fieldCode">(FieldCode).The FieldCode object.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.DataBindHeaderFooter(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Collections.Hashtable)">
            <summary>
            Perform the databind for the header and footer parts, that can contains SimpleField or FieldCode.
            </summary>
            <param name="documentPart">(OpenXmlPart).The OpenXmlPart object. Can be HeaderPart of FooterPart</param>
            <param name="datasource">(Hashtable).The datasource.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.DataBindRow(DocumentFormat.OpenXml.Wordprocessing.TableRow,System.Data.DataRow)">
            <summary>
            Do the databind for the specified RepeatingTableRow, with an associated DataRow.
            </summary>
            <param name="tableRow">(RepeatingTableRow).The row of the table.</param>
            <param name="dataRow">(DataRow).The row of the source table.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.SetFieldValue(DocumentFormat.OpenXml.Wordprocessing.FieldCode,System.String)">
            <summary>
            Set the value of specified fieldCode.
            </summary>
            <param name="fieldCode">(FieldCode).The FieldCode object.</param>
            <param name="fieldValue">(string).The field value.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.SetFieldValue(DocumentFormat.OpenXml.Wordprocessing.SimpleField,System.String)">
            <summary>
            Set the value of specified SimpleField.
            </summary>
            <param name="simpleField">(SimpleField).The SimpleField object.</param>
            <param name="fieldValue">(string).The string value.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.AddFieldDefinition(DocumentFormat.OpenXml.Wordprocessing.FieldCode)">
            <summary>
            Add FieldCode definition into the dictionary.
            </summary>
            <param name="field">(FieldCode).The FieldCode object.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.AddFieldDefinition(DocumentFormat.OpenXml.Wordprocessing.SimpleField)">
            <summary>
            Add SimpleField definition into the dicionary.
            </summary>
            <param name="field">(SimpleField).The SimpleField object.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.Dispose">
            <summary>
            Dispose to unleash resources. 
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXGenerator.Dispose(System.Boolean)">
            <summary>
            Private implementation of disposable pattern.
            </summary>
            <param name="disposing">(bool).Boolean flag for disposable.</param>
        </member>
        <member name="T:Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference">
            <summary>
            Class for Document repeating region reference.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference._DatasourceName">
            <summary>
            The current datasource name.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference._DatasourceValue">
            <summary>
            The current datatasource value
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference._table">
            <summary>
            The current document table.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference._repeatingTableRow">
            <summary>
            The repeating row.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference._rowPosition">
            <summary>
            The position of the row.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference._fieldDefinition">
            <summary>
            The first field.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference.Table">
            <summary>
            The table to bind.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference.RepeatingTableRow">
            <summary>
            Get the  repeating row
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference.FieldDefinition">
            <summary>
            Get the first field.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference.RowPosition">
            <summary>
            Get or set the row position.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.DocXRepeatingRegionReference.#ctor(DocumentFormat.OpenXml.Wordprocessing.Table,DocumentFormat.OpenXml.Wordprocessing.TableRow,System.Int32,System.String,System.String,Digita.Tustena.Base.Print.DocXGenerator.DocXFieldDefinition)">
            <summary>
            Ctor.
            </summary>
            <param name="table"></param>
            <param name="row"></param>
            <param name="rowPosition"></param>
            <param name="fieldDefinition"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.TustenaCompliler.GetSandBox">
            <summary>
            Get the sandbox class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.DocXGenerator.TustenaCompliler.GetCSharpTemplate">
            <summary>
            Get the csharp code template.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Print.PrintFactory.GetPrintEngine(Digita.Tustena.Core.UserConfig,Digita.Tustena.Interfaces.Print.ITemplateItem,System.String)">
            <summary>
            Get the BasePrintManager fot the specifed template item.
            </summary>
            <param name="uc"></param>
            <param name="templateItem"></param>
            <param name="TemplateType"></param>
            <returns>BasePrintManager</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.PrintFactory.GetDocXPath(System.String)">
            <summary>
            Get the DocXPath
            </summary>
            <param name="path"></param>
            <returns>string</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Print.PrintFactory.GetDocXFileName(System.String)">
            <summary>
            Get the DocXfileName
            </summary>
            <param name="saveFile"></param>
            <returns>string</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Digita.Tustena.Base.Print.PrintTemplateManager">
            <summary>
            The Print template manager.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Print.PrintTemplateManager.#ctor(Digita.Tustena.Core.UserConfig,Digita.Tustena.Interfaces.Print.ITemplateItem,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Ctor.
            </summary>
            <param name="uc"></param>
            <param name="item"></param>
            <param name="crossType"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.PrintTemplateManager.#ctor(Digita.Tustena.Core.UserConfig,Digita.Tustena.Interfaces.Print.ITemplateItem,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="uc"></param>
            <param name="item"></param>
            <param name="name"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Print.PrintTemplateManager.GenerateFile(System.Boolean,System.Int64[])">
            <summary>
            Generate the pdf file.
            </summary>
            <param name="preview"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Base.Samples.SampleProviderOptions.Deterministic">
            <summary>
            When <see langword="true"/>, the generated sample wil be always the same for a given type.
            When <see langword="false"/>, the generated sample could vary (i.e. the dates could change)
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Charts.ChartJs.ChartCanvasMoneyHelper.Instance">
            <summary>
            Singleton to format the money
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Charts.PerformanceGauge.MinValue">
            <summary>
            From minumum value. Normally 0
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Charts.PerformanceGauge.AvgValue">
            <summary>
            Not good but not too bad, the yellow zone
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Charts.PerformanceGauge.TargetValue">
            <summary>
            Amount to be reach, here start the green zone
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Charts.PerformanceGauge.MaxValue">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Charts.PerformanceGauge.CurrentValue">
            <summary>
            The point you are.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.ExternalReferencesUtils.FindMissingExternalReferenceEntriesByUserAccount(Digita.Tustena.Core.Enums.BusinessObjectType,System.String,System.String,System.String)">
            <summary>
            Finds eventual missing ExternalReferences related to the current matching userAccount. The search
            is performed looking at those rows in the ACCOUNT whose ACCOUNT.USERACCOUNT matches with userAccount
            and not having a respective row in the CROSSEXTERNALREFERENCE table.
            </summary>
            <param name="type">The Enums.BusinessObjectType</param>
            <param name="externalReferenceType">The externalReferenceType</param>
            <param name="externalReferenceValue">The TSIDv3 idengifier</param>
            <param name="userAccount">The TSID email account to be matched with ACCOUNT.USERACCOUN</param>
            <returns>A List&lt;(long,int)&gt; where the long element is the ACCOUNT.UID
            and the int element is the ACCOUNT.CUSTOMERID</returns>
        </member>
        <member name="M:Digita.Tustena.Base.ExternalReferencesUtils.FindExternalReferenceWithLock(Digita.Tustena.Core.UserConfig,Digita.Tustena.Core.Enums.BusinessObjectType,System.String,System.String,System.Boolean)">
            <summary>
            Come FindExternalReference, ma in pi� viene fatto un join tra la tabella CrossExternalReference e la tabella del BO sfruttando eventuali rowlock su quest'ultima
            </summary>
            <param name="uc"></param>
            <param name="type"></param>
            <param name="externalReferenceType"></param>
            <param name="externalReference"></param>
            <param name="excludeDeletedCrossIds"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            jQueryGantt delle commesse.
            Senza parametri ritorna il json dei tasks per la visualizzazione.
            Con il parametro DirectId ritorno il singolo task formato dal BO richiesto
            Con il paramentro css genera il css per utilizzare i colori impostati dall'utente
            </summary>
            <param name="context">Http context</param>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.ProcessFullRequest(Digita.Tustena.Base.Gantt.GanttJobOrderResponseBuilder)">
            <summary>
            Process all i tasks within search parameters
            </summary>
            <param name="gantResponse">Builder per la risposta http</param>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.ProcessSingleRequest(Digita.Tustena.Base.Gantt.GanttJobOrderResponseBuilder,System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Elabora un singolo task dopo la sua modifica nel popup sul Gantt
            </summary>
            <param name="gantResponse">Builder per la risposta http</param>
            <param name="id">Id della risorsa da caricare</param>
            <param name="boType">Tipo di BO</param>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.CreateCss(System.Web.HttpContext)">
            <summary>
            Ritorna i css con i colori customizzati dal cliente
            </summary>
            <param name="context">Httpcontext corrente</param>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.CreateJobOrderGanttBarColorsAndFontsCss">
            <summary>
            Crea il css dei tipi di JobOrder
            </summary>
            <returns>Css</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.CreateJobOrderTaskGanttBarsColorsAndFontsCss">
            <summary>
            Crea il css degli stati dei JobOrderTask
            </summary>
            <returns>Css</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.CreateActivityGanttBarsColorsAndFontsCss">
            <summary>
             Crea il css per le attività. Per tutte lo stesso colore
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.GetJobOrderList(Digita.Tustena.Core.UserConfig,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.List{System.Int64})">
            <summary>
            Elenco di tutte le commese filtrabile per parametri
            </summary>
            <param name="UC">Utente corrente</param>
            <param name="onlyOpen">Solo commesse aperte</param>
            <param name="fromDate">Aperte a partire dal</param>
            <param name="toDate">Aperte fino al</param>
            <returns>Lista commesse</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.GetJobOrderTaskList(Digita.Tustena.Core.UserConfig,System.Collections.Generic.IEnumerable{Digita.Tustena.Base.Gantt.JobOrder})">
            <summary>
            Elenco degli inteventi delle commesse
            </summary>
            <param name="UC">Utente corrente</param>
            <param name="jobOrders">ID delle commesse di cui recuperare gli interventi</param>
            <returns>Lista interventi</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.GetJobOrderWorkActivitiesList(Digita.Tustena.Core.UserConfig,System.Collections.Generic.IEnumerable{Digita.Tustena.Base.Gantt.JobOrder})">
            <summary>
            Elenco delle attività degli interventi
            </summary>
            <param name="UC">Utente corrente</param>
            <param name="jobOrders">Le commesse di cui recuperare le attività</param>
            <returns>Lista attività</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.GetInterventionWorkActivitiesList(Digita.Tustena.Core.UserConfig,System.Collections.Generic.IEnumerable{Digita.Tustena.Base.Gantt.JobOrderTask})">
            <summary>
            Elenco delle attività delle commesse
            </summary>
            <param name="UC">Utente corrente</param>
            <param name="jobOrderTasks">Gli interventi di cui recuperare le attività</param>
            <returns>Lista attività</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.GetJobOrderResourcesList(System.Collections.Generic.IEnumerable{Digita.Tustena.Base.Gantt.JobOrder})">
            <summary>
            Elenco delle risorse impiegate nella commessa
            </summary>
            <param name="UC">Utente corrente</param>
            <param name="jobOrders">ID delle commesse di cui recuperare le risorse</param>
            <returns>Lista risorse</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.GetJobOrderTaskResourcesList(System.Collections.Generic.IEnumerable{Digita.Tustena.Base.Gantt.JobOrderTask})">
            <summary>
            Elenco delle risorse impiegate nell'intervento
            </summary>
            <param name="UC">Utente corrente</param>
            <param name="jobOrderTasks">ID degli interventi di cui recuperare le risorse</param>
            <returns>Lista risorse</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.CreateShortNameResource(System.String)">
            <summary>
            Creare una sigla formata dalle iniziali maiuscole dei nomi completi.
            Es. Mario Rossi ritorna MR
            </summary>
            <param name="fullName">Nome completo</param>
            <returns>Sigla del nome completo</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.GanttJobOrderHandler.CreateShortNameResource(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Crea una sigla formata dalle iniziali maiuscole dei nomi completi.
            Es. Mario Rossi ritorna MR
            </summary>
            <param name="fullNames">Lista di nomi completi</param>
            <returns>Lista delle sigle</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.PerformanceHandler.ProcessRequest(System.Web.HttpContext)">
            Implementing IHttpHandler
        </member>
        <member name="T:Digita.Tustena.Base.Handlers.MailInfoHandler">
            <summary>
            MailInfo
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.MailInfoHandler.ProcessRequest(System.Web.HttpContext)">
            Implementing IHttpHandler
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.BaseAjaxHandler.ProcessRequest(System.Web.HttpContext)">
            Implementing IHttpHandler
        </member>
        <member name="T:Digita.Tustena.Base.Handlers.ChallengeResponseHandler">
            <summary>
            Questo è ancora un prototipo. Va completato.
            Bisogna definire uno schema xml standard che viene passato indietro così da poter sfruttare
            la chiave crittografica anche per altri casi.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.ChallengeResponseHandler.ProcessRequest(System.Web.HttpContext)">
            Implementing IHttpHandler
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.FeedHandler.ProcessRequest(System.Web.HttpContext)">
            Implementing IHttpHandler
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.SessionHandler.ProcessRequest(System.Web.HttpContext)">
            Implementing IHttpHandler
        </member>
        <member name="M:Digita.Tustena.Base.Handlers.CssHandler.GetCssContent(System.String)">
            <summary>
            Render CSS.
            </summary>
            <param name="cssName"></param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Installer.Install">
            <summary>
            Descrizione di riepilogo per install.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.TustenaDBHelperClasses.TustenaDBUtilityExtensions.SortByDisplayNameMatrixAndCrossedForLast(System.Collections.Generic.IEnumerable{Digita.Tustena.Interfaces.BusinessObjects.ITustenaDBColumn})">
            <summary>
            Sorts the ITustenaDBColumn collection by DisplayName asc, putting the crossed columns at the end of the list.
            </summary>
            <param name="columns">The columns collection to be sorted</param>
            <returns>An IEnumerable&lt;ITustenaDBColumn&gt; sorted list</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Polyedro.PolyedroSSO.RequestLogon(System.Web.HttpContext)">
            <summary>
            Retrive XMLSESSION from Request.Form and decode with PrivateKey and authenticate in Polyedro
            </summary>
            <param name="context"></param>
            <returns>Authenticated UserConfig</returns>
            <exception cref="T:Digita.Tustena.Base.Polyedro.PolyedroAuthenticationException"></exception>
            <exception cref="T:Digita.Tustena.Base.Polyedro.PolyedroException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Polyedro.PolyedroSSO.RequestLogon(System.String)">
            <summary>
            Decode string with PrivateKey and authenticate in Polyedro
            </summary>
            <param name="xmlSessionContent"></param>
            <returns>Authenticated UserConfig</returns>
            <exception cref="T:Digita.Tustena.Base.Polyedro.PolyedroAuthenticationException"></exception>
            <exception cref="T:Digita.Tustena.Base.Polyedro.PolyedroException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Polyedro.PolyedroSSO.RequestXml(System.Web.HttpContext)">
            <summary>
            Retrive XMLDATA from Request.Form and decode with PrivateKey and parse to XmlDocument
            </summary>
            <param name="context"></param>
            <returns>XmlDocument with decoded data, or null</returns>
            <exception cref="T:Digita.Tustena.Base.Polyedro.PolyedroException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Polyedro.PolyedroSSO.RequestXml(System.String)">
            <summary>
            Decode string with PrivateKey and parse to XmlDocument 
            </summary>
            <param name="xmlDataContent"></param>
            <returns>XmlDocument with decoded data, or null</returns>
            <exception cref="T:Digita.Tustena.Base.Polyedro.PolyedroException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Session.LockFree.HashTableSessionStateModule.ExpireCallback(System.Object)">
            <summary>
            Called periodically by the Timer created in the Init method to check for  
            expired sessions and remove expired data. 
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.LockFree.HashTableSessionStateModule.RemoveExpiredSessionData">
            <summary>
            Recursivly remove expired session data from session collection. 
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Session.LockFree.LockFreeSessionStateModule">
            <summary>
            
            </summary>
            <remarks>
            Based on example from MSDN:
            http://msdn.microsoft.com/en-us/library/system.web.sessionstate.sessionstateutility.aspx
            </remarks>
        </member>
        <member name="M:Digita.Tustena.Base.Session.LockFree.LockFreeSessionStateModule.Init(System.Web.HttpApplication)">
            <summary>
            IHttpModule.Init  
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.LockFree.LockFreeSessionStateModule.Dispose">
            <summary>
            IHttpModule.Dispose 
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Session.LockFree.LockFreeSessionStateModule.OnAcquireRequestState(System.Object,System.EventArgs)">
            <summary>
            Event handler for HttpApplication.AcquireRequestState 
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="E:Digita.Tustena.Base.Session.LockFree.LockFreeSessionStateModule.Start">
            <summary>
            Event for Session_OnStart event in the Global.asax file. 
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Session.LockFree.LockFreeSessionStateModule.OnReleaseRequestState(System.Object,System.EventArgs)">
            <summary>
            Event handler for HttpApplication.ReleaseRequestState 
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="T:Digita.Tustena.Base.Session.LockFree.SafeEnumerator">
            <summary>
            
            </summary>
            <remarks>http://www.codeproject.com/Articles/56575/Thread-safe-enumeration-in-C</remarks>
        </member>
        <member name="T:Digita.Tustena.Base.Session.LockFree.SessionItem">
            <summary>
            The SessionItem class is used to store data for a particular session.
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Session.LockFree.SessionItemEx">
            <summary>
            The SessionItemEx class is used to store data for a particular session along with 
            an expiration date and time. SessionItem objects are added to the local Hashtable 
            in the OnReleaseRequestState event handler and retrieved from the local Hashtable 
            in the OnAcquireRequestState event handler. The ExpireCallback method is called 
            periodically by the local Timer to check for all expired SessionItem objects in the 
            local Hashtable and remove them. 
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Session.LockFree.ThreadSafeSessionStateItemCollection.dataKeys">
            <summary>
            Contains keys only. Values are not used.
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Session.LockFree.ThreadSafeSessionStateItemCollection.dataValues">
            <summary>
            Contains name-value pairs. Keys must be the same as in <see cref="F:Digita.Tustena.Base.Session.LockFree.ThreadSafeSessionStateItemCollection.dataKeys"/> collections.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Session.MemorySessionStateProvider.MemorySessionStateProviderItem.Value">
            <summary>
              Gets or sets the value.
            </summary>
            <value>
              The value.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Session.MemorySessionStateProvider.MemorySessionStateProviderItem.Timeout">
            <summary>
              Gets or sets the timeout.
            </summary>
            <value>
              The timeout.
            </value>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.MemorySessionStateProviderItem.#ctor(System.DateTime)">
            <summary>
              Initializes a new instance of the <see cref="T:Digita.Tustena.Base.Session.MemorySessionStateProvider.MemorySessionStateProviderItem" /> class.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.MemorySessionStateProviderItem.#ctor(System.Byte[],System.DateTime)">
            <summary>
              Initializes a new instance of the <see cref="T:Digita.Tustena.Base.Session.MemorySessionStateProvider.MemorySessionStateProviderItem" /> class.
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="P:Digita.Tustena.Base.Session.MemorySessionStateProvider.ApplicationName">
            <summary>
              Gets the name of the application.
            </summary>
            <value>
              The name of the application.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Session.MemorySessionStateProvider.Timeout">
            <summary>
              Gets the session timeout.
            </summary>
            <value>
              The session timeout.
            </value>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
              Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">config</exception>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.Dispose">
            <summary>
              Releases all resources used by the <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase" /> implementation.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.SetItemExpireCallback(System.Web.SessionState.SessionStateItemExpireCallback)">
            <summary>
              Sets a reference to the <see cref="T:System.Web.SessionState.SessionStateItemExpireCallback" /> delegate for the Session_OnEnd event defined in the Global.asax file.
            </summary>
            <param name="expireCallback">
              The <see cref="T:System.Web.SessionState.SessionStateItemExpireCallback" />  delegate for the Session_OnEnd event defined in the Global.asax file.
            </param>
            <returns>
              true if the session-state store provider supports calling the Session_OnEnd event; otherwise, false.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.SetAndReleaseItemExclusive(System.Web.HttpContext,System.String,System.Web.SessionState.SessionStateStoreData,System.Object,System.Boolean)">
            <summary>
              Updates the session-item information in the session-state data store with values from the current request, and clears the lock on the data.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">The session identifier for the current request.</param>
            <param name="item">
              The <see cref="T:System.Web.SessionState.SessionStateStoreData" /> object that contains the current session values to be stored.
            </param>
            <param name="lockId">The lock identifier for the current request.</param>
            <param name="newItem">true to identify the session item as a new item; false to identify the session item as an existing item.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.GetItem(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
              Gets the item.
            </summary>
            <param name="context">The context.</param>
            <param name="id">The id.</param>
            <param name="locked">
              if set to <c>true</c> [locked].
            </param>
            <param name="lockAge">The lock age.</param>
            <param name="lockId">The lock id.</param>
            <param name="actionFlags">The action flags.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.GetItemExclusive(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
              Gets the item exclusive.
            </summary>
            <param name="context">The context.</param>
            <param name="id">The id.</param>
            <param name="locked">
              if set to <c>true</c> [locked].
            </param>
            <param name="lockAge">The lock age.</param>
            <param name="lockId">The lock id.</param>
            <param name="actionFlags">The action flags.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.GetSessionStoreItem(System.Boolean,System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
              Gets the session store item.
            </summary>
            <param name="lockRecord">
              if set to <c>true</c> [lock record].
            </param>
            <param name="context">The context.</param>
            <param name="id">The id.</param>
            <param name="locked">
              if set to <c>true</c> [locked].
            </param>
            <param name="lockAge">The lock age.</param>
            <param name="lockId">The lock id.</param>
            <param name="actionFlags">The action flags.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.ReleaseItemExclusive(System.Web.HttpContext,System.String,System.Object)">
            <summary>
              Releases a lock on an item in the session data store.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">The session identifier for the current request.</param>
            <param name="lockId">The lock identifier for the current request.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.RemoveItem(System.Web.HttpContext,System.String,System.Object,System.Web.SessionState.SessionStateStoreData)">
            <summary>
              Deletes item data from the session data store.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">The session identifier for the current request.</param>
            <param name="lockId">The lock identifier for the current request.</param>
            <param name="item">
              The <see cref="T:System.Web.SessionState.SessionStateStoreData" /> that represents the item to delete from the data store.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.CreateUninitializedItem(System.Web.HttpContext,System.String,System.Int32)">
            <summary>
              Adds a new session-state item to the data store.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">
              The <see cref="P:System.Web.SessionState.HttpSessionState.SessionID" /> for the current request.
            </param>
            <param name="timeout">
              The session <see cref="P:System.Web.SessionState.HttpSessionState.Timeout" /> for the current request.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.CreateNewStoreData(System.Web.HttpContext,System.Int32)">
            <summary>
              Creates a new <see cref="T:System.Web.SessionState.SessionStateStoreData" /> object to be used for the current request.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="timeout">
              The session-state <see cref="P:System.Web.SessionState.HttpSessionState.Timeout" /> value for the new
              <see
                cref="T:System.Web.SessionState.SessionStateStoreData" />
              .
            </param>
            <returns>
              A new <see cref="T:System.Web.SessionState.SessionStateStoreData" /> for the current request.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.ResetItemTimeout(System.Web.HttpContext,System.String)">
            <summary>
              Updates the expiration date and time of an item in the session data store.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">The session identifier for the current request.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.GetCacheItemKey(System.String)">
            <summary>
              Gets the cache item key.
            </summary>
            <param name="sessionId">The session id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.InitializeRequest(System.Web.HttpContext)">
            <summary>
              Called by the <see cref="T:System.Web.SessionState.SessionStateModule" /> object for per-request initialization.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MemorySessionStateProvider.EndRequest(System.Web.HttpContext)">
            <summary>
              Called by the <see cref="T:System.Web.SessionState.SessionStateModule" /> object at the end of a request.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
        </member>
        <member name="P:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.PrimaryProvider">
            <summary>
              Reference to the logger
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
              Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">config</exception>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.Dispose">
            <summary>
              Releases all resources used by the <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase" /> implementation.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.SetItemExpireCallback(System.Web.SessionState.SessionStateItemExpireCallback)">
            <summary>
              Sets a reference to the <see cref="T:System.Web.SessionState.SessionStateItemExpireCallback" /> delegate for the Session_OnEnd event defined in the Global.asax file.
            </summary>
            <returns>
              true if the session-state store provider supports calling the Session_OnEnd event; otherwise, false.
            </returns>
            <param name="expireCallback">
              The <see cref="T:System.Web.SessionState.SessionStateItemExpireCallback" />  delegate for the Session_OnEnd event defined in the Global.asax file.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.CheckProviders">
            <summary>
              Checks the providers.
            </summary>
            <exception cref="T:System.InvalidOperationException">
              cannot execute, since the primary provider is null and the Operational Mode is  + OperationalMode
              or
              cannot execute, since the failover provider is null and the Operational Mode is  + OperationalMode
            </exception>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.HandlePrimaryProviderException(System.Exception)">
            <summary>
              Handles the primary provider exception.
            </summary>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.HandleFailoverProviderException(System.Exception)">
            <summary>
              Handles the failover provider exception.
            </summary>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.InitializeRequest(System.Web.HttpContext)">
            <summary>
              Called by the <see cref="T:System.Web.SessionState.SessionStateModule" /> object for per-request initialization.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.GetItem(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
              Returns read-only session-state data from the session data store.
            </summary>
            <returns>
              A <see cref="T:System.Web.SessionState.SessionStateStoreData" /> populated with session values and information from the session data store.
            </returns>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">
              The <see cref="P:System.Web.SessionState.HttpSessionState.SessionID" /> for the current request.
            </param>
            <param name="locked">When this method returns, contains a Boolean value that is set to true if the requested session item is locked at the session data store; otherwise, false.</param>
            <param name="lockAge">
              When this method returns, contains a <see cref="T:System.TimeSpan" /> object that is set to the amount of time that an item in the session data store has been locked.
            </param>
            <param name="lockId">
              When this method returns, contains an object that is set to the lock identifier for the current request. For details on the lock identifier, see "Locking Session-Store Data" in the
              <see
                cref="T:System.Web.SessionState.SessionStateStoreProviderBase" />
              class summary.
            </param>
            <param name="actions">
              When this method returns, contains one of the <see cref="T:System.Web.SessionState.SessionStateActions" /> values, indicating whether the current session is an uninitialized, cookieless session.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.GetItemExclusive(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
              Returns read-only session-state data from the session data store.
            </summary>
            <returns>
              A <see cref="T:System.Web.SessionState.SessionStateStoreData" /> populated with session values and information from the session data store.
            </returns>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">
              The <see cref="P:System.Web.SessionState.HttpSessionState.SessionID" /> for the current request.
            </param>
            <param name="locked">When this method returns, contains a Boolean value that is set to true if a lock is successfully obtained; otherwise, false.</param>
            <param name="lockAge">
              When this method returns, contains a <see cref="T:System.TimeSpan" /> object that is set to the amount of time that an item in the session data store has been locked.
            </param>
            <param name="lockId">
              When this method returns, contains an object that is set to the lock identifier for the current request. For details on the lock identifier, see "Locking Session-Store Data" in the
              <see
                cref="T:System.Web.SessionState.SessionStateStoreProviderBase" />
              class summary.
            </param>
            <param name="actions">
              When this method returns, contains one of the <see cref="T:System.Web.SessionState.SessionStateActions" /> values, indicating whether the current session is an uninitialized, cookieless session.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.ReleaseItemExclusive(System.Web.HttpContext,System.String,System.Object)">
            <summary>
              Releases a lock on an item in the session data store.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">The session identifier for the current request.</param>
            <param name="lockId">The lock identifier for the current request. </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.SetAndReleaseItemExclusive(System.Web.HttpContext,System.String,System.Web.SessionState.SessionStateStoreData,System.Object,System.Boolean)">
            <summary>
              Updates the session-item information in the session-state data store with values from the current request, and clears the lock on the data.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">The session identifier for the current request.</param>
            <param name="item">
              The <see cref="T:System.Web.SessionState.SessionStateStoreData" /> object that contains the current session values to be stored.
            </param>
            <param name="lockId">The lock identifier for the current request. </param>
            <param name="newItem">true to identify the session item as a new item; false to identify the session item as an existing item.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.RemoveItem(System.Web.HttpContext,System.String,System.Object,System.Web.SessionState.SessionStateStoreData)">
            <summary>
              Deletes item data from the session data store.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">The session identifier for the current request.</param>
            <param name="lockId">The lock identifier for the current request.</param>
            <param name="item">
              The <see cref="T:System.Web.SessionState.SessionStateStoreData" /> that represents the item to delete from the data store.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.ResetItemTimeout(System.Web.HttpContext,System.String)">
            <summary>
              Updates the expiration date and time of an item in the session data store.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">The session identifier for the current request.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.CreateNewStoreData(System.Web.HttpContext,System.Int32)">
            <summary>
              Creates a new <see cref="T:System.Web.SessionState.SessionStateStoreData" /> object to be used for the current request.
            </summary>
            <returns>
              A new <see cref="T:System.Web.SessionState.SessionStateStoreData" /> for the current request.
            </returns>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="timeout">
              The session-state <see cref="P:System.Web.SessionState.HttpSessionState.Timeout" /> value for the new
              <see
                cref="T:System.Web.SessionState.SessionStateStoreData" />
              .
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.CreateUninitializedItem(System.Web.HttpContext,System.String,System.Int32)">
            <summary>
              Adds a new session-state item to the data store.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">
              The <see cref="P:System.Web.SessionState.HttpSessionState.SessionID" /> for the current request.
            </param>
            <param name="timeout">
              The session <see cref="P:System.Web.SessionState.HttpSessionState.Timeout" /> for the current request.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.MissionCriticalSessionStateProvider.EndRequest(System.Web.HttpContext)">
            <summary>
              Called by the <see cref="T:System.Web.SessionState.SessionStateModule" /> object at the end of a request.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SessionStateItemCollectionUtils.SerializeToBytesArray(System.Web.SessionState.SessionStateItemCollection)">
            <summary>
              Serializes the specified items.
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SessionStateItemCollectionUtils.DeserializeFromBytesArray(System.Byte[])">
            <summary>
              Deserializes the specified context.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.ApplicationName">
            <summary>
              Gets the name of the application.
            </summary>
            <value>
              The name of the application.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.Timeout">
            <summary>
              Gets the session timeout.
            </summary>
            <value>
              The session timeout.
            </value>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
              Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">config</exception>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.Dispose">
            <summary>
              Releases all resources used by the <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase" /> implementation.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.SetItemExpireCallback(System.Web.SessionState.SessionStateItemExpireCallback)">
            <summary>
              Sets a reference to the <see cref="T:System.Web.SessionState.SessionStateItemExpireCallback" /> delegate for the Session_OnEnd event defined in the Global.asax file.
            </summary>
            <param name="expireCallback">
              The <see cref="T:System.Web.SessionState.SessionStateItemExpireCallback" />  delegate for the Session_OnEnd event defined in the Global.asax file.
            </param>
            <returns>
              true if the session-state store provider supports calling the Session_OnEnd event; otherwise, false.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.SetAndReleaseItemExclusive(System.Web.HttpContext,System.String,System.Web.SessionState.SessionStateStoreData,System.Object,System.Boolean)">
            <summary>
              Updates the session-item information in the session-state data store with values from the current request, and clears the lock on the data.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">The session identifier for the current request.</param>
            <param name="item">
              The <see cref="T:System.Web.SessionState.SessionStateStoreData" /> object that contains the current session values to be stored.
            </param>
            <param name="lockId">The lock identifier for the current request.</param>
            <param name="newItem">true to identify the session item as a new item; false to identify the session item as an existing item.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.GetItem(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
              Gets the item.
            </summary>
            <param name="context">The context.</param>
            <param name="id">The id.</param>
            <param name="locked">
              if set to <c>true</c> [locked].
            </param>
            <param name="lockAge">The lock age.</param>
            <param name="lockId">The lock id.</param>
            <param name="actionFlags">The action flags.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.GetItemExclusive(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
              Gets the item exclusive.
            </summary>
            <param name="context">The context.</param>
            <param name="id">The id.</param>
            <param name="locked">
              if set to <c>true</c> [locked].
            </param>
            <param name="lockAge">The lock age.</param>
            <param name="lockId">The lock id.</param>
            <param name="actionFlags">The action flags.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.GetSessionStoreItem(System.Boolean,System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
              Gets the session store item.
            </summary>
            <param name="lockRecord">
              if set to <c>true</c> [lock record].
            </param>
            <param name="context">The context.</param>
            <param name="id">The id.</param>
            <param name="locked">
              if set to <c>true</c> [locked].
            </param>
            <param name="lockAge">The lock age.</param>
            <param name="lockId">The lock id.</param>
            <param name="actionFlags">The action flags.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.ReleaseItemExclusive(System.Web.HttpContext,System.String,System.Object)">
            <summary>
              Releases a lock on an item in the session data store.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">The session identifier for the current request.</param>
            <param name="lockId">The lock identifier for the current request.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.RemoveItem(System.Web.HttpContext,System.String,System.Object,System.Web.SessionState.SessionStateStoreData)">
            <summary>
              Deletes item data from the session data store.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">The session identifier for the current request.</param>
            <param name="lockId">The lock identifier for the current request.</param>
            <param name="item">
              The <see cref="T:System.Web.SessionState.SessionStateStoreData" /> that represents the item to delete from the data store.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.CreateUninitializedItem(System.Web.HttpContext,System.String,System.Int32)">
            <summary>
              Adds a new session-state item to the data store.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">
              The <see cref="P:System.Web.SessionState.HttpSessionState.SessionID" /> for the current request.
            </param>
            <param name="timeout">
              The session <see cref="P:System.Web.SessionState.HttpSessionState.Timeout" /> for the current request.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.CreateNewStoreData(System.Web.HttpContext,System.Int32)">
            <summary>
              Creates a new <see cref="T:System.Web.SessionState.SessionStateStoreData" /> object to be used for the current request.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="timeout">
              The session-state <see cref="P:System.Web.SessionState.HttpSessionState.Timeout" /> value for the new
              <see
                cref="T:System.Web.SessionState.SessionStateStoreData" />
              .
            </param>
            <returns>
              A new <see cref="T:System.Web.SessionState.SessionStateStoreData" /> for the current request.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.ResetItemTimeout(System.Web.HttpContext,System.String)">
            <summary>
              Updates the expiration date and time of an item in the session data store.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
            <param name="id">The session identifier for the current request.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.GetCacheItemKey(System.String)">
            <summary>
              Gets the cache item key.
            </summary>
            <param name="sessionId">The session id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.InitializeRequest(System.Web.HttpContext)">
            <summary>
              Called by the <see cref="T:System.Web.SessionState.SessionStateModule" /> object for per-request initialization.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.Session.SmartCacheSessionStateProvider.EndRequest(System.Web.HttpContext)">
            <summary>
              Called by the <see cref="T:System.Web.SessionState.SessionStateModule" /> object at the end of a request.
            </summary>
            <param name="context">
              The <see cref="T:System.Web.HttpContext" /> for the current request.
            </param>
        </member>
        <member name="M:Digita.Tustena.Base.FreeFields.FreeFieldParentDirective.#ctor(Digita.Tustena.Core.Enums.CRMTables,System.Int32)">
            <summary>
            
            </summary>
            <param name="referenceTable"></param>
            <param name="resource">Language resource SQLFree{resource]</param>
        </member>
        <member name="M:Digita.Tustena.Base.Lists.ClearForType(Digita.Tustena.Core.UserConfig,Digita.Tustena.Core.Enums.ListsType[])">
            <summary>
            Invalidate List cache
            </summary>
            <param name="uc"></param>
            <param name="listsTypes"></param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Lucene.IFilterReturnCodes">
            <summary> 
            IFilter return codes 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.S_OK">
            <summary> 
            Success 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.E_ACCESSDENIED">
            <summary> 
            The function was denied access to the filter file.  
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.E_HANDLE">
            <summary> 
            The function encountered an invalid handle, probably due to a low-memory situation.  
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.E_INVALIDARG">
            <summary> 
            The function received an invalid parameter. 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.E_OUTOFMEMORY">
            <summary> 
            Out of memory 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.E_NOTIMPL">
            <summary> 
            Not implemented 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.E_FAIL">
            <summary> 
            Unknown error 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.FILTER_E_PASSWORD">
            <summary> 
            File not filtered due to password protection 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.FILTER_E_UNKNOWNFORMAT">
            <summary> 
            The document format is not recognised by the filter 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.FILTER_E_NO_TEXT">
            <summary> 
            No text in current chunk 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.FILTER_E_END_OF_CHUNKS">
            <summary> 
            No more chunks of text available in object 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.FILTER_E_NO_MORE_TEXT">
            <summary> 
            No more text available in chunk 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.FILTER_E_NO_MORE_VALUES">
            <summary> 
            No more property values available in chunk 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.FILTER_E_ACCESS">
            <summary> 
            Unable to access object 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.FILTER_W_MONIKER_CLIPPED">
            <summary> 
            Moniker doesn't cover entire region 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.FILTER_E_EMBEDDING_UNAVAILABLE">
            <summary> 
            Unable to bind IFilter for embedded object 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.FILTER_E_LINK_UNAVAILABLE">
            <summary> 
            Unable to bind IFilter for linked object 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.FILTER_S_LAST_TEXT">
            <summary> 
            This is the last text in the current chunk 
            </summary> 
        </member>
        <member name="F:Digita.Tustena.Base.Lucene.IFilterReturnCodes.FILTER_S_LAST_VALUES">
            <summary> 
            This is the last value in the current chunk 
            </summary> 
        </member>
        <member name="T:Digita.Tustena.Base.Lucene.LuceneParser">
            <summary>
            Summary description for Parser.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Lucene.LuceneParser.AddFolder(Lucene.Net.Index.IndexWriter,Digita.VirtualFileSystem.IVirtualDirectoryInfo)">
            <summary>
            Indexes a folder.
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Lucene.LuceneParser.AddIFilterDocument(Lucene.Net.Index.IndexWriter,System.String)">
            <summary>
            Parses and indexes an IFilter parseable file.
            </summary>
            <param name="indexWriter"></param>
            <param name="path"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Report.ChartFields.Increment(System.String,System.String,System.Double)">
            <summary>
            Increment the Chart Group with groupName with the value passed. if group does not exists, create one new
            the sub group name, spedified more than one counter for each groupName
            </summary>
            <param name="groupName"></param>
            <param name="subgroupKey"></param>
            <param name="value"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Report.StoreProcedureReportExecution.GetDbType(System.Object)">
            <summary>
              Gets the type of the db.
            </summary>
            <param name="val"> The val. </param>
            <returns> </returns>
        </member>
        <member name="M:Digita.Tustena.Base.Report.TQbuilderExtension.ParseReportNameForReportSchema(System.String)">
            <summary>
            remove _pop at the end for virtual report name
            remove subnamespace after . for virtual report name
            </summary>
            <param name="schema">report name</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Report.ImportUtils">
            <summary>
            Contains static method for file import functionalities
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Report.ImportUtils.ExcelRead(System.Byte[],System.String,Digita.Tustena.Core.UserConfig)">
            <summary>
            Read an xls or xlsx file and return the rows in the first Worksheet as a List&lt;List&lt;string&gt;&gt;. 
            To read the .xls file format the Koogra Excel library is used. To read the .xlsx format
            the Epplus Nuget library is used.
            </summary>
            <param name="myData">The import file as a binary array</param>
            <param name="fileExtension">A string representing the file extension (".xls" or ".xlsx")</param>
            <param name="uc">The current UserConfig</param>
            <returns>A List&lt;List&lt;string&gt;&gt; containing the read data 
            (the Excel file's header, if present, is the first row)</returns>
        </member>
        <member name="T:Digita.Tustena.Base.Report.ExportUtils">
            <summary>
            Summary description for ExportUtils.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Report.ExportUtils.GetADORecordSet(System.Data.DataSet)">
            <summary>
            Return an ADO Formatted DataSet
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Report.ExportUtils.RewriteFullElements(System.Xml.XmlTextWriter@,System.String)">
            <summary>
            The XSLT does not tranform with fullendelements. ADO Recordset 
            cannot read this. This method is used to convert the 
            elements to have fullendelements.
            </summary>
            <param name="wrt"></param>
            <param name="aDoXmlString"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Report.ExportUtils.WriteADONamespaces(System.Xml.XmlTextWriter@)">
            <summary>
            Write out the ADO Namespaces
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Report.ExportUtils.WriteSchemaElement(System.Data.DataSet,System.String,System.Xml.XmlTextWriter@)">
            <summary>
            Write out the schema elements
            </summary>
            <param name="ds"></param>
            <param name="dbname"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Report.ExportUtils.WriteSchema(System.Data.DataSet,System.String,System.Xml.XmlTextWriter@)">
            <summary>
            Write out a schema element
            </summary>
            <param name="ds"></param>
            <param name="dbname"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Report.ExportUtils.ExportDataSet(System.Data.DataSet,System.String,Digita.Tustena.Base.Report.ExportUtils.DataSetExportType,System.Web.HttpResponse)">
            <summary>
            Export a DataSet to one of the DataSetExportType formats
            </summary>
            <param name="ds"></param>
            <param name="fileName"></param>
            <param name="type"></param>
            <param name="response"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Report.ExportUtils.TransformToString(System.String,System.String)">
            <summary>
               Transforms XML using XSLT
            </summary>
            <param name="xmlData" type="string">
                <para>
                    XML Data to transform
                </para>
            </param>
            <param name="xslFilePath" type="string">
                <para>
                    File path to the XSL file
                </para>
            </param>
            <returns>
                Returns the result of an XSL Transformation
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Digita.Tustena.Base.Report.ExportUtils.TransformToString(System.String,System.String,System.Boolean)" -->
        <member name="M:Digita.Tustena.Base.Report.ExportUtils.TransformToFile(System.String,System.String,System.String)">
            <summary>
                Transform XML using XSLT, and save the results to a file...
            </summary>
            <param name="xmlData" type="string">
                <para>
                    The XML Data to transform
                </para>
            </param>
            <param name="xslFilePath" type="string">
                <para>
                    The file path to the XSL
                </para>
            </param>
            <param name="resultFileName" type="string">
                <para>
                    The File name to save to
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="P:Digita.Tustena.Base.SqlPageData.SqlStructure.TableWideExpression">
            <summary>
            Extend the data table with a function excecuted on the whole recordset.
            The first field is the function, the second field is the final column name
            For example, new KeyValuePair&lt;string, string&gt;("SUM(DURATION)","TOTALDURATION")
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.SqlPageData.SqlStructure.PreExecutionCommandList">
            <summary>
            A list of commands to execute before launch query, in the same connection and in the same command
            for example for Create temportary query for impreve sql query performances
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.SqlPageData.SqlStructure.CreateDataTable(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Return Partial DataTable
            </summary>
            <param name="tablePageNumber">the number of the current page</param>
            <param name="tableRowOffset">the number of rows in the page</param>
            <param name="tableLastRowCount">if using more than one sqlStructure, get the total count of the last sqlStructure</param>
            <param name="inCaseUsePaging">if paging is enabled, so this perform the a count of the totals</param>
            <param name="countRows">Count the returned rows</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ChangeList.Add(System.Int64,Digita.Tustena.Core.Enums.ListChanges,Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String[]}})">
            <inheritdoc />
        </member>
        <member name="M:Digita.Tustena.Base.ChangeList.Add(System.Int64,Digita.Tustena.Core.Enums.ListChanges,Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Digita.Tustena.Base.Config.PolyedroConfiguration.Login(System.String)">
            <summary>
            Decode string with PrivateKey and authenticate in Polyedro
            </summary>
            <param name="xmlSessionEncrypted"></param>
            <returns>Authenticated UserConfig</returns>
            <exception cref="T:Digita.Tustena.Base.Polyedro.PolyedroAuthenticationException"></exception>
            <exception cref="T:Digita.Tustena.Base.Polyedro.PolyedroException"></exception>
        </member>
        <member name="M:Digita.Tustena.Base.Config.PolyedroConfiguration.IsAuActive">
            <summary>
            Check if Polyedro config is Active and AU is Active
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Config.PolyedroConfiguration.IsSSOActive">
            <summary>
            Check if Polyedro config is Active and SSO is Active
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Config.ActivityPriceConfigurations.Load(Digita.Tustena.Core.UserConfig)">
            <summary>
            Load current price, with fallback to default price
            </summary>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.Caching.ApplicationStore">
            <summary>
            The application store
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.Caching.ApplicationStore._items">
            <summary>
              The items list
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.ApplicationStore.Items">
            <summary>
              Gets the items.
            </summary>
            <value>
              The items.
            </value>
        </member>
        <member name="F:Digita.Tustena.Base.Caching.ApplicationStoreItems._item">
            <summary>
            The items stored in memory
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ApplicationStoreItems.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Digita.Tustena.Base.Caching.ApplicationStoreItems"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">Cannot use Operational Mode ' + OperationalMode + ' if the Primary Provider is not specified</exception>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.ApplicationStoreItems.OperationalMode">
            <summary>
            Gets or sets the operational mode.
            </summary>
            <value>
            The operational mode.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.ApplicationStoreItems.OnErrorBehaviour">
            <summary>
            Gets or sets the on error behaviour.
            </summary>
            <value>
            The on error behaviour.
            </value>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ApplicationStoreItems.Remove(System.String)">
            <summary>
            remove the item
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ApplicationStoreItems.AddOrUpdate``1(System.String,``0)">
            <summary>
            Gets the item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ApplicationStoreItems.GetItem``1(System.String)">
            <summary>
            Gets the item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ApplicationStoreItems.GetItemKey(System.String)">
            <summary>
            Gets the item key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ApplicationStoreItems.HandlePrimaryProviderException(System.Exception)">
            <summary>
              Handles the primary provider exception.
            </summary>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ApplicationStoreItems.HandleFailoverProviderException(System.Exception)">
            <summary>
              Handles the failover provider exception.
            </summary>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheItemInfo.#ctor(System.String,System.Int64,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Digita.Tustena.Base.Caching.CacheItemInfo" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="memorySize">Size of the memory.</param>
            <param name="createdOn">The created on.</param>
            <param name="lastRequestedOn">The last requested on.</param>
            <param name="lastUpdatedOn">The last updated on.</param>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CacheItemInfo.CreatedOn">
            <summary>
              Gets the created on.
            </summary>
            <value>
              The created on.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CacheItemInfo.LastRequestedOn">
            <summary>
            Gets the last request on.
            </summary>
            <value>
            The last request on.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CacheItemInfo.LastUpdatedOn">
            <summary>
            Gets the last update date/time.
            </summary>
            <value>
            The last update date/time.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CacheItemInfo.Timeout">
            <summary>
            Gets the expiration timeout.
            </summary>
            <value>
            The expiration timeout.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CacheItemInfo.MemorySize">
            <summary>
              Gets the size of the memory.
            </summary>
            <value>
              The size of the memory.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CacheItemInfo.Key">
            <summary>
              Gets the key.
            </summary>
            <value>
              The key.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CachePerformanceTestResult.Loops">
            <summary>
            Gets or sets the loops.
            </summary>
            <value>
            The loops.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CachePerformanceTestResult.TestContent">
            <summary>
            Gets or sets the content of the test.
            </summary>
            <value>
            The content of the test.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CachePerformanceTestResult.TotalMemory">
            <summary>
            Gets or sets the total memory.
            </summary>
            <value>
            The total memory.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CachePerformanceTestResult.Start">
            <summary>
            Gets or sets the start.
            </summary>
            <value>
            The start.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CachePerformanceTestResult.End">
            <summary>
            Gets or sets the end.
            </summary>
            <value>
            The end.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CachePerformanceTestResult.Elapsed">
            <summary>
            Gets the elapsed.
            </summary>
            <value>
            The elapsed.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CachePerformanceTestResult.BytesPerSecond">
            <summary>
            Gets the bytes per second.
            </summary>
            <value>
            The bytes per second.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CachePerformanceTestResult.Meaningfull">
            <summary>
            Gets a value indicating whether this <see cref="T:Digita.Tustena.Base.Caching.CachePerformanceTestResult"/> is meaningfull.
            </summary>
            <value>
              <c>true</c> if meaningfull; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.CachePerformanceTestResult.LoopsPerSecond">
            <summary>
            Gets the loops per second.
            </summary>
            <value>
            The loops per second.
            </value>
        </member>
        <member name="T:Digita.Tustena.Base.Caching.CacheProxy">
            <summary>
            The ICache proxy
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.ContainsKey(System.String)">
            <summary>
              Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.GetKeys">
            <summary>
              Gets the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.RemoveMultiple(System.String[])">
            <summary>
            Removes multiple items by key.
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.AddOrUpdate(System.String,System.Byte[],System.Nullable{System.DateTime})">
            <summary>
            Adds or update an item.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.AddOrUpdateGeneric``1(System.String,``0,System.Nullable{System.DateTime})">
            <summary>
            Adds or update an item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.GetValue(System.String)">
            <summary>
              Gets an item.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.RemoveExpired">
            <summary>
            Removes the expired items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.RemoveOldestItem">
            <summary>
            Removes the oldest item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.GetItemInfo(System.String)">
            <summary>
            Gets the item info.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.GetAllItemsInfo">
            <summary>
            Gets all items info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.GetValueGeneric``1(System.String)">
            <summary>
              Gets an item.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.GetCount">
            <summary>
            Gets the count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.GetTotalMemory">
            <summary>
            Gets the total bytes allocated into the storage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.GetItemsCreatedBeforeOrEqual(System.DateTime)">
            <summary>
            Returns the keys of the items created on date before or equal the given one
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.GetItemsRequestedBeforeOrEqual(System.DateTime)">
            <summary>
            Returns the keys of the items created on date before or equal the given one
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.GetNeverRequestedItems">
            <summary>
            Returns the keys of the items that have never been requested
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.SetItemTimeout(System.String,System.DateTime)">
            <summary>
            Sets the item timeout.
            </summary>
            <param name="key">The key.</param>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.GetItemTimeout(System.String)">
            <summary>
            Sets the item timeout.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.Remove(System.String)">
            <summary>
            Removes the item identified by the given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.ExecutePerformanceTest(System.Int32,System.Byte[])">
            <summary>
            Executes the performance test.
            </summary>
            <param name="loops">The loops.</param>
            <param name="testContent">Content of the test.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            The test content must not be null or empty;testContent
            or
            The loops count must be > 0;loops
            </exception>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.CacheProxy.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Digita.Tustena.Base.Caching.ICache">
            <summary>
            Define the basic structure of a cache
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.Flush">
            <summary>
              Flushes the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.ContainsKey(System.String)">
            <summary>
            Determines whether the cache contains the given key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the cache contains the key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.GetKeys">
            <summary>
            Gets the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.Remove(System.String)">
            <summary>
            Removes the item identified by the given key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.RemoveMultiple(System.String[])">
            <summary>
            Removes multiple items by key.
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.RemoveExpired">
            <summary>
            Removes the expired items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.AddOrUpdate(System.String,System.Byte[],System.Nullable{System.DateTime})">
            <summary>
            Adds or update an item.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.GetValue(System.String)">
            <summary>
              Gets an item.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.GetCount">
            <summary>
            Gets the count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.RemoveOldestItem">
            <summary>
            Removes the oldest item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.GetItemInfo(System.String)">
            <summary>
            Gets the item info.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.GetAllItemsInfo">
            <summary>
            Gets all items info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.GetTotalMemory">
            <summary>
            Gets the total bytes allocated into the storage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.GetItemsCreatedBeforeOrEqual(System.DateTime)">
            <summary>
            Returns the keys of the items created on date before or equal the given one
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.GetItemsRequestedBeforeOrEqual(System.DateTime)">
            <summary>
            Returns the keys of the items created on date before or equal the given one
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.GetNeverRequestedItems">
            <summary>
            Returns the keys of the items that have never been requested
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.SetItemTimeout(System.String,System.DateTime)">
            <summary>
            Sets the item timeout.
            </summary>
            <param name="key">The key.</param>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.ICache.GetItemTimeout(System.String)">
            <summary>
            Sets the item timeout.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.ICacheItemInfo.CreatedOn">
            <summary>
            Gets the creation date/time.
            </summary>
            <value>
            The creation date/time.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.ICacheItemInfo.LastRequestedOn">
            <summary>
            Gets the last request date/time.
            </summary>
            <value>
            The last request date/time.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.ICacheItemInfo.LastUpdatedOn">
            <summary>
            Gets the last update date/time.
            </summary>
            <value>
            The last update date/time.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.ICacheItemInfo.Timeout">
            <summary>
            Gets the expiration timeout.
            </summary>
            <value>
            The expiration timeout.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.ICacheItemInfo.MemorySize">
            <summary>
            Gets the size of the memory.
            </summary>
            <value>
            The size of the memory.
            </value>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.IGenericCache.GetValueGeneric``1(System.String)">
            <summary>
            Gets the value automatically deserializing it from the source bytes array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.IGenericCache.AddOrUpdateGeneric``1(System.String,``0,System.Nullable{System.DateTime})">
            <summary>
            Adds or update an istance automatically serializing it into a bytes array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Caching.IHasCacheProxyPerformanceTest.ExecutePerformanceTest(System.Int32,System.Byte[])">
            <summary>
            Executes the performance test.
            </summary>
            <param name="loops">The loops.</param>
            <param name="testContent">Content of the test.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            The test content must not be null or empty;testContent
            or
            The loops count must be > 0;loops
            </exception>
        </member>
        <member name="T:Digita.Tustena.Base.Caching.SmartCache">
            <summary>
            Smart cache handler
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.SmartCache.Proxy">
            <summary>
            Gets the cache proxy.
            </summary>
            <value>
            The cache proxy.
            </value>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.TemporaryDBCache`1.Note">
            <summary>
            any notes for debug
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.TemporaryDBCache`1.DefaultObject">
            <summary>
            The default object initializer
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.TemporaryDBCache`1.MinutesDuration">
            <summary>
            The duration of the Cache in Minutes
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Caching.TemporaryDBCache`1.Shared">
            <summary>
            if the record cache is accessible from several different user (UC.UserId)
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ErpConditionHelper.GetConditionListPrice(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Returns the PriceList (setted inside Company Condition Profile).
            If not exists condition, and the company is a SubLocation (Destination) the procedure fallback to ParentLocation Company
            </summary>
            <param name="id">the Key of the Anagraphic</param>
            <param name="type">the Type of Anagraphic. Currently is supported only Company type</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ErpConditionHelper.GetConditionTax(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Returns the FixedTax (setted inside Company Condition Profile).
            If not exists condition, and the company is a SubLocation (Destination) the procedure fallback to ParentLocation Company
            </summary>
            <param name="id">the Key of the Anagraphic</param>
            <param name="type">the Type of Anagraphic. Currently is supported only Company type</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ErpConditionHelper.GetConditionTaxId(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Returns the id of Tax (setted inside Company Condition Profile).
            If not exists condition, and the company is a SubLocation (Destination) the procedure fallback to ParentLocation Company
            </summary>
            <param name="id">the Key of the Anagraphic</param>
            <param name="type">the Type of Anagraphic. Currently is supported only Company type</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ErpConditionHelper.GetConditionAppearance(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Returns the Appearance (setted inside Company Condition Profile).
            If not exists condition, and the company is a SubLocation (Destination) the procedure fallback to ParentLocation Company
            </summary>
            <param name="id">the Key of the Anagraphic</param>
            <param name="type">the Type of Anagraphic. Currently is supported only Company type</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ErpConditionHelper.GetConditionPorto(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Returns the Porto (setted inside Company Condition Profile).
            If not exists condition, and the company is a SubLocation (Destination) the procedure fallback to ParentLocation Company
            </summary>
            <param name="id">the Key of the Anagraphic</param>
            <param name="type">the Type of Anagraphic. Currently is supported only Company type</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ErpConditionHelper.GetConditionCarrier(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Returns the Carrier (setted inside Company Condition Profile).
            If not exists condition, and the company is a SubLocation (Destination) the procedure fallback to ParentLocation Company
            </summary>
            <param name="id">the Key of the Anagraphic</param>
            <param name="type">the Type of Anagraphic. Currently is supported only Company type</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ErpConditionHelper.GetConditionShippedBy(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Returns the ShippedBy (setted inside Company Condition Profile).
            If not exists condition, and the company is a SubLocation (Destination) the procedure fallback to ParentLocation Company
            </summary>
            <param name="id">the Key of the Anagraphic</param>
            <param name="type">the Type of Anagraphic. Currently is supported only Company type</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ErpConditionHelper.GetConditionBank(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Returns the ShippedBy (setted inside Company Condition Profile).
            If not exists condition, and the company is a SubLocation (Destination) the procedure fallback to ParentLocation Company
            </summary>
            <param name="id">the Key of the Anagraphic</param>
            <param name="type">the Type of Anagraphic. Currently is supported only Company type</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ErpConditionHelper.GetConditionDiscountFormula(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Returns the DiscountFormula (setted inside Company Condition Profile).
            If not exists condition, and the company is a SubLocation (Destination) the procedure fallback to ParentLocation Company
            </summary>
            <param name="id">the Key of the Anagraphic</param>
            <param name="type">the Type of Anagraphic. Currently is supported only Company type</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ErpConditionHelper.GetConditionTaxDeducted(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Returns the PriceList (setted inside Company Condition Profile).
            If not exists condition, and the company is a SubLocation (Destination) the procedure fallback to ParentLocation Company
            </summary>
            <param name="id">the Key of the Anagraphic</param>
            <param name="type">the Type of Anagraphic. Currently is supported only Company type</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ErpConditionHelper.GetAvaliablePaymentList(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Returns only the Payments available (setted inside Company Condition Profile).
            If not exists condition, and the company is a SubLocation (Destination) the procedure fallback to ParentLocation Company
            </summary>
            <param name="id"></param>
            <param name="type"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.BaseHelper`1.CreateEnumerableHelperResult(System.String,System.Object[])">
            <summary>
            Passing a query with ID as bigint ad DESCRIPTION as string for result
            </summary>
            <param name="q"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.BaseHelper`1.CreateListHelperResult(Digita.Data.Sql.Fluent.SelectCommand.ISqlSortableIsEqualToFollower)">
            <summary>
            Passing a query with ID as bigint ad DESCRIPTION as string for result
            </summary>
            <param name="q"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ContractHelper.GetContractOfCompanyForCaller(System.Int64,System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Recupera i contratti associati ad un azienda
            </summary>
            <param name="companyId"></param>
            <param name="callerEntityId">id of BusinessObject </param>
            <param name="callerEntityType">type of BusinessObject</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ContractHelper.BuildQueryForGetContract">
            <summary>
            SELECT ID, CUSTOMERCODE+' - '+DESCRIPTION AS DESCRIPTION FROM CONTRACTSERVICE WHERE CONTRACTSERVICE.LIMBO=0
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ContractHelper.BuildQueryForGetService">
            <summary>
            SELECT ID, DESCRIPTION FROM CONTRACTTYPEOFSERVICE
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.JobOrderHelper.OrderJobOrderIdsByLevel(System.Int64[],System.Int64)">
            <summary>
            Orders jobOrderIds by JobOrder tree levele
            </summary>
            <param name="jobOrderIds">The JobOrder ids list</param>
            <returns>A list of JobOrder ids ordered by tree level (asending)</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.JobOrderHelper.FindDescendantsJobOrderIdsRecursive(System.Int64,System.Collections.Generic.List{System.Int64[]},System.Int64)">
            <summary>
            Finds the list of all ids of the descendants of the current JobOrder
            </summary>
            <param name="currentJobOrderId">The id of the current JobOrder</param>
            <param name="jobOrderChildParentCoupleIds">The list of arrays [id, parentJobOrderId] of all the JobOrders to be recursively processed</param>
            <returns>The list of all ids of the descendant of the current JobOrder. The first element of the list is the current JobOrder's id itself.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.JobOrderHelper.FindJobOrderLevelRecursive(System.Int64,System.Collections.Generic.List{System.Int64[]},System.Int64)">
            <summary>
            Finds the tree level of the given JobOrder
            </summary>
            <param name="currentJobOrderId">The id of the current JobOrder</param>
            <param name="jobOrderChildParentCoupleIds">The list of arrays [id, parentJobOrderId] of all the JobOrders to be recursively processed</param>
            <returns>The level (tree root level is zero) of the current JobOrder in the tree</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.JobOrderHelper.FindChildJobOrderWorkSumRecursive(System.Int64,System.Collections.Generic.List{System.Int64[]},System.Int64)">
            <summary>
            Calculate the sum of the already spent work for all the JobOrders descendant of the current JobOrder.
            </summary>
            <param name="currentJobOrderId">The ID of the current JobOrder</param>
            <param name="jobOrders">The list representing the set of all JobOrders to be processed</param>
            <param name="customerId">The CustomerID for the current JobOrder</param>
            <returns>The sum of the already spent work for all the JobOrders descendant of the current JobOrder</returns>        
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ActivityHelper.ImgType(System.Int32,System.Boolean)">
            <summary>
            The Icon Type. returning a DIV TAG with an unique image with the backgrounds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Helpers.ActivityHelper.ImgTypeSingle(Digita.Tustena.Core.Enums.ActivityType,System.Boolean)">
            <summary>
            The Icon Type. returning a IMG Tag with an unique image with the backgrounds
            </summary>
            <param name="aType"></param>
            <param name="ticket"> </param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Planning.ContractTaskPlanning.GetPlannings(System.Int32,System.Int32)">
            <summary>
            Get all planning dates of a specified week
            </summary>
            <param name="week"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Planning.ContractTaskPlanning.GetPlannings(System.DateTime,System.DateTime)">
            <summary>
            Return all planning date of a specified date range, splitted by Week
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Planning.ContractTaskPlanning.GetAllTaskPlanningConfig(System.DateTime,System.DateTime)">
            <summary>
            Retrive all config data for planning
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Portal.PortalAuthentication.RegeneratePassword(System.String,Tustena.Portal.Code.PortalUserConfig@)">
            <summary>
            regenerate a new password
            </summary>
            <param name="username"></param>
            <param name="puc"></param>
            <returns>Empty string = error (user not found)</returns>
        </member>
        <member name="T:Digita.Tustena.Base.CrossedSecurityParameter">
            <summary>
            Security applied to elements with CROSSID and CROSSTYPE link to Anagraphic (like Opportunity)
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrossedSecurityParameter.CrossTypeField">
            <summary>
            The column name for CROSSTYPE 
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrossedSecurityParameter.CrossField">
            <summary>
            The column name for CROSSID
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrossedSecurityParameter.SalesPersonType">
            <summary>
            The type of the object with is applied the security for SalePerson (visible only in assigned)
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrossedSecurityParameter.PreConditionTableInsert">
            <summary>
            Eventuals pre-conditions table insert in memory table (to increase DB performance)
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrossedSecurityParameter.CompanyPreConditionParameterName">
            <summary>
            The parameter name of PreConditionTableInsert for visibility of Company
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrossedSecurityParameter.ContactPreConditionParameterName">
            <summary>
            The parameter name of PreConditionTableInsert for visibility of Contact
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrossedSecurityParameter.LeadPreConditionParameterName">
            <summary>
            The parameter name of PreConditionTableInsert for visibility of Lead
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrossedSecurityParameter.CompanyWhereCondition">
            <summary>
            a sub where condition for company visibility
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrossedSecurityParameter.ContactWhereCondition">
            <summary>
            a sub where condition for contact visibility
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrossedSecurityParameter.LeadWhereCondition">
            <summary>
            a sub where condition for lead visibility
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrossedSecurityParameter.ApplyCompanyCondition">
            <summary>
            a sub where condition for company visibility
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrossedSecurityParameter.ApplyContactCondition">
            <summary>
            a sub where condition for contact visibility
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrossedSecurityParameter.ApplyLeadCondition">
            <summary>
            a sub where condition for lead visibility
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.StandardSecurityParameter.CustomTableName">
            <summary>
            The name of the table or of the view to apply Security
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.StandardSecurityParameter.AdditionalWhereCondition">
            <summary>
            Custom where condition to append to standard security
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.StandardSecurityParameter.SecurityCondition">
            <summary>
            The current security condition 
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.StandardSecurityParameter.FinalSecurityCondition">
            <summary>
            The SecurityCondition with the AdditionalWhereCondition 
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.TernarySecurityParameter">
            <summary>
            Security applied to elements with COMPANYID and CONTACTID and LEADID columns linked to Anagraphic (like Activity, Tickets, ecc..)
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.TernarySecurityParameter.CompanyIdField">
            <summary>
            The column name for CompanyId 
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.TernarySecurityParameter.ContactIdField">
            <summary>
            The column name for ContactId
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.TernarySecurityParameter.LeadIdField">
            <summary>
            The column name for LeadId
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.TernarySecurityParameter.BusinessObjectType">
            <summary>
            The type of the object with is applied the security for SalePerson (visible only in assigned)
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.TernarySecurityParameter.PreConditionTableInsert">
            <summary>
            Eventuals pre-conditions table insert in memory table (to increase DB performance)
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.TernarySecurityParameter.CompanyParameter">
            <summary>
            The parameter name of PreConditionTableInsert for visibility of Company
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.TernarySecurityParameter.ContactParameter">
            <summary>
            The parameter name of PreConditionTableInsert for visibility of Contact
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.TernarySecurityParameter.LeadParameter">
            <summary>
            The parameter name of PreConditionTableInsert for visibility of Lead
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.id">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.name">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.universalname">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.ticker">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.websiteurl">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.industry">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.description">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.logourl">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.squarelogourl">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.twitterid">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.foundedyear">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.numfollowers">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.companytype">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.status">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.employeecountrange">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.specialties">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.LinkedInCompany.locations">
            <remarks />
        </member>
        <member name="T:Digita.Tustena.Base.Social.companyCompanytype">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyCompanytype.code">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyCompanytype.name">
            <remarks />
        </member>
        <member name="T:Digita.Tustena.Base.Social.companyStatus">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyStatus.code">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyStatus.name">
            <remarks />
        </member>
        <member name="T:Digita.Tustena.Base.Social.companyEmployeecountrange">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyEmployeecountrange.code">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyEmployeecountrange.name">
            <remarks />
        </member>
        <member name="T:Digita.Tustena.Base.Social.companySpecialties">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companySpecialties.specialty">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companySpecialties.total">
            <remarks />
        </member>
        <member name="T:Digita.Tustena.Base.Social.companySpecialtiesSpecialty">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companySpecialtiesSpecialty.Value">
            <remarks />
        </member>
        <member name="T:Digita.Tustena.Base.Social.companyLocations">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyLocations.location">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyLocations.total">
            <remarks />
        </member>
        <member name="T:Digita.Tustena.Base.Social.companyLocationsLocation">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyLocationsLocation.address">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyLocationsLocation.contactinfo">
            <remarks />
        </member>
        <member name="T:Digita.Tustena.Base.Social.companyLocationsLocationAddress">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyLocationsLocationAddress.street1">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyLocationsLocationAddress.city">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyLocationsLocationAddress.postalcode">
            <remarks />
        </member>
        <member name="T:Digita.Tustena.Base.Social.companyLocationsLocationContactinfo">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyLocationsLocationContactinfo.phone1">
            <remarks />
        </member>
        <member name="P:Digita.Tustena.Base.Social.companyLocationsLocationContactinfo.fax">
            <remarks />
        </member>
        <member name="M:Digita.Tustena.Base.Social.SocialCompanyBOHandler.CompleteDataFromLinkedIn(Digita.Tustena.Base.Social.SocialLink,Digita.Tustena.Base.BusinessObjects.CompanyBO,System.Boolean)">
            <summary>
              Completes the company data from linked in.
            </summary>
            <param name="sl">The sl.</param>
            <param name="bo">The bo.</param>
            <param name="forceReload">
              if set to <c>true</c> [force reload].
            </param>
            <exception cref="T:System.ArgumentNullException">
              sl;Cannot complete company data from LinkedIn using a null social link
              or
              bo;Cannot complete company data from LinkedIn using a null company
            </exception>
        </member>
        <member name="M:Digita.Tustena.Base.Social.SocialCompanyBOHandler.CompleteDataFromFacebook(Digita.Tustena.Base.Social.SocialLink,Digita.Tustena.Base.BusinessObjects.CompanyBO,System.Boolean)">
            <summary>
              Completes the company data from facebook.
            </summary>
            <param name="sl">The sl.</param>
            <param name="bo">The bo.</param>
            <param name="forceReload">
              if set to <c>true</c> [force reload].
            </param>
            <exception cref="T:System.ArgumentNullException">
              sl;Cannot complete company data from Facebook using a null social link
              or
              bo;Cannot complete company data from Facebook using a null company
            </exception>
        </member>
        <member name="M:Digita.Tustena.Base.Social.SocialCompanyBOHandler.CompleteDataFromTwitter(Digita.Tustena.Base.Social.SocialLink,Digita.Tustena.Base.BusinessObjects.CompanyBO,System.Boolean)">
            <summary>
              Completes the company data from twitter.
            </summary>
            <param name="sl">The sl.</param>
            <param name="bo">The bo.</param>
            <param name="forceReload">
              if set to <c>true</c> [force reload].
            </param>
            <exception cref="T:System.ArgumentNullException">
              sl;Cannot complete company data from Twitter using a null social link
              or
              bo;Cannot complete company data from Twitter using a null company
            </exception>
        </member>
        <member name="T:Digita.Tustena.Base.Social.HammockJsonDotNetSerializer">
            <summary>
            Descrizione di riepilogo per Deserializer
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Social.Helper">
            <summary>
            Descrizione di riepilogo per helper
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Social.LinkedInGate.SearchCustomersKVP(System.String,System.String)">
            <summary>
              Searches the customers KVP.
            </summary>
            <param name="firstName">The first name.</param>
            <param name="lastName">The last name.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Social.LinkedInGate.SearchCustomersKVP(System.String)">
            <summary>
              Searches the customers KVP.
            </summary>
            <param name="keywords">The keywords.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Social.LinkedInGate.SearchCustomers(Digita.Tustena.Base.Social.LinkedInGate.CustomerSearchProfile)">
            <summary>
              Searches the customers KVP.
            </summary>
            <param name="profile">The profile.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Social.LinkedInGate.SearchCustomersKVP(Digita.Tustena.Base.Social.LinkedInGate.CustomerSearchProfile)">
            <summary>
              Searches the customers KVP.
            </summary>
            <param name="profile">The profile.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Ticket.TicketGrabber.IsAnnotateCapabilitySupportErrorDetected(System.Exception)">
            <summary> 
            Try to check the "ANNOTATE capability" issue occurring with some IMAP servers 
            (as for iCloud IMAP server that refuses the connection if the ANNOTATE
            capability is not removed from the client capabilities; this is a 
            documented issue of MailKit package, see: 
            https://github.com/jstedfast/MailKit/issues/970
            </summary>
            <param name="e">The current exception</param>
            <returns>A boolean</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Ticket.TicketGrabber.RemoveImapCapability(MailKit.Net.Imap.ImapCapabilities,MailKit.Net.Imap.ImapCapabilities)">
            <summary>
            Remove the given Capability from Capabilities         
            </summary>
            <param name="capabilities">The overall capabilities of the ImapClient</param>
            <param name="capabilityToBeRemoved">The capability to be removed</param>
            <returns>The new capabilities without the given capability</returns>
        </member>
        <member name="M:Digita.Tustena.Base.Ticket.TicketSLA.CheckForNewSLA(Digita.Tustena.Interfaces.BusinessObjects.ITicketBO)">
            <summary>
            Check if there is a SLA that can be started for the area and for the Company/Contact or Lead of the ticket
            </summary>
            <param name="bo"></param>
        </member>
        <member name="P:Digita.Tustena.Base.ViewStateDatabaseStoragePage.ViewStateKey">
            <summary>
            Current Page ViewState Key (__VIEWSTATE_KEY)
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.eu.europa.ec.checkVatService">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.eu.europa.ec.checkVatService.#ctor">
            <remarks/>
        </member>
        <member name="E:Digita.Tustena.Base.eu.europa.ec.checkVatService.checkVatCompleted">
            <remarks/>
        </member>
        <member name="E:Digita.Tustena.Base.eu.europa.ec.checkVatService.checkVatApproxCompleted">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.eu.europa.ec.checkVatService.checkVat(System.String@,System.String@,System.Boolean@,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.eu.europa.ec.checkVatService.checkVatAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.eu.europa.ec.checkVatService.checkVatAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.eu.europa.ec.checkVatService.checkVatApprox(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String,System.String,System.Boolean@,System.String@,Digita.Tustena.Base.eu.europa.ec.matchCode@,System.Boolean@,Digita.Tustena.Base.eu.europa.ec.matchCode@,System.Boolean@,Digita.Tustena.Base.eu.europa.ec.matchCode@,System.Boolean@,Digita.Tustena.Base.eu.europa.ec.matchCode@,System.Boolean@,Digita.Tustena.Base.eu.europa.ec.matchCode@,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.eu.europa.ec.checkVatService.checkVatApproxAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.eu.europa.ec.checkVatService.checkVatApproxAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.eu.europa.ec.checkVatService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.eu.europa.ec.matchCode">
            <remarks/>
        </member>
        <member name="F:Digita.Tustena.Base.eu.europa.ec.matchCode.Item1">
            <remarks/>
        </member>
        <member name="F:Digita.Tustena.Base.eu.europa.ec.matchCode.Item2">
            <remarks/>
        </member>
        <member name="F:Digita.Tustena.Base.eu.europa.ec.matchCode.Item3">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.eu.europa.ec.checkVatCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.eu.europa.ec.checkVatCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatCompletedEventArgs.countryCode">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatCompletedEventArgs.vatNumber">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatCompletedEventArgs.valid">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatCompletedEventArgs.name">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatCompletedEventArgs.address">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.countryCode">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.vatNumber">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderName">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderCompanyType">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderStreet">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderPostcode">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderCity">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.valid">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderAddress">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderNameMatch">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderNameMatchSpecified">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderCompanyTypeMatch">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderCompanyTypeMatchSpecified">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderStreetMatch">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderStreetMatchSpecified">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderPostcodeMatch">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderPostcodeMatchSpecified">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderCityMatch">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.traderCityMatchSpecified">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.eu.europa.ec.checkVatApproxCompletedEventArgs.requestIdentifier">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.AuthenticationPage.UC">
            <summary>
            This is the Page USerConfig inizialized during authentication. Can't be null.
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.Bit">
            <summary>
            Bit.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Bit.BitOn(System.Byte@,System.Byte)">
            <summary>
            active the bit (BitNumber) on number  sent with Byte
            </summary>
            <param name="byteContainer">The byte number that contains the bits</param>
            <param name="bitNumber">The position to change</param>
        </member>
        <member name="M:Digita.Tustena.Base.Bit.BitOn(System.UInt32@,System.Byte)">
            <summary>
            active the bit (BitNumber) on number  sent with Byte
            </summary>
            <param name="intContainer">The int number that contains the bits</param>
            <param name="bitNumber">The position to change</param>
        </member>
        <member name="M:Digita.Tustena.Base.Bit.BitOn(System.Int64@,System.Byte)">
            <summary>
            active the bit (BitNumber) on number  sent with Byte
            </summary>
            <param name="longContainer">The long number that contains the bits</param>
            <param name="bitNumber">The position to change</param>
        </member>
        <member name="M:Digita.Tustena.Base.Bit.BitOff(System.Byte@,System.Byte)">
            <summary>
            Turn off the bit (BitNumber) on number  sent with Byte
            </summary>
            <param name="byteContainer">The byte number that contains the bits</param>
            <param name="bitNumber">The position to change</param>
        </member>
        <member name="M:Digita.Tustena.Base.Bit.BitOff(System.Int32@,System.Byte)">
            <summary>
            Turn off the bit (BitNumber) on number  sent with Byte
            </summary>
            <param name="uIntContainer">The int number that contains the bits</param>
            <param name="bitNumber">The position to change</param>
        </member>
        <member name="M:Digita.Tustena.Base.Bit.BitOff(System.Int64@,System.Byte)">
            <summary>
            Turn off the bit (BitNumber) on number  sent with Byte
            </summary>
            <param name="longContainer">The long number that contains the bits</param>
            <param name="bitNumber">The position to change</param>
        </member>
        <member name="M:Digita.Tustena.Base.Bit.IsBitOn(System.Byte@,System.Byte)">
            <summary>
            Turn off the bit (BitNumber) on number  sent with Byte
            </summary>
            <param name="byteContainer">The long number that contains the bits</param>
            <param name="bitNumber">The position to change</param>
        </member>
        <member name="M:Digita.Tustena.Base.Bit.IsBitOn(System.Int32@,System.Byte)">
            <summary>
            Turn off the bit (BitNumber) on number  sent with Byte
            </summary>
            <param name="uIntContainer">The int number that contains the bits</param>
            <param name="bitNumber">The position to change</param>
        </member>
        <member name="M:Digita.Tustena.Base.Bit.IsBitOn(System.Int64@,System.Byte)">
            <summary>
            Verify if the bit identify from BitNumber is active
            </summary>
            <param name="longContainer">The int number that contains the bits</param>
            <param name="bitNumber">The position to change</param>
        </member>
        <member name="M:Digita.Tustena.Base.BasicAuthenticationModule.Init(System.Web.HttpApplication)">
            <summary>
            Inits the specified application.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="M:Digita.Tustena.Base.BasicAuthenticationModule.Application_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the application control.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Digita.Tustena.Base.BasicAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            Called when [authenticate request].
            </summary>
            <param name="source">The source.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Digita.Tustena.Base.BasicAuthenticationModule.BasicAuth(System.Web.HttpApplication,System.String,System.Boolean)">
            <summary>
            Basic Authentication
            </summary>
            <param name="app">The app.</param>
            <param name="authStr">auth string</param>
        </member>
        <member name="M:Digita.Tustena.Base.BasicAuthenticationModule.OnEndRequest(System.Object,System.EventArgs)">
            <summary>
            Called when [end request].
            </summary>
            <param name="source">The source.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Digita.Tustena.Base.LdapAuthentication">
            <summary>
            Ldap Authentication 
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.LdapAuthentication.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LdapAuthentication class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:Digita.Tustena.Base.LdapAuthentication.GetUserName">
            <summary>
            Gets the name of the user.
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="M:Digita.Tustena.Base.LdapAuthentication.GetUserGroups">
            <summary>
            Gets the user groups.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.LdapAuthentication.GetAllGroups">
            <summary>
            Gets all groups.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Base.BuildVersion.TustenaProductVersion">
            <summary>
            Gets the build version.
            </summary>
            <value>The build version.</value>
        </member>
        <member name="M:Digita.Tustena.Base.Invalidate.InvalidateList(Digita.Tustena.Core.Enums.ListsType,Digita.Tustena.Core.UserConfig,Digita.Tustena.Core.Enums.InvalidateOptions)">
            <summary>
            Invalidate List
            </summary>
            <param name="listsCategory"></param>
            <param name="uc"></param>
            <param name="skipBrowserNotification"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Invalidate.InvalidateList(Digita.Tustena.Core.Enums.ListsType,System.Int32,Digita.Tustena.Core.Enums.InvalidateOptions)">
            <summary>
            Invalidate List
            </summary>
            <param name="listsCategory"></param>
            <param name="customerId"></param>
            <param name="skipBrowserNotification"></param>
        </member>
        <member name="T:Digita.Tustena.Base.JSUtility.JQueryUIDatePickerHelper">
            <summary>
            Converts the .net supported date format current culture 
            format into JQuery Datepicker format.
            </summary>
            <param name="html">HtmlHelper object.</param>
            <returns>Format string that supported in JQuery Datepicker.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.EventExtensions.InitDll(System.String,System.String)">
            <summary>
            Inits the DLL for Extension.
            </summary>
            <param name="dllName">Name of the DLL.</param>
            <param name="action"></param>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.EventExtensions.InitCode(System.String,System.String,System.String[])">
            <summary>
            Inits the Code for the Extension.
            </summary>
            <param name="codeFile"></param>
            <param name="action"></param>
            <param name="references"></param>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.EventExtensions.InitModules(System.String)">
            <summary>
            Inits the modules Hashtable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.EventExtensions.Init(System.String)">
            <summary>
            EventExtensions inzializer
            EventExtensions.Init("CompanyMiniEdit").InvokeEvent("View", UC, Page, comBo);
            </summary>
            <param name="page">Page index/Name</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Exceptions.WebServiceException.RaiseException(System.Web.Services.WebService,System.String,System.Xml.XmlQualifiedName,System.Object,System.String)">
            <summary>
            Raises the exception.
            </summary>
            <param name="ws">The ws.</param>
            <param name="message">The message.</param>
            <param name="faultCode">The fault code.</param>
            <param name="nameSpace">The name space.</param>
            <param name="detailError">The detail error.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            ws;Cannot raise a SoapException for a null web service
            or
            detailError;Detail error must be NOT null
            </exception>
        </member>
        <member name="M:Digita.Tustena.Base.Exceptions.WebServiceException.RaiseException(System.Uri,System.String,Digita.Tustena.Base.Exceptions.WebServiceException.ErrorNumbers,System.String,Digita.Tustena.Base.Exceptions.WebServiceException.FaultCode,System.String)">
            <summary>
            Raises the exception.
            </summary>
            <param name="uri">The URI.</param>
            <param name="errorMessage">The error message.</param>
            <param name="errorNumber">The error number.</param>
            <param name="errorSource">The error source.</param>
            <param name="code">The code.</param>
            <param name="webServiceNamespace">The web service namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.HeaderManagerControl.RegisterJavascriptByHandler(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Wrap an inline javascript to a included js via an external handler
            </summary>
            <param name="c">the host control</param>
            <param name="persistentId">if null is temporary for the page lifecicle</param>
            <param name="jsCode">javascript code </param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.HeaderManagerControl.RegisterJavascriptByHandler(System.Web.UI.Page,System.String,System.Func{System.String})">
            <summary>
            Wrap an inline javascript to a included js via an external handler
            </summary>
            <param name="c">the host control</param>
            <param name="persistentId">if null is temporary for the page lifecicle</param>
            <param name="getJsCode">The function to retrieve the content </param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.HeaderManagerControl.ForceBrowserScriptCacheReload">
            <summary>
            Force the browsers to purge cache
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.HeaderManagerControl.Register(System.String,Digita.Tustena.Base.HeaderManagerControl.Mode)">
            <summary>
            Register the javascript or css file for page inclusion
            </summary>
            <param name="path">the relative url file path</param>
            <param name="mode">CSS or JS</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.HeaderManagerControl.AddToJavascriptBlock(System.Web.UI.Control,System.String,System.String,System.Boolean)">
            <summary>
            Add javascript to the page compacting it in the header
            </summary>
            <param name="control">The page control</param>
            <param name="key">Null to allow duplocation</param>
            <param name="innerText">The javascript block to insert in the page</param>
            <param name="inHead"></param>
        </member>
        <member name="M:Digita.Tustena.Base.HeaderManagerControl.AddToJavascriptBlockInHead(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Add javascript into the page and append the script in first part of AjaxedResponse
            </summary>
            <param name="pageControl"></param>
            <param name="key"></param>
            <param name="innerText"></param>
        </member>
        <member name="T:Digita.Tustena.Base.PerformanceTimer">
            <summary>
            Count elapsed time in the using statement writing it down to the Infobox
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.OrderCompare.Compare(System.Object,System.Object)">
            <summary>
            Compares the two values.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ERPRowsCompare.Compare(System.Object,System.Object)">
            <summary>
            Compares the length of two values.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ObjectPropertiesComparer`1.Compare(`0,`0)">
            <summary>
            This comparer is used to sort the generic comparer
            The constructor sets the PropertyName that is used
            by reflection to access that property in the object to 
            object compare.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ObjectFieldsComparer`1.Compare(`0,`0)">
            <summary>
            This comparer is used to sort the generic comparer
            The constructor sets the PropertyName that is used
            by reflection to access that property in the object to 
            object compare.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ObjectPropertyComparer`1.Compare(`0,`0)">
            <summary>
            This comparer is used to sort the generic comparer
            The constructor sets the PropertyName that is used
            by reflection to access that property in the object to 
            object compare.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Base.CrmBusinessObjects.UC">
            <summary>
            Cast UserConfig to Internal UserConfig
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.#ctor">
            <summary>
            Initializes a new instance of the CrmBusinessObjects class without parameters.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.#ctor(Digita.Tustena.Core.UserConfig,Digita.Tustena.Core.Enums.BusinessObjectType,Digita.Tustena.Core.Enums.BusinessObjectInvoker)">
            <summary>
            Initializes a new instance of the CrmBusinessObjects class with parameters.
            </summary>
            <param name="uc">The UC.</param>
            <param name="bot">The bot.</param>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.#ctor(Digita.Tustena.Core.UserConfig)">
            <summary>
            Initializes a new instance of the CrmBusinessObjects class with parameters.
            </summary>
            <param name="uc">The UC.</param>
        </member>
        <member name="P:Digita.Tustena.Base.CrmBusinessObjects.Invoker">
            <summary>
            Get the invoker procedure
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.CrmBusinessObjects.BusinessObject">
            <summary>
            Gets or sets the business object type.
            </summary>
            <value>The business object.</value>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.ClearPluginEvents">
            <summary>
            Clears the plugin events.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.ClearPluginEvents(Digita.Tustena.Core.Enums.Events)">
            <summary>
            Clears the plugin events with the exclude events.
            </summary>
            <param name="excludeEvents">The exclude events.</param>
        </member>
        <member name="P:Digita.Tustena.Base.CrmBusinessObjects.CreatedDate">
            <summary>
            Gets or sets the created date.
            </summary>
            <value>The created date.</value>
        </member>
        <member name="P:Digita.Tustena.Base.CrmBusinessObjects.LastModifiedDate">
            <summary>
            Gets or sets the last modified date.
            </summary>
            <value>The last modified date.</value>
        </member>
        <member name="P:Digita.Tustena.Base.CrmBusinessObjects.LastModifiedById">
            <summary>
            Gets or sets the last modified by id.
            </summary>
            <value>The last modified by id.</value>
        </member>
        <member name="P:Digita.Tustena.Base.CrmBusinessObjects.GeoLocalization">
            <summary>
            Gets or sets the geo localization.
            </summary>
            <value>The geo localization.</value>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.StringNullable(System.String)">
            <summary>
            Verify if strings is nullable.
            </summary>
            <param name="val">The value is string.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.NumericNullable(System.Int16)">
            <summary>
            Verify if Numerics is nullable.
            </summary>
            <param name="val">The value is short.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.ListNullable``1(System.Collections.Generic.List{``0})">
            <summary>
            Verify if Generic List is nullable.
            </summary>
            <param name="val">The value is the list.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.NumericNullable(System.Int32)">
            <summary>
            Numerics the nullable.
            </summary>
            <param name="val">The value is int</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.NumericNullable(System.Int64)">
            <summary>
            Numerics the nullable.
            </summary>
            <param name="val">The value is long.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.NumericNullable(System.Decimal)">
            <summary>
            Numerics the nullable.
            </summary>
            <param name="val">The value is decimal.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.NumericNullable(System.DateTime)">
            <summary>
            Numerics the nullable.
            </summary>
            <param name="val">The value is date.</param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Base.CrmBusinessObjects.ExternalReference">
            <summary>
            Gets or sets the an external reference to the object
            </summary>
            <value>The reference value.</value>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.UpdateIdentity(System.Object)">
            <summary>
            Updates the identity.
            </summary>
            <param name="newId">The new id.</param>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.HasChanged(Digita.Tustena.Interfaces.ICrmBusinessObjects)">
            <summary>
            Check if current BO is changed
            </summary>
            <param name="otherBo">Optional compare BO, default is OriginalBo</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.EventOnPreLoad(System.Int64)">
            <summary>
            Event the on pre load.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.EventOnPreSave">
            <summary>
            Event the on pre save.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.EventOnLoadComplete(Digita.Tustena.Core.RowElements)">
            <summary>
            Event the on load complete.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.EventOnSaveComplete">
            <summary>
            Event the on save complete.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.EventOnPreRuleEngine">
            <summary>
            Event the on pre rule engine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.EventOnCustomEvent(System.String,System.Object[])">
            <summary>
            Event the on custom event.
            </summary>
            <param name="action">The action.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Base.CrmBusinessObjects.ClientMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.EventOnPostRuleEngine">
            <summary>
            Event the on post rule engine.
            </summary>
            <returns></returns>        
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.EventOnPreValidate">
            <summary>
            Event the on pre validate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.EventOnDelete(System.Int64[])">
            <summary>
            Event the on delete.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.EventOnError">
            <summary>
            Event the on error.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.Load(System.Int64)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.LoadFull">
            <summary>
            Loads the Full object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.Save">
            <summary>
            Saves this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.Delete(Digita.Tustena.Interfaces.BoDeleteMode)">
            <summary>
            Deletes this instance. If the specified mode is not supported, a <see cref="T:System.NotSupportedException">NotSupportedException</see> is raised
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.Delete(System.Int64[])">
            <summary>
            Deletes the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.Token">
            <summary>
            Tokens this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.GetJsonBlock">
            <summary>
            Gets the json block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.CrmBusinessObjects.GetJsonHashTable">
            <summary>
            Gets the json hash table.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.DeleteChecked">
            <summary>
            Delete Object Checked
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.DeleteChecked.MultiDelete(System.Collections.Generic.List{System.Int64},System.String,System.String,System.String,Digita.Tustena.Database.DbSqlParameterCollection)">
            <summary>
            delete all objects selected with added conditions.
            </summary>
            <param name="ar">The array list</param>
            <param name="dbtable">The dbtable.</param>
            <param name="fieldId">The id of field selected </param>
            <param name="addedConditions">The other conditions.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DeleteChecked.MultiDelete(System.Collections.Generic.List{System.String},System.String,System.String,Digita.Tustena.Database.DbSqlParameterCollection)">
            <summary>
            delete all objects selected without conditions.
            </summary>
            <param name="ar">The array list</param>
            <param name="dbtable">The dbtable.</param>
            <param name="fieldId">The id of field selected </param>
        </member>
        <member name="M:Digita.Tustena.Base.DeleteChecked.MultiDelete(System.Collections.Generic.List{System.String},System.String,Digita.Tustena.Database.DbSqlParameterCollection)">
            <summary>
            delete all objects selected without conditions and fieldid.
            </summary>
            <param name="ar">The array list</param>
            <param name="dbtable">The dbtable.</param>
        </member>
        <member name="M:Digita.Tustena.Base.DeleteChecked.MultiDelete(System.Collections.Generic.List{System.String},System.String,System.Object[])">
            <summary>
            delete all objects selected without conditions and fieldid.
            </summary>
            <param name="ar">The array list</param>
            <param name="dbtable">The dbtable.</param>
        </member>
        <member name="M:Digita.Tustena.Base.DeleteChecked.MultiDeleteKid(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            delete all child objects selected.
            </summary>
            <param name="ar">The array list</param>
            <param name="dbtable">The dbtable.</param>
        </member>
        <member name="M:Digita.Tustena.Base.DeleteChecked.MultiLimbo(Digita.Tustena.Core.UserConfig,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            delete all child objects with Limbo=True.
            </summary>
            <param name="ar">The array list</param>
            <param name="dbtable">The dbtable.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DeleteChecked.Delete(System.Web.UI.WebControls.Repeater,System.String,System.String,System.String)">
            <summary>
            Delete the specified repeater
            </summary>
            <param name="rep">The repeater</param>
            <param name="id">The id</param>
            <param name="idcheck">The idcheck.</param>
            <param name="dbtable">The dbtable.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DigiErrorHandler.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the DigiErrorHandler class.
            Manage Error
            </summary>
            <param name="source">The source.</param>
            <param name="async"></param>
        </member>
        <member name="M:Digita.Tustena.Base.DigiErrorHandler.Dispose">
            <summary>
            Performs application-defined activities, such as releasing or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.DigiErrorHandler.GetErrorString(System.Exception)">
            <summary>
            Gets the error string.
            </summary>
            <param name="lastErrorInner">The last error inner.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DigiErrorHandler.Parse">
            <summary>
            Parses this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DigiErrorHandler.ErrorDump(System.Exception)">
            <summary>
            Error_dumps the specified exception.
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="F:Digita.Tustena.Base.EventPlugins._log">
            <summary>
            Reference to the logger
            </summary>
        </member>
        <member name="E:Digita.Tustena.Base.EventPlugins.InitDllCanLoadAssembly">
            <summary>
            Occurs when CanLoad.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.EventPlugins.OnInitDllCanLoadAssembly(Digita.Tustena.Base.EventPluginsCanLoadAssemblyFileArgs)">
            <summary>
            Raises the <see cref="E:Digita.Tustena.Base.EventPlugins.InitDllCanLoadAssembly"/> event.
            </summary>
            <param name="args">The <see cref="T:Digita.Tustena.Base.EventPluginsCanLoadAssemblyFileArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Digita.Tustena.Base.EventPlugins.Init(Digita.Tustena.Interfaces.ICrmBusinessObjects)">
            <summary>
            Inits the specified CRM Business Objects.
            </summary>
            <param name="crmBo">The CRM Business Objects.</param>
        </member>
        <member name="M:Digita.Tustena.Base.EventPlugins.InitDll(System.String)">
            <summary>
            Inits the DLL for Plugin.
            </summary>
            <param name="dllName">Name of the DLL.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.EventPlugins.InitCode(System.String)">
            <summary>
            Inits the Code for Plugin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.G.CheckGroup(System.String,System.String)">
            <summary>
            Create the sqlString query where condition to check groups dependency.
            </summary>
            <param name="table">Table name, if only one table is present, use null or blank.</param>
            <param name="dependency">Dependency.</param>
            <returns></returns>
        </member>
        <member name="P:Digita.Tustena.Base.G.GoBackViewState">
            <summary>
            Depends on GoBack class
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.G.AddKeepAlive">
            <summary>
            Keeps alive current session polling the server
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.G.AddKeepAliveAndLock(Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64)">
            <summary>
            Keeps alive current session polling the server and locking the database record
            </summary>
            <param name="type">The type of the element to lock</param>
            <param name="lockId">The id of the element to lock.</param>
        </member>
        <member name="M:Digita.Tustena.Base.G.OnDocumentReadyAdd(System.String,System.String,System.Boolean)">
            <summary>
            Concatenate all script that must be invoked in onload javascript page function
            This must be called before the OnPreRender of the Page
            </summary>
            <param name="key">the key of the script. Must be unique, otherwise will not be added</param>
            <param name="script">the script without $(document).ready(function(){}) prefix</param>
            <param name="onTop"></param>
            <returns><c>true</c> if the script is added, otherwise <c>false</c></returns>
        </member>
        <member name="M:Digita.Tustena.Base.G.OnDocumentReadyAdd(System.String,System.String,System.Int32)">
            <summary>
            Concatenate all script that must be invoked in onload javascript page function
            and execute the script with the passed delay.
            This must be called before the OnPreRender of the Page
            </summary>
            <param name="key">the key of the script. Must be unique, otherwise will not be added</param>
            <param name="script">the script without $(document).ready(function(){}) prefix</param>
            <param name="delay">the delay in millisecond for the execution of the script</param>
            <returns><c>true</c> if the script is added, otherwise <c>false</c></returns>
        </member>
        <member name="M:Digita.Tustena.Base.G.OnDocumentReadyRemove(System.String)">
            <summary>
            Remove the script added with the OnDocumentReadyAdd function.
            This must be called before the OnPreRender of the Page
            </summary>
            <param name="key">the key of the script to remove</param>
            <returns><c>true</c> if the script is removed, otherwise <c>false</c></returns>
        </member>
        <member name="M:Digita.Tustena.Base.G.SendError(System.String,System.String,System.Boolean)">
            <summary>
            Notify an error via Email.
            </summary>
            <param name="subject">subject.</param>
            <param name="body">body.</param>
            <param name="severe"></param>
        </member>
        <member name="M:Digita.Tustena.Base.G.GroupCompare(System.String)">
            <summary>
            Check users permissions again the element
            </summary>
            <param name="elementGroups"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.G.MakeVoipString(System.String)">
            <summary>
            Return the voip link with the new handler service
            </summary>
            <param name="number">the phone number</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.G.MakeVoipString(System.String,System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Return the voip link with the new handler service
            </summary>
            <param name="number">the phone number</param>
            <param name="crossId">entity id</param>
            <param name="crossType">entity type</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.G.MakeVoipString(System.String,Digita.Tustena.Core.UserConfig,System.Boolean)">
            <summary>
            Build the voip dial string
            </summary>
            <param name="ph">Phone number</param>
            <param name="uc">User Config</param>
            <param name="onlycallstring">Don't build the javascript part</param>
            <param name="timecount">Compute the call time, used in campaigns</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.G.MakeVoipString(System.String,Digita.Tustena.Core.UserConfig,System.Boolean,System.Boolean,System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType,System.Boolean)">
            <summary>
            Build the voip dial string
            </summary>
            <param name="ph">Phone number</param>
            <param name="uc">User Config</param>
            <param name="onlycallstring">Don't build the javascript part</param>
            <param name="timecount">Compute the call time, used in campaigns</param>
            <param name="crossId">Entity id</param>
            <param name="crossType">Entity Type</param>
            <param name="removePrefixDial"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.G.GetUnitMeasure(System.Int64)">
            <summary>
            Helper to resolve the unit from Id
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.G.GetName(Digita.Tustena.Core.UserConfig,System.Int64,Digita.Tustena.Core.Enums.GetNameFor)">
            <summary>
            Helper to resolve the entity name from Id
            </summary>
            <param name="uc">uc.</param>
            <param name="id">The id.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.NewGoBack">
            <summary>
            Still not implemented, probably never
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.GroupsFix.FixGroups(System.String,System.String)">
            <summary>
            Fix the groups.
            </summary>
            <param name="oldId">The old id.</param>
            <param name="newId">The new id.</param>
        </member>
        <member name="M:Digita.Tustena.Base.GroupsFix.FixPipe">
            <summary>
            Fixes the pipe.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.GroupsFix.FixActivityGroups(System.Int64)">
            <summary>
            Fix the activity groups.
            </summary>
            <param name="ownerid">The ownerid.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.GroupsFix.RefreshGroupsByUser">
            <summary>
            Refresh the group of the users.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.GroupsFix.CatchMissingGroups">
            <summary>
            Catch the missing groups.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.GUserControl.FillControl">
            <summary>
            Replacement for Page_Load fired by visible=true.
            Use IsFilled to avoid double init es: if(!Base.IsFilled){}
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.GUserControl.OnPreRenderVisible(System.EventArgs)">
            <summary>
            Fires only if the control is visible before onPreRender.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Digita.Tustena.Base.GUserControl.GetContextElements(System.String)">
            <summary>
            Gets the context elements.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.GUserControl.ContextElementsAdd(System.String,System.Object)">
            <summary>
            Add the Context elements.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Digita.Tustena.Base.GUserControl.ContextElementsAddOrUpdate(System.String,System.Object)">
            <summary>
            Add or update the Context elements.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Digita.Tustena.Base.HashAuthentication.GetIdFromHash(System.String)">
            <summary>
            Get the id from hash.
            </summary>
            <param name="hash">The hash.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.HashAuthentication.AutenticateFromHash(System.Int32,System.String)">
            <summary>
            Autenticate from hash.
            </summary>
            <param name="userId">The user id.</param>
            <param name="hash">The hash.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.HashAuthentication.GetHashAuthString(System.Int32)">
            <summary>
            Get the hash from authentication string.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.HashAuthentication.GetMyAutenticationString(System.Int32)">
            <summary>
            Get my autentication string.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.HashAuthentication.GetAutentication(System.String)">
            <summary>
            Get the autentication from hash.
            </summary>
            <param name="hash">The hash.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.InitTests.CheckDbStatus(Digita.Tasking.ITaskReport)">
            <summary>
            Check the system status for manage error message.
            </summary>
            <param name="report">The error.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.InitTests.CheckSystemStatus(Digita.Tasking.ITaskReport)">
            <summary>
            Check the system status for manage error message.
            </summary>
            <param name="report">The error.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.InitTests.FromSingleToMultitier">
            <summary>
            Migration procedure for old SigneTier architecture. Tustena Before V9
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.ListManager.#ctor(System.Int64,Digita.Tustena.Core.UserConfig)">
            <summary>
            Initializes a new instance of the ListManager class.
            </summary>
            <param name="listid">The listid.</param>
            <param name="uc">The UC.</param>
        </member>
        <member name="M:Digita.Tustena.Base.ListManager.RefreshAllCampaignOfTheList(Digita.Tustena.Interfaces.BusinessObjects.IChangeList)">
            <inheritdoc />
        </member>
        <member name="M:Digita.Tustena.Base.ListManager.RefreshChangelistOfSpecificCampaign(System.Int64,Digita.Tustena.Interfaces.BusinessObjects.IChangeList)">
            <inheritdoc />
        </member>
        <member name="M:Digita.Tustena.Base.ListManager.AllElement(Digita.Tustena.Core.Enums.ListChanges)">
            <inheritdoc />
        </member>
        <member name="M:Digita.Tustena.Base.ListManager.InsertElements(System.Int64[],Digita.Tustena.Core.Enums.BusinessObjectType)">
            <inheritdoc />
        </member>
        <member name="M:Digita.Tustena.Base.ListManager.InsertElements(System.Collections.Generic.List{System.Int64},Digita.Tustena.Core.Enums.BusinessObjectType)">
            <inheritdoc />
        </member>
        <!-- Badly formed XML comment ignored for member "M:Digita.Tustena.Base.ListManager.SearchElementInLists(Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64,Digita.Tustena.Core.UserConfig)" -->
        <member name="M:Digita.Tustena.Base.LockEntityService.HaveActiveLock(Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64)">
            <summary>
            Have the active lock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.LockEntityService.IsLockedFrom(Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64)">
            <summary>
            Determines whether is locked from the specified tableid.
            </summary>
            <param name="tableid">The tableid.</param>
            <param name="rowid">The rowid.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.LockEntityService.IsLockedPageFrom(Digita.Tustena.Core.Enums.SecurityPageMenu)">
            <summary>
                   
            </summary>
            <param name="tableid"></param>
            <param name="rowid"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.LockEntityService.DeleteExpiredLock">
            <summary>
            Delete the expired lock.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Opt.GetToken(Digita.Tustena.Interfaces.ICrmBusinessObjects,System.Nullable{System.TimeSpan})">
            <summary>
            Get the token.
            </summary>
            <param name="bo">Type of the Business Object.</param>
            <param name="validity">Validity of Token.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.PersistentContext.GetContextElements(System.String)">
            <summary>
            Get the context elements.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.PersistentContext.ContextElementsAdd(System.String,System.Object)">
            <summary>
            Add the elements in the context.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Digita.Tustena.Base.Precompile._log">
            <summary>
            Reference to the logger
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.ProtocolCode.ProtocolActive(Digita.Tustena.Core.UserConfig)">
            <summary>
            active the Protocol.
            </summary>
            <param name="uc">The UC.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ProtocolCode.ProtocolActiveAndNotEditable(Digita.Tustena.Core.UserConfig)">
            <summary>
            active the Protocol.
            </summary>
            <param name="uc">The UC.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ProtocolCode.ProtocolCommercialActive(Digita.Tustena.Core.UserConfig)">
            <summary>
            active the Protocol.
            </summary>
            <param name="uc">The UC.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ProtocolCode.ProtocolInMail(System.String,Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64)">
            <summary>
            active Protocol  in the mail.
            </summary>
            <param name="htmlBody">The HTML body.</param>
            <param name="botype">The botype.</param>
            <param name="crossid">The crossid.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ProtocolCode.GetProtocol(Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64)">
            <summary>
            Get the protocol from Db.
            </summary>
            <param name="botype">The botype.</param>
            <param name="crossid">The crossid.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ProtocolCode.GetProtocol(Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64,System.Boolean@,System.DateTime@)">
            <summary>
            Get the protocol from Db.
            </summary>
            <param name="botype">The botype.</param>
            <param name="crossid">The crossid.</param>
            <param name="income">if the protocol is setted as incoming or outcoming</param>
            <param name="createdDate">the date of creation of the protocol</param>
            <returns>the protocol</returns>
        </member>
        <member name="M:Digita.Tustena.Base.ProtocolCode.SetProtocol(Digita.Tustena.Core.UserConfig,Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64,System.String,System.Boolean)">
            <summary>
            Set the protocol in Db.
            </summary>
            <param name="botype">The botype.</param>
            <param name="crossid">The crossid.</param>
            <param name="protocol">The protocol.</param>
            <param name="income">if the protocol in In out Out type.</param>
        </member>
        <member name="M:Digita.Tustena.Base.ProtocolCode.GetNextCode(Digita.Tustena.Core.UserConfig,Digita.Tustena.Core.Enums.BusinessObjectType,System.Boolean,System.Object)">
            <summary>
            Get the next code of the protocol.
            </summary>
            <param name="uc">The UC.</param>
            <param name="botype">The botype.</param>
            <param name="income">if set to <c>true</c> [income].</param>
            <param name="param">The param.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ProtocolCode.IsActiveForThisType(Digita.Tustena.Core.Enums.ActivityType,Digita.Tustena.Core.UserConfig)">
            <summary>
            Determines whether type is active for.
            </summary>
            <param name="p">The type</param>
            <param name="uc">The User Config</param>
            <returns>
            	<c>true</c> if [is active for this type] [the specified p]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Base.Purge.AfterMultiMerge(Digita.Tustena.Core.Enums.BusinessObjectType,Digita.Tustena.Core.Enums.BusinessObjectType,System.Int64[],System.Int64)">
            <summary>
            After the merge of the Business Object (ex. Leads, Contact).
            </summary>
            <param name="typ">The typ.</param>
            <param name="intList">The int list.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Purge.AfterMerge(Digita.Tustena.Core.Enums.BusinessObjectType,System.Int32[],System.Int32)">
            <summary>
            After the merge of the Business Object (ex. Leads, Contact).
            </summary>
            <param name="typ">The typ.</param>
            <param name="intList">The int list.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Recent.LoadRecentItems(System.Int32)">
            <summary>
            Load the recent items by User id.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Recent.RemoveItems(System.Int64[],Digita.Tustena.Core.Enums.RecentType)">
            <summary>
            Remove recent items in the array.
            </summary>
            <param name="ar">The ar.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Recent.RemoveItem(System.Int32,Digita.Tustena.Core.Enums.RecentType)">
            <summary>
            Remove recent items selected.
            </summary>
            <param name="record">The record.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Recent.AddItem(System.Int32,System.String,System.Int64,Digita.Tustena.Core.Enums.RecentType,Digita.Tustena.Core.Enums.RecentMode)">
            <summary>
            Add the item.
            </summary>
            <param name="userId">The user id.</param>
            <param name="text">The text.</param>
            <param name="record">The record.</param>
            <param name="type">The type.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Recent.GetRecentIdFor(System.Int32,Digita.Tustena.Core.Enums.RecentType)">
            <summary>
            Get the recent id for the rtype.
            </summary>
            <param name="userid">The userid.</param>
            <param name="rtype">The rtype.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Recent.GotoRecent(System.Int64,Digita.Tustena.Core.Enums.RecentType)">
            <summary>
            Go to the recent item.
            </summary>
            <param name="id">The id.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Recent.SaveRecentActivity(System.String,System.Int64,Digita.Tustena.Core.Enums.ActivityType)">
            <summary>
            Save the recent activity.
            </summary>
            <param name="subject">The subject.</param>
            <param name="id">The id.</param>
            <param name="typeInt">The type int.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Recurrence.Remind(System.Int32,System.DateTime)">
            <summary>
            Active Remind with the specified id.
            </summary>
            <param name="id">The id.</param>
            <param name="startDate">The start date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Recurrence.Remind(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Active Remind with the specified id by Date.
            </summary>
            <param name="id">The id.</param>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Recurrence.RemindScheduler(System.Int64,System.Boolean)">
            <summary>
            Find the next Date, where the recurrence will be launched...
            </summary>
            <param name="id">Scheduler ID</param>
            <param name="useTransaction"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Recurrence.Remind(System.Int64,System.DateTime,System.DateTime,System.Data.DataTable,System.Boolean)">
            <summary>
            Active Remind with the specified id by Date in Datatable.
            </summary>
            <param name="id">The id.</param>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="dt">The dt.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Recurrence.Remind(System.DateTime,System.DateTime,Digita.Tustena.Base.BusinessObjects.Recurrence,System.Boolean)">
            <summary>
            Active Remind with the specified id by BO.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="bo">The business object.</param>
            <param name="transformToLocal">if set to <c>true</c> [transform to local].</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Recurrence.RWeekly(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Creates the weekly recurrences inside the ArrayList returnDates
            </summary>
            <param name="startDate">The weekly recurrence period start date (may be different from the first selected recurring day in the week)</param>
            <param name="endDate">The weekly recurrence period end date (may be different from the last selected recurring day in the week)</param>
            <param name="weekDays">Bitmask representing the selected days inside the week; for ex: 0100001 represents the selection for Monday (2^0) and Friday (2^5)</param>        
        </member>
        <member name="M:Digita.Tustena.Base.Recurrence.IsCelebration(System.DateTime,System.String@)">
            <summary>
            Check if the date is a Celebration.
            </summary>
            <param name="dt">The dt.</param>
            <param name="descr">The descr.</param>
            <returns>
            	<c>true</c> if the specified dt is celebration; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Base.Recurrence.GetEasterSunday(System.Int32)">
            <summary>
            Check if the date is the easter sunday.
            </summary>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Recurrence.DeleteRecurrence(System.Int32)">
            <summary>
            Delete the recurrence selected.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Digita.Tustena.Base.RedirectUrl.GoToUrl(Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Redirect to URL by Business Object. will be in the blank Page.
            </summary>
            <param name="bot">The bot.</param>
        </member>
        <member name="M:Digita.Tustena.Base.RedirectUrl.GoToUrl(Digita.Tustena.Core.Enums.BusinessObjectType,System.Object)">
            <summary>
            Redirect to URL by Business Object. will be in the blank Page.
            </summary>
            <param name="bot">The bot.</param>
            <param name="data">Additional Data</param>
        </member>
        <member name="M:Digita.Tustena.Base.RedirectUrl.GoToUrl(Digita.Tustena.Core.Enums.BusinessObjectType,System.Object,System.Boolean,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirect to URL by Business Object. will be in the blank Page.
            </summary>
            <param name="bot">The bot.</param>
            <param name="data">Additional Data</param>
            <param name="unFrame"></param>
            <param name="queryString"></param>
        </member>
        <member name="M:Digita.Tustena.Base.RedirectUrl.GoToUrl(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType)">
            <summary>
            Redirect to URL by Business Object.
            </summary>
            <param name="openId">The open id.</param>
            <param name="bot">The bot.</param>
        </member>
        <member name="M:Digita.Tustena.Base.RedirectUrl.GoToUrl(System.Int64,Digita.Tustena.Core.Enums.BusinessObjectType,System.Boolean,System.Collections.Specialized.NameValueCollection,System.Boolean,Digita.Tustena.Core.UserConfig)">
            <summary>
            Redirect to URL by Business Object.
            </summary>
            <param name="openId">The open id.</param>
            <param name="bot">The bot.</param>
            <param name="unFrame">Remove navigation context to allow embedding </param>
            <param name="queryString"></param>
            <param name="direct"></param>
        </member>
        <member name="M:Digita.Tustena.Base.RedirectUrl.GoToPage(Digita.Tustena.Core.Enums.BusinessObjectType,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirect to the BO relative page withoud opened id
            </summary>
            <param name="bot"></param>
        </member>
        <member name="M:Digita.Tustena.Base.RedirectUrl.CreateLinkToPage(Digita.Tustena.Core.Enums.BusinessObjectType,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirect to the BO relative page withoud opened id
            </summary>
            <param name="bot"></param>
        </member>
        <member name="M:Digita.Tustena.Base.RedirectUrl.Redirect(System.String,System.Boolean)">
            <summary>
            Redirect Url Check Ajaxed
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Digita.Tustena.Base.RenderUserControlToString.RenderUserControl(System.String,System.Object)">
            <summary>
            Render the user control to a string.
            </summary>
            <param name="path">The path.</param>
            <param name="dataSource">The data source.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.RenderUserControlToString.RenderUserControl(System.String,System.Collections.Hashtable)">
            <summary>
            Render the user control by hashtable.
            </summary>
            <param name="path">The path.</param>
            <param name="parametersToSet">The parameters to set.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.RenderUserControlToString.RenderUserControl(System.String,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Render the user control by hashtable with Properties.
            </summary>
            <param name="path">The path.</param>
            <param name="parametersToSet">The parameters to set.</param>
            <param name="ignoreMissingProperties">if set to <c>true</c> [ignore missing properties].</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.RijndaelEncDec">
            <summary>
            
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.RijndaelEncDec.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypt a byte array into a byte array using a key and an IV 
            </summary>
            <param name="clearData">The clear data.</param>
            <param name="key">The key.</param>
            <param name="iv">The IV.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.RijndaelEncDec.Encrypt(System.String,System.String)">
            <summary>
            Encrypt the specified clear text using a password.
            </summary>
            <param name="clearText">The clear text.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.RijndaelEncDec.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypt the specified clear data using a password.
            </summary>
            <param name="clearData">The clear data.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.RijndaelEncDec.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypt a file into another file using a password.
            </summary>
            <param name="fileIn">The file in.</param>
            <param name="fileOut">The file out.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Digita.Tustena.Base.RijndaelEncDec.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypt a byte array into a byte array using a key and an IV.
            </summary>
            <param name="cipherData">The cipher data.</param>
            <param name="key">The key.</param>
            <param name="iv">The IV.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.RijndaelEncDec.Decrypt(System.String,System.String)">
            <summary>
            Decrypt a string into a string using a password. Uses Decrypt(byte[], byte[], byte[]) 
            </summary>
            <param name="cipherText">The cipher text.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.RijndaelEncDec.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypt bytes into bytes using a password. Uses Decrypt(byte[], byte[], byte[]).
            </summary>
            <param name="cipherData">The cipher data.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.RijndaelEncDec.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypt a file into another file using a password.
            </summary>
            <param name="fileIn">The file in.</param>
            <param name="fileOut">The file out.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.GetPhysicalPath(System.Int64,Digita.Tustena.Core.UserConfig)">
            <summary>
            Get the path of the file in DataStorage
            </summary>
            <param name="fileId"></param>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.GetPhysicalPath(System.Int64,System.String@,Digita.Tustena.Core.UserConfig)">
            <summary>
            Get the path of the file in DataStorage
            </summary>
            <param name="fileId"></param>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.Download(System.String,System.Int32)">
            <summary>
            Standard HTTP download method.
            </summary>
            <param name="filename">The filename.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.Download(System.String,System.String,System.Int32)">
            <summary>
            Standard HTTP download method.
            </summary>
            <param name="filePath">The filename.</param>
            <param name="realFilename">The downloaded archive filename.</param>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.Download(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Standard HTTP download method.
            </summary>
            <param name="filePath">The filename.</param>
            <param name="realFilename">The downloaded archive filename.</param>
            <param name="userId">The user id.</param>
            <param name="zip">if set to <c>true</c> will compress the file.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.DownloadText(System.String,System.String)">
            <summary>
            Downloads the specified string as txt file.
            </summary>
            <param name="strValue">The string to download</param>
            <param name="filename">The filename to download</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.DownloadStream(System.IO.Stream,System.String)">
            <summary>
            Downloads the specified string as txt file.
            </summary>
            <param name="stream">The stream to download</param>
            <param name="filename">The filename to download</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.DownloadData(System.Byte[],System.String)">
            <summary>
            Downloads the specified string as txt file.
            </summary>
            <param name="data">The byte[] to download</param>
            <param name="filename">The filename to download</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.Download(System.String[],System.String,System.Int32,System.Boolean)">
            <summary>
            Downloads the specified files path.
            </summary>
            <param name="filesPath">The files path. With more than 1 is automatically zipped</param>
            <param name="realFilename">The downloaded archive filename.</param>
            <param name="userId">The user id.</param>
            <param name="zip">if set to <c>true</c> will compress the file.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.IsDownloadAllowed(System.Int64,Digita.Tustena.Core.UserConfig)">
            <summary>
            Determines whether is download allowed for the specified id.
            </summary>
            <param name="id">The id.</param>
            <param name="uc">The UC.</param>
            <returns>
            	<c>true</c> if [is download allowed] [the specified id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.IsFileShared(System.Int64,Digita.Tustena.Core.UserConfig)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.GetFileSharedId(System.Int64,Digita.Tustena.Core.UserConfig)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.IsDownloadAllowedInternal(System.Int64,Digita.Tustena.Core.UserConfig)">
            <summary>
            Check permission on download file without sharing permission
            </summary>
            <param name="id"></param>
            <param name="uc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.DownloadToken(System.Int64,Digita.Tustena.Core.UserConfig,System.String,System.String,System.Int32)">
            <summary>
            Generate a download token to use on http://[server]/download.aspx?token=[token]
            </summary>
            <param name="id">The file id.</param>
            <param name="uc">The UserConfig.</param>
            <param name="guidName"></param>
            <param name="filename">The real filename.</param>
            <param name="expireInMinutes">The token expire time in minutes.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.LogDownloadFile(System.Int32,System.String)">
            <summary>
            Write a log line for the downloaded file.
            </summary>
            <param name="userId">The user id.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.LogDownloadSize(System.Int32,System.Int64)">
            <summary>
            [not implemented] Log the user download volume
            </summary>
            <param name="userId">The user id.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Digita.Tustena.Base.DownloadManager.LogUploadSize(System.Int32,System.Int64)">
            <summary>
            [not implemented] Log the user upload volume
            </summary>
            <param name="userId">The user id.</param>
            <param name="size">The size.</param>
        </member>
        <member name="T:Digita.Tustena.Base.RuleEngineGo.InfoPostProcessEmail">
            <summary>
            Internal class to save information about email.
            </summary>
        </member>
        <member name="T:Digita.Tustena.Base.RuleEngineGo.RuleBOHistory">
            <summary>
            Classe interna RuleBOHistory che identifica una regola.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.RuleEngineGo.RuleBOHistory.IsEquals(Digita.Tustena.Base.RuleEngineGo.RuleBOHistory)">
            <summary>
            Metodo privato per capire se due regole sono uguali.
            Due regole sono uguali se hanno lo stesso BO e almeno un nodo XML uguale.
            </summary>
            <param name="obj">Oggetto di confronto</param>
            <returns>true se BO uguale e almeno un node xml in comune, altrimenti false.</returns>
        </member>
        <member name="T:Digita.Tustena.Base.RuleEngineGo.StackDetectorMutualRecursion">
            <summary>
            Classe StackDetectorMutualRecursion che è uno Stack e serve a controllare le chiamate ricorsive in CheckRule.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.RuleEngineGo.StackDetectorMutualRecursion.isInside(Digita.Tustena.Base.RuleEngineGo.RuleBOHistory)">
            <summary>
            Metodo isInside che indica se un oggetto di tipo RuleBOHistory è dentro lo stack.
            </summary>
            <param name="x">Oggeto RuleBOHistory da trovare</param>
            <returns>true se x è dentro lo stack, altrimenti false.</returns>
        </member>
        <member name="M:Digita.Tustena.Base.RuleEngineGo.ApplyGamification(Digita.Tustena.Interfaces.IRuleBusinessObject)">
            <summary>
            
            </summary>
            <param name="bo"></param>
        </member>
        <member name="M:Digita.Tustena.Base.Security.CheckPermission(Digita.Tustena.Core.Enums.BusinessObjectType,Digita.Tustena.Core.UserConfig,System.String@,System.Int64)">
            <summary>
            Checks the permission of the Business Object selected.
            </summary>
            <param name="type">The type.</param>
            <param name="uc">The UC.</param>
            <param name="owner">The owner.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Security.QuerySecureCrossed(Digita.Tustena.Core.UserConfig,System.String,System.String,System.String,System.String,Digita.Tustena.Base.Security.SecurityOptions,System.Nullable{Digita.Tustena.Core.Enums.BusinessObjectType},System.Collections.Generic.List{System.String})">
            <summary>
            Create Query crosse secure.
            </summary>
            <param name="uc">The UC.</param>
            <param name="customTableName">Name of the custom table.</param>
            <param name="whereConditions">The where conditions.</param>
            <param name="crossTypeField">The cross type field.</param>
            <param name="crossField">The cross field.</param>
            <param name="exclusionOptions">The exclusion options.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Security.QuerySecureActivity(Digita.Tustena.Core.UserConfig,System.String,System.String,Digita.Tustena.Base.Security.SecurityOptions)">
            <summary>
            Create Query activity secure.
            </summary>
            <param name="uc">The UC.</param>
            <param name="customTableName">Name of the custom table.</param>
            <param name="whereConditions">The where conditions.</param>
            <param name="exclusionOptions">The exclusion options.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Security.QuerySecureActivity(Digita.Tustena.Core.UserConfig,System.String,System.String,Digita.Tustena.Base.Security.SecurityOptions,System.Collections.Generic.List{System.String})">
            <summary>
            Create Query activity secure.
            </summary>
            <param name="uc">The UC.</param>
            <param name="customTableName">Name of the custom table.</param>
            <param name="whereConditions">The where conditions.</param>
            <param name="exclusionOptions">The exclusion options.</param>
            <param name="preConditionTableInsert"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Security.PrivateQuerySecure(Digita.Tustena.Core.UserConfig,Digita.Tustena.Core.Enums.CRMTables,System.String,System.String,Digita.Tustena.Base.Security.SecurityOptions,System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Create  Private Query secure.
            </summary>
            <param name="uc">The UC.</param>
            <param name="table">The table.</param>
            <param name="customTableName">Name of the custom table.</param>
            <param name="whereConditions">The where conditions.</param>
            <param name="exclusionOptions">The exclusion options.</param>
            <param name="ownerField">The owner field.</param>
            <param name="forceGroup">if set to <c>true</c> [force group].</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Security.GroupsSecure(System.String,Digita.Tustena.Core.UserConfig)">
            <summary>
            Group the secure.
            </summary>
            <param name="column">The column.</param>
            <param name="uc">The UC.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Security.CompanyIdCheck(Digita.Tustena.Core.UserConfig,Digita.Tustena.Core.Enums.CRMTables)">
            <summary>
            For internal use only
            </summary>
            <param name="uc"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="F:Digita.Tustena.Base.TCache.NoAbsoluteExpiration">
            <summary>
            Used in the absoluteExpiration parameter in a call method System.Web.Caching.Cache.Insert(System.String,System.Object)
            to indicate that it is necessary that the element has no expiration.
            This field is read-only
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.TCache.NoSlidingExpiration">
            <summary>
            Used in the slidingExpiration parameter in a call method ystem.Web.Caching.Cache.Insert(System.String,System.Object)
                o System.Web.Caching.Cache.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)
            to disable the variable time.
            This field is read-only
            </summary>
        </member>
        <member name="F:Digita.Tustena.Base.TCache.cacheItem">
            <summary>
            inizialies a new istance of the class System.Web.Caching.Cache.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.TCache.Cache">
            <summary>
            /// inizialies a new istance of the class TCache
            </summary>
            <value>The cache.</value>
        </member>
        <member name="P:Digita.Tustena.Base.TCache.Count">
            <summary>
            Retrieves the number of cached items. Return the numder of the elements stored in the cache
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Digita.Tustena.Base.TCache.Item(System.String)">
            <summary>
            Retrieves or sets the cache entry with the specified key.
            Object System.String that is the key for an element in the cache.
            cache entry specified 
            </summary>
            <value></value>
        </member>
        <member name="M:Digita.Tustena.Base.TCache.Store">
            <summary>
            Store this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.TCache.StoreNow">
            <summary>
            Store the istance now.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.TCache.Add(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            Add the object in the cache.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="absoluteExpiration">The absolute expiration.</param>
            <param name="slidingExpiration">The sliding expiration.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.TCache.AddToExpires(System.String,System.DateTime)">
            <summary>
            Add the object in the cache with parameter to expires.
            </summary>
            <param name="key">The key.</param>
            <param name="expires">The expires.</param>
        </member>
        <member name="M:Digita.Tustena.Base.TCache.UpdateToExpires(System.String,System.DateTime)">
            <summary>
            Update the object in the cache with parameter to expires.
            </summary>
            <param name="key">The key.</param>
            <param name="expires">The expires.</param>
        </member>
        <member name="M:Digita.Tustena.Base.TCache.Get(System.String)">
            <summary>
            Retrive the specified element from System.Web.Caching.Cache.
            Key is the Identifier for the cache entry to retrieve.
            The value is the cache element retrieved or null if is impossibile find the key
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.TCache.GetEnumerator">
            <summary>
            Retrieve an enumerator of dictionary used to scroll the settings o keys and their values in the cache.
            The value is the enumerator to scroll the object System.Web.Caching.Cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.TCache.Remove(System.String)">
            <summary>
            Remove the specified element in the object System.Web.Caching.Cache from the application.
            The Key is the identifier System.String for the element of the cache to remove.
            The Value: the element is removed from cache. If not find the value of the key, the value will be null
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.TCache.Expires.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the Expires class to set the expire date.
            </summary>
            <param name="key">The key.</param>
            <param name="expires">The expires.</param>
        </member>
        <member name="M:Digita.Tustena.Base.TCache.PersistentCacheItem.#ctor(System.String,System.Object,System.DateTime,System.TimeSpan,Digita.Tustena.Base.TCache.PersistentCacheCallback)">
            <summary>
            Initializes a new instance of the PersistentCacheItem class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="absoluteExpiration">The absolute expiration.</param>
            <param name="slidingExpiration">The sliding expiration.</param>
            <param name="persistentCacheCallback">The persistent cache callback.</param>
        </member>
        <member name="F:Digita.Tustena.Base.ThreadManager._log">
            <summary>
            Reference to the logger
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.ThreadManager.#ctor(System.Threading.ThreadStart)">
            <summary>
                Initializes a new instance of the ThreadManager class.
                Invoke a thread.
            </summary>
            <param name="threadStart">The thread start.</param>
        </member>
        <member name="M:Digita.Tustena.Base.ThreadManager.#ctor(System.String,System.Threading.ThreadStart)">
            <summary>
                Initializes a new instance of the ThreadManager class.
                Invoke a thread.
            </summary>
            <param name="threadStart">The thread start.</param>
        </member>
        <member name="M:Digita.Tustena.Base.ThreadManager.#ctor(System.Threading.ParameterizedThreadStart)">
            <summary>
                Initializes a new instance of the ThreadManager class.
                Invoke a thread with parameter.
            </summary>
            <param name="parameterizedThreadStart">The thread start.</param>
        </member>
        <member name="M:Digita.Tustena.Base.ThreadManager.#ctor(System.String,System.Threading.ParameterizedThreadStart)">
            <summary>
                Initializes a new instance of the ThreadManager class.
                Invoke a thread with parameter.
            </summary>
            <param name="threadName"></param>
            <param name="parameterizedThreadStart">The thread start.</param>
        </member>
        <member name="M:Digita.Tustena.Base.ThreadManager.Trigger">
            <summary>
            Trigger the Timer execution without waiting for timeout
            </summary>
        </member>
        <member name="E:Digita.Tustena.Base.ThreadManager.OnJob">
            <summary>
                Event is raised once, when the processing starts.
            </summary>
        </member>
        <member name="E:Digita.Tustena.Base.ThreadManager.OnAbort">
            <summary>
                On aborting this event's delegate function may do extra calculations.
            </summary>
        </member>
        <member name="E:Digita.Tustena.Base.ThreadManager.OnFinish">
            <summary>
                If thread is finished SUCCESFULLY, this event will be raised.
            </summary>
        </member>
        <member name="E:Digita.Tustena.Base.ThreadManager.OnTerminate">
            <summary>
                If thread is aborted, just before leaving the ThreadHandler's working function this event will be triggered.
            </summary>
        </member>
        <member name="E:Digita.Tustena.Base.ThreadManager.OnException">
            <summary>
                When the event delegates exceptions are not handled, the thread catches the exception!
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.ThreadManager.Start">
            <summary>
            Start the thread
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.ThreadManager.Start(System.Object)">
            <summary>
            Start the thread with parameters
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Digita.Tustena.Base.ThreadManager.StartInPool">
            <summary>
            Start the thread in a Managed ThreadPool
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.ThreadManager.StartInPool(System.Object)">
            <summary>
            Start the thread in a Managed ThreadPool with parameters
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Digita.Tustena.Base.ThreadManager.StartTimer(System.Int32,System.Boolean)">
            <summary>
            Start the thread waiting for "milliseconds" before loop
            </summary>
            <param name="milliseconds"></param>
            <param name="delayed">Start the thread after milliseconds then loop (default false)</param>
        </member>
        <member name="M:Digita.Tustena.Base.Tokens.GenerateToken(System.String,System.String,System.Int32)">
            <summary>
            Generate the token by username and password.
            </summary>
            <param name="userName">user name.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Tokens.HaveActiveToken(System.String,System.String,System.Int32)">
            <summary>
            Check the active token.
            </summary>
            <param name="userName">user Name.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Tokens.DeleteExpiredTokens">
            <summary>
            Delete the expired tokens.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.Tokens.ClearToken(System.Guid)">
            <summary>
            Clear the token.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Tokens.ClearToken(System.String,System.String)">
            <summary>
            Clear the token.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Digita.Tustena.Base.Tokens.GetUCFromToken(System.Guid,Digita.Tustena.Core.UserConfig@)">
            <summary>
            Get the User Config from token.
            </summary>
            <param name="token">The token.</param>
            <param name="uc">The UC.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Tokens.ResolveToken(System.String,System.String@,System.String@,System.Int32@)">
            <summary>
            Resolve the token string from username and password.
            </summary>
            <param name="token">The token.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Tokens.ResolveToken(System.Guid,System.String@,System.String@,System.Int32@)">
            <summary>
            Resolve the token guid from username and password.
            </summary>
            <param name="token">The token.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Tokens.GenerateObjectToken(System.String,System.String,System.String,System.Int64)">
            <summary>
            Generate the object token by user name password, type and crossid.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="type">The type.</param>
            <param name="crossId">The cross id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Tokens.CheckObjectToken(System.String)">
            <summary>
            Check the object token from string.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Tokens.Tokenize(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Tokenize the specified entity id with the creation date and the modify date.
            </summary>
            <param name="entityId">The entity id.</param>
            <param name="lastModifiedDate">The last modified date.</param>
            <param name="createdDate">The created date.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.Tokens.DecryptTokenized(System.Guid,System.Int64@,System.DateTime@,System.DateTime@)">
            <summary>
            Decrypt the entityidtokenized with the creation date and the modify date.
            </summary>
            <param name="token">The token.</param>
            <param name="entityId">The entity id.</param>
            <param name="lastModifiedDate">The last modified date.</param>
            <param name="createdDate">The created date.</param>
        </member>
        <member name="M:Digita.Tustena.Base.ExportId.Encode(System.Int64,System.Char)">
            <summary>
            Encode the specified id with the type specified.
            </summary>
            <param name="id">The id.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ExportId.Decode(System.String,System.Nullable{System.Char})">
            <summary>
            Decodes the specified export id with the type specified.
            </summary>
            <param name="exportId">The export id.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ProgressiveCode.DoesExistType(Digita.Tustena.Core.UserConfig,Digita.Tustena.Base.ProgressiveCode.ProgressiveType,System.Int64)">
            <summary>
            DoesExistType return if type exists into QUOTENUMBERS.
            </summary>
            <param name="uc">Userconfig</param>
            <param name="type">Progressive Type to examine.</param>
            <param name="partner">partner column</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.ProgressiveCode.ChangeTypeInCaseInexistence(Digita.Tustena.Core.UserConfig,Digita.Tustena.Base.ProgressiveCode.ProgressiveType,System.Int64)">
            <summary>
            Set ProgressiveType Alternative if type doesn't exist.
            </summary>
            <param name="uc">Userconfig</param>
            <param name="type">Progressive Type to examine.</param>
            <param name="partner">partner column</param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.UserData">
            <summary>
            UserData.
            </summary>
        </member>
        <member name="M:Digita.Tustena.Base.UserData.LoadPersonalData(System.Int32)">
            <summary>
            Load the personal data of the user.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.UserData.LoadPersonalData(System.Int32,Digita.Tustena.Core.Enums.MessageCode[])">
            <summary>
            Load the personal data of the user.
            </summary>
            <param name="id">The id.</param>
            <param name="ignoreMessageCodes">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.UserData.LoadSpecificShardAdminPersonalData(System.Int32)">
            <summary>
            Creates a UserConfig built using the data of the first available 
            SystemAdministrator user belonging to the given Shard
            </summary>
            <param name="customerId">The id of the shard</param>
            <returns>A UserConfig built using the data of the first available 
            SystemAdministrator user belonging to the given Shard if exisits, 
            else a new UserConfig</returns>
        </member>
        <member name="M:Digita.Tustena.Base.UserData.LoadPersonalData(System.String)">
            <summary>
            Load the personal data of the company.
            </summary>
            <param name="companyCode">The company code.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.UserData.CheckUserCredentialsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Check if user exists and is active
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The pass word.</param>
            <param name="customerId">The customer id or null if not required.</param>
            <returns>Returns 0 is not present</returns>
        </member>
        <member name="M:Digita.Tustena.Base.UserData.LoadPersonalDataAsync(System.String,System.String,System.Int32)">
            <summary>
            Check account in tsid/polyedro/active directory and load the personal data.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The pass word.</param>
            <param name="customerId">The customer id.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.UserData.LoadPersonalDataAsync(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Check account in tsid/polyedro/active directory and load the personal data.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The pass word.</param>
            <param name="customerId">The customer id.</param>
            <param name="useTeamSystemId">use TeamSystemId provider</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.UserData.LoadMySideBar(Digita.Tustena.Core.UserConfig,System.String)">
            <summary>
            Load my side bar by string and user config.
            </summary>
            <param name="uc">The UC.</param>
            <param name="mySideBar">My side bar.</param>
        </member>
        <member name="M:Digita.Tustena.Base.UserData.QuerySecurity(Digita.Tustena.Core.UserConfig)">
            <summary>
            Query the security.
            </summary>
            <param name="uc">The UC.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.UserData.ChangeTierProperties(Digita.Tustena.Core.UserConfig,System.Int32)">
            <summary>
            Change CustomerId property and Permission of User
            </summary>
            <param name="uc"></param>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.UpdateWs">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.#ctor">
            <remarks/>
        </member>
        <member name="E:Digita.Tustena.Base.com.tustena.updates.UpdateWs.NotifyNetErrorCompleted">
            <remarks/>
        </member>
        <member name="E:Digita.Tustena.Base.com.tustena.updates.UpdateWs.NotifyJsErrorCompleted">
            <remarks/>
        </member>
        <member name="E:Digita.Tustena.Base.com.tustena.updates.UpdateWs.CurrentVersionCompleted">
            <remarks/>
        </member>
        <member name="E:Digita.Tustena.Base.com.tustena.updates.UpdateWs.CheckUpdateCompleted">
            <remarks/>
        </member>
        <member name="E:Digita.Tustena.Base.com.tustena.updates.UpdateWs.UpdateCompleted">
            <remarks/>
        </member>
        <member name="E:Digita.Tustena.Base.com.tustena.updates.UpdateWs.GetAvailableFileCompleted">
            <remarks/>
        </member>
        <member name="E:Digita.Tustena.Base.com.tustena.updates.UpdateWs.HttpUpdateCompleted">
            <remarks/>
        </member>
        <member name="E:Digita.Tustena.Base.com.tustena.updates.UpdateWs.UpdatedCompleted">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.NotifyNetError(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.NotifyNetErrorAsync(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.NotifyNetErrorAsync(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.NotifyJsError(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.NotifyJsErrorAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.NotifyJsErrorAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.CurrentVersion(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.CurrentVersionAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.CurrentVersionAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.CheckUpdate(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.CheckUpdateAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.CheckUpdateAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.Update(System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.UpdateAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.UpdateAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.GetAvailableFile">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.GetAvailableFileAsync">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.GetAvailableFileAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.HttpUpdate(System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.HttpUpdateAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.HttpUpdateAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.Updated(System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.UpdatedAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.UpdatedAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Digita.Tustena.Base.com.tustena.updates.UpdateWs.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.NotifyNetErrorCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.NotifyNetErrorCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.com.tustena.updates.NotifyNetErrorCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.NotifyJsErrorCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.NotifyJsErrorCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.com.tustena.updates.NotifyJsErrorCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.CurrentVersionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.CurrentVersionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.com.tustena.updates.CurrentVersionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.CheckUpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.CheckUpdateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.com.tustena.updates.CheckUpdateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.UpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.UpdateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.com.tustena.updates.UpdateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.GetAvailableFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.GetAvailableFileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.com.tustena.updates.GetAvailableFileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.HttpUpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.HttpUpdateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.com.tustena.updates.HttpUpdateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.UpdatedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.com.tustena.updates.UpdatedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Digita.Tustena.Base.com.tustena.updates.UpdatedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Digita.Tustena.Base.WebEditorUtils">
            <summary>
            Descrizione di riepilogo per WebEditorUtils.
            </summary>
        </member>
        <member name="P:Digita.Tustena.Base.WebEditorUtils.RootUserFilesPath">
            <summary>
            Gets the root user files path.
            </summary>
            <value>The root user files path.</value>
        </member>
        <member name="M:Digita.Tustena.Base.WebExtensionMethods.RenderToHtmlString(System.Web.UI.WebControls.WebControl)">
            <summary>
            Render the webcontrol as an html string
            </summary>
            <param name="wc"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.WebExtensionMethods.FindChildControl``1(System.Web.UI.Control,System.String)">
            <summary>
            Similar to Control.FindControl, but recurses through child controls.    
            Assumes that startingControl is NOT the control you are searching for. 
            </summary>
            <typeparam name="T">the return type</typeparam>
            <param name="startingControl">Normally Page or a Control Container</param>
            <param name="id">the id of the searched control</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.WebExtensionMethods.FindTypeChildControl``1(System.Web.UI.Control)">
            <summary>
            Similar to Control.FindControl, but recurses through child controls.    
            Assumes that startingControl is NOT the control you are searching for. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startingControl">Normally Page or a Control Container</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.WebExtensionMethods.ToHtml(System.String,System.Boolean)">
            <summary>
            Transform string with Markdown syntax
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.WebExtensionMethods.ToSimpleHtml(System.String)">
            <summary>
            Replace Newline to &lt;br/&gt; tag
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.WebExtensionMethods.SelectedValueFromRequest(System.Web.UI.WebControls.WebControl)">
            <summary>
            Retrieve value from FORM instead of the viewstate.
            </summary>
            <param name="ddl">The DropDownLis</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.XmlJson.XmlToJSON(System.Xml.XmlDocument)">
            <summary>
            Conversion XML to JSON.
            </summary>
            <param name="xmlDoc">The XML doc.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Base.XmlJson.XmlToJsonNode(System.Text.StringBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
             XmlToJSONnode:  Output an XmlElement, possibly as part of a higher array
            </summary>
            <param name="sbJson"></param>
            <param name="node">The node.</param>
            <param name="showNodeName">if set to <c>true</c> [show node name].</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Digita.Tustena.Base.XOREncDec.EncodeXOpenId(System.Int64,System.String)" -->
        <member name="F:Digita.Tustena.Core.LazyBOInstanceStorage`1._log">
            <summary>
            Reference to the logger
            </summary>
        </member>
        <member name="M:Digita.Tustena.Database.DBHistory.AddExclusions(System.String[])">
            <summary>
            Add column names to the exclusion list to avoid logging
            </summary>
            <param name="exclStrings"></param>
        </member>
        <member name="P:Digita.Tustena.Exchange.ExchangeSynchronizationOptions.AsyncMode">
            <summary>
              Gets or sets a value indicating whether [async mode].
            </summary>
            <value>
              <c>true</c> if [async mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Digita.Tustena.Exchange.ExchangeSynchronizationOptions.Initialize(System.Collections.Hashtable)">
            <summary>
              Executes the initialize.
            </summary>
            <param name="initializationData">The initialization data.</param>
        </member>
        <member name="P:Digita.Tustena.Rpc.SpecificClientRpcCommandRequest.ClientId">
            <summary>
            Gets or sets the name of the plugin.
            </summary>
            <value>
            The name of the plugin.
            </value>
        </member>
        <member name="P:Digita.Tustena.Rpc.SpecificClientRpcCommandRequest.CommandData">
            <summary>
            Gets or sets the command data.
            </summary>
            <value>
            The command data.
            </value>
        </member>
        <member name="M:Digita.Tustena.Rpc.IRpcCommandsSender.SendCommand(Digita.Tustena.Rpc.RpcCommandRequest)">
            <summary>
            Sends a command to the service
            </summary>
            <param name="pluginCommand">The plugin command.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Rpc.RpcCommandEventHandlersList.Add(System.String,Digita.Tustena.Rpc.RpcCommandEventHandler)">
            <summary>
            Adds the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Digita.Tustena.Rpc.RpcCommandEventHandlersList.Add(System.String,Digita.Tustena.Rpc.RpcCommandParameter[],Digita.Tustena.Rpc.RpcCommandEventHandler)">
            <summary>
            Adds the specified command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="parameters">The parameters.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="P:Digita.Tustena.Rpc.RpcCommandRequest.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Digita.Tustena.Rpc.RpcCommandRequest.CommandName">
            <summary>
            Gets or sets the name of the command.
            </summary>
            <value>
            The name of the command.
            </value>
        </member>
        <member name="P:Digita.Tustena.Rpc.RpcCommandRequest.CommandParameters">
            <summary>
            Gets or sets the command parameters.
            </summary>
            <value>
            The command parameters.
            </value>
        </member>
        <member name="M:Digita.Tustena.Rpc.RpcCommandRequest.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Digita.Tustena.Rpc.RpcCommandResponse.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:Digita.Tustena.Rpc.RpcUtils">
            <summary>
            RpcUtils
            </summary>
        </member>
        <member name="M:Digita.Tustena.Rpc.RpcUtils.GetParameterStrongTypeValue``1(System.Collections.Generic.IEnumerable{Digita.Tustena.Rpc.RpcCommandRequestParameter},System.String)">
            <summary>
            Converts to strong type
            </summary>
            <param name="commandParameters">The command parameters.</param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Rpc.RpcUtils.ToStrongType(System.Collections.Generic.IEnumerable{Digita.Tustena.Rpc.RpcCommandRequestParameter})">
            <summary>
            Converts to strong type
            </summary>
            <param name="commandParameters">The command parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Digita.Tustena.Rpc.RpcUtils.ForwardCommand(System.Object,Digita.Tustena.Rpc.RpcCommandRequest)">
            <summary>
            Executes the command.
            </summary>
            <param name="targetInstance">The target instance.</param>
            <param name="commandRequest">The command request.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Digita.Tustena.Rpc.RpcUtils.ExecuteCommand(System.Object,Digita.Tustena.Rpc.RpcCommandRequest)">
            <summary>
            Executes the command.
            </summary>
            <param name="targetInstance">The target instance.</param>
            <param name="commandRequest">The command request.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Digita.Tustena.Rpc.TargetedRpcCommandRequest.PluginName">
            <summary>
            Gets or sets the name of the plugin.
            </summary>
            <value>
            The name of the plugin.
            </value>
        </member>
        <member name="P:Digita.Tustena.Rpc.TargetedRpcCommandRequest.CommandData">
            <summary>
            Gets or sets the command data.
            </summary>
            <value>
            The command data.
            </value>
        </member>
        <member name="T:Koogra.Collections.IndexedCollection`2">
            <summary>
            Indexed collection.
            </summary>
        </member>
        <member name="M:Koogra.Collections.IndexedCollection`2.BaseAdd(`0,`1)">
            <summary>
            Add's the specified value at the specified key.
            </summary>
            <param name="key">The key where the value is to be inserted.</param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="P:Koogra.Collections.IndexedCollection`2.BaseFirstKey">
            <summary>
            The lowest value key available in the collection.
            </summary>
        </member>
        <member name="P:Koogra.Collections.IndexedCollection`2.BaseLastKey">
            <summary>
            The highest value key available in the collection.
            </summary>
        </member>
        <member name="M:Koogra.Collections.IndexedCollection`2.BaseGet(`0)">
            <summary>
            Returns the value at the specified key.
            </summary>
            <param name="key">The key for the value.</param>
            <returns>Returns the a default value (e.g. null) if the key does not exist. Else returns the value at the specified key.</returns>
        </member>
        <member name="M:Koogra.Collections.IndexedCollection`2.ContainsKey(`0)">
            <summary>
            Returns true if the collection contains the specified key.
            </summary>
            <param name="key">The key to find.</param>
            <returns></returns>
        </member>
        <member name="P:Koogra.Collections.IndexedCollection`2.BaseValues">
            <summary>
            Value enumerator.
            </summary>
        </member>
        <member name="T:Koogra.Collections.ReadOnlyCollection`1">
            <summary>
            Read-only Collection.
            </summary>
        </member>
        <member name="P:Koogra.Collections.ReadOnlyCollection`1.Count">
            <summary>
            Collection item count.
            </summary>
        </member>
        <member name="P:Koogra.Collections.ReadOnlyCollection`1.InnerList">
            <summary>
            Internal list.
            </summary>
        </member>
        <member name="M:Koogra.Collections.ReadOnlyCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Koogra.Collections.SimpleCollection`1">
            <summary>
            Simple collection class.
            </summary>
            <typeparam name="T">The data type held by the collection</typeparam>
        </member>
        <member name="M:Koogra.Collections.SimpleCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Koogra.Collections.SimpleCollection`1.Add(`0)">
            <summary>
            Add's an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="P:Koogra.Collections.SimpleCollection`1.Item(System.Int32)">
            <summary>
            Default indexer.
            </summary>
            <param name="index">The index to the item in the collection.</param>
            <returns>Returns the item at the specified index.</returns>
        </member>
        <member name="T:Koogra.Excel.Cell">
            <summary>
            Class that represents the individual cells in a row.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Cell.Format(System.Object,System.String)">
            <summary>
            Use this method to format a value.
            </summary>
            <param name="str">The value to format.</param>
            <param name="format">The format string. This format string is the same as strings used in old OLE applications.</param>
            <returns>The formatted value of str.</returns>
            <permission cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">This method requires the specified permission.</permission>
        </member>
        <member name="M:Koogra.Excel.Cell.Format(System.Object,System.String,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Use this method to format a value.
            </summary>
            <param name="str">The value to format.</param>
            <param name="format">The format string. This format string is the same as strings used in old OLE applications.</param>
            <param name="firstDay">The first day of the week for date formats.</param>
            <param name="firstWeek">The first week of the year.</param>
            <param name="flags">Flags that control the formatting process.</param>
            <returns>The formatted value of str.</returns>
            <remarks>For further documentation on firstDay, firstWeek and flags, lookup VarFormat in the MSDN library.</remarks>
            <permission cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">This method requires the specified permission.</permission>
        </member>
        <member name="P:Koogra.Excel.Cell.Value">
            <summary>
            The value of the cell.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Cell.Style">
            <summary>
            Formatting.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Cell.FormattedValue">
            <summary>
            Use this method to get the value of the cell with formatting applied.
            </summary>
            <returns>The formatted value of the cell</returns>
            <permission cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">This method requires the specified permission.</permission>
        </member>
        <member name="T:Koogra.Excel.CellCollection">
            <summary>
            Collection class for Cell objects.
            </summary>
        </member>
        <member name="P:Koogra.Excel.CellCollection.FirstCol">
            <summary>
            Obsolete. Use <see cref="P:Koogra.Excel.CellCollection.MinCol"/>.
            </summary>
        </member>
        <member name="P:Koogra.Excel.CellCollection.MinCol">
            <summary>
            The first column in the collection.
            </summary>
        </member>
        <member name="P:Koogra.Excel.CellCollection.LastCol">
            <summary>
            Obsolete. Use <see cref="P:Koogra.Excel.CellCollection.MaxCol"/>.
            </summary>
        </member>
        <member name="P:Koogra.Excel.CellCollection.MaxCol">
            <summary>
            The last column in the collection.
            </summary>
        </member>
        <member name="P:Koogra.Excel.CellCollection.Item(System.UInt32)">
            <summary>
            The indexer for the collection.
            </summary>
        </member>
        <member name="T:Koogra.Excel.ExcelCollection`1">
            <summary>
            Base class for collections that are part of a workbook.
            </summary>
        </member>
        <member name="M:Koogra.Excel.ExcelCollection`1.#ctor(Koogra.Excel.Workbook)">
            <summary>
            Constructor.
            </summary>
            <param name="wb">The workbook.</param>
            <exception cref="T:System.ArgumentNullException">Exception is thrown if wb is null.</exception>
        </member>
        <member name="P:Koogra.Excel.ExcelCollection`1.Workbook">
            <summary>
            The workbook.
            </summary>
        </member>
        <member name="P:Koogra.Excel.ExcelCollection`1.Item(System.Int32)">
            <summary>
            Default indexer for the collection.
            </summary>
            <param name="index">The item index.</param>
            <returns>Returns the item at the specified index.</returns>
        </member>
        <member name="T:Koogra.Excel.ExcelIndexedCollection`2">
            <summary>
            Base class for indexed collections that are part of a Workbook
            </summary>
        </member>
        <member name="M:Koogra.Excel.ExcelIndexedCollection`2.#ctor(Koogra.Excel.Workbook)">
            <summary>
            Constructor.
            </summary>
            <param name="wb">The workbook.</param>
            <exception cref="T:System.ArgumentNullException">Exception thrown if wb is null.</exception>
        </member>
        <member name="P:Koogra.Excel.ExcelIndexedCollection`2.Workbook">
            <summary>
            The workbook.
            </summary>
        </member>
        <member name="P:Koogra.Excel.ExcelIndexedCollection`2.InternalValues">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Koogra.Excel.ExcelObject">
            <summary>
            Base class implemenation of IExcelObject
            </summary>
        </member>
        <member name="M:Koogra.Excel.ExcelObject.#ctor(Koogra.Excel.Workbook)">
            <summary>
            Constructor.
            </summary>
            <param name="wb">The workbook.</param>
            <exception cref="T:System.ArgumentNullException">Exception is thrown if wb is null.</exception>
        </member>
        <member name="P:Koogra.Excel.ExcelObject.Workbook">
            <summary>
            The workbook.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Font">
            <summary>
            Class that represents a font.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Font.Height">
            <summary>
            Font height.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Font.Options">
            <summary>
            Font options.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Font.Color">
            <summary>
            Font color.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Font.BoldNess">
            <summary>
            Font boldness.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Font.Escapement">
            <summary>
            Font escapement.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Font.Underline">
            <summary>
            Font underline.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Font.Family">
            <summary>
            Font family.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Font.CharacterSet">
            <summary>
            Font character set.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Font.FontName">
            <summary>
            Font name.
            </summary>
        </member>
        <member name="T:Koogra.Excel.FontCollection">
            <summary>
            Collection class for Font objects.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Format">
            <summary>
            Represents a cell format.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Format.FormatValue">
            <summary>
            The format string.
            </summary>
        </member>
        <member name="T:Koogra.Excel.FormatCollection">
            <summary>
            Collection class for Format objects.
            </summary>
        </member>
        <member name="P:Koogra.Excel.FormatCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection.
            </summary>
        </member>
        <member name="T:Koogra.Excel.HyperLinkCollection">
            <summary>
            Represents the table of hyperlinks to be found in a worksheet
            </summary>
        </member>
        <member name="M:Koogra.Excel.HyperLinkCollection.FindHyperlink(System.UInt16,System.UInt16)">
            <summary>
            Method for locating a hyperlink given a row or column.
            </summary>
            <param name="row">The row to search in.</param>
            <param name="col">The column to search in.</param>
            <returns>Returns a HyperLinkRecord if a record is found, null if not.</returns>
        </member>
        <member name="T:Koogra.Excel.IExcelObject">
            <summary>
            Interface that must be implemented by all Excel objects.
            </summary>
            <remarks>
            Basically, Excel objects are simply objects that are inside a workbook.
            </remarks>
        </member>
        <member name="P:Koogra.Excel.IExcelObject.Workbook">
            <summary>
            Must return a reference to the objects workbook and must not return null.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Palette">
            <summary>
            Represents a color palette.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Palette.GetColor(System.Int32)">
            <summary>
            Gets a color in the palette.
            </summary>
            <param name="index">The index for the color.</param>
            <returns>Returns a PaletteEntry object.</returns>
        </member>
        <member name="T:Koogra.Excel.PaletteEntry">
            <summary>
            Represents an entry in the Palette class.
            </summary>
        </member>
        <member name="P:Koogra.Excel.PaletteEntry.Color">
            <summary>
            The color of the entry.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.ArrayRecord">
            <summary>
            This class abstracts the ARRAY (0x0221) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.ArrayRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the ARRAY record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.ArrayRecord.Options">
            <summary>
            The options for the ARRAY record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.ArrayRecord.Reserved">
            <summary>
            The reserved field for the ARRAY record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.ArrayRecord.Data">
            <summary>
            The raw byte data for the ARRAY record.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.Biff">
            <summary>
            This is the base class for all Excel records.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.Biff.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.BiffCollection">
            <summary>
            Collection class for Biff base objects.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.BiffCollection.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.BlankRecord">
            <summary>
            This class abstracts the BLANK (0x0201) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.BlankRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the BLANK record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException if thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.BlankRecord.Value">
            <summary>
            Method for retrieving the value of the Record.
            </summary>
            <value>
            Currently returns null since BLANK records have no value.
            </value>
        </member>
        <member name="T:Koogra.Excel.Records.BofRecord">
            <summary>
            This class abstracts the BOF (0x0809) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.BofRecord.SubstreamType">
            <summary>
            Sub stream types that determine the data that follows the BOF record.
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.BofRecord.SubstreamType.WorkbookGlobals">
            <summary>
            Sub stream type for data that apply to the entire workbook.
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.BofRecord.SubstreamType.VisualBasicModule">
            <summary>
            Sub stream type for visual basic modules.
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.BofRecord.SubstreamType.Worksheet">
            <summary>
            Sub stream type for Worksheet streams.
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.BofRecord.SubstreamType.Chart">
            <summary>
            Sub stream type for Chart streams.
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.BofRecord.SubstreamType.Excel4MacroSheet">
            <summary>
            Sub stream type for Excel 4.0 Macros.
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.BofRecord.SubstreamType.Workspace">
            <summary>
            Sub stream type for Workspaces.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.BofRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the BOF record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.BofRecord.Version">
            <summary>
            The version of the sub-stream of data that follows this BOF record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.BofRecord.Type">
            <summary>
            The type of the sub-stream of data that follows this BOF record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.BofRecord.BuildId">
            <summary>
            The build id for the sub-stream of data that follows this BOF record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.BofRecord.BuildYear">
            <summary>
            The build year for the sub-stream of data that follows this BOF record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.BofRecord.History">
            <summary>
            The history for the sub-stream of data that follows this BOF record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.BofRecord.LowestBiff">
            <summary>
            The lowest biff version that can read the data found in the sub-stream of data that follows this BOF record.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.BoolErrRecord">
            <summary>
            This class abstracts BOOLERR (0x0205) Excel records found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.BoolErrRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the BOOLERR record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.BoolErrRecord.Value">
            <summary>
            Method for returning the value in the BOOLERR record.
            </summary>
            <value>
            The returned value may be a string or bool. Be sure to test accordingly.
            </value>
        </member>
        <member name="T:Koogra.Excel.Records.BoundSheetRecord">
            <summary>
            This class abstracts a BOUNDSHEET (0x0085) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.BoundSheetRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the BOUNDSHEET record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.BoundSheetRecord.BofPos">
            <summary>
            The absolute position in the stream of the BOF record associated with this BOUNDSHEET record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.BoundSheetRecord.Visibility">
            <summary>
            The visibility of this BOUNDSHEET record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.BoundSheetRecord.Type">
            <summary>
            The type for the BOUNDSHEET record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.BoundSheetRecord.Name">
            <summary>
            The name of the BOUNDSHEET record.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.CellRecord">
            <summary>
            Base class for all Excel Cell type records.
            Cell type records may pertain to a single column or a range of columns and may or may not have formatting information.
            All Cell type records must return a value.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.CellRecord.ReadRow(System.IO.BinaryReader)">
            <summary>
            Method for retrieving the row to which the cell belongs to.
            </summary>
            <param name="reader">The reader for the record.</param>
        </member>
        <member name="P:Koogra.Excel.Records.CellRecord.Value">
            <summary>
            Method that must be overriden in inheriting classes and must return the value for that class.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.CellRecord.Row">
            <summary>
            The row to which the cell belongs to.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.ContinueRecord">
            <summary>
            This class abstracts a CONTINUE (0x003c) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.ContinueRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the CONTINUE record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.ContinueRecord.Data">
            <summary>
            The data in the CONTINUE record.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.ContinueRecord.GetDataStream">
            <summary>
            Method for getting a stream for the data in the CONTINUE record.
            </summary>
            <returns>Returns a Stream for the data in the CONTINUE record.</returns>
        </member>
        <member name="T:Koogra.Excel.Records.DbCellRecord">
            <summary>
            This class abstracts a DBCELL (0x00d7) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.DbCellRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the DBCELL record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.DbCellRecord.RowOffset">
            <summary>
            The offset of the first row in the ROW cluster that the DBCELL record indexes.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.DbCellRecord.StreamOffsets">
            <summary>
            Row offsets in the ROW cluster that the DBCELL record indexes.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.EofRecord">
            <summary>
            This class abstracts a EOF (0x000a) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.EofRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the EOF record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:Koogra.Excel.Records.FontRecord">
            <summary>
            This class abstracts the FONT (0x0031) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.FontRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the FONT record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.FontRecord.FontHeight">
            <summary>
            The height of the font in twips.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FontRecord.Options">
            <summary>
            Options for the font.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FontRecord.ColorIdx">
            <summary>
            Index in the COLOR table for the font.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FontRecord.Boldness">
            <summary>
            Boldness of the font.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FontRecord.Escapement">
            <summary>
            Escapement of the font.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FontRecord.Underline">
            <summary>
            Underline options for the font.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FontRecord.FontFamily">
            <summary>
            Font family options for the font.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FontRecord.CharacterSet">
            <summary>
            Character set of the font.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FontRecord.FontName">
            <summary>
            Name of the font.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.FormatRecord">
            <summary>
            This class abstracts the FORMAT (0x041e) Excel record  found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.FormatRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the FORMAT record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.FormatRecord.Index">
            <summary>
            Index of the FORMAT record in the format table.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FormatRecord.Format">
            <summary>
            The format string for the FORMAT record.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.FormulaChildRangedRecord">
            <summary>
            This is the base class for FORMULA (0x006) Excel records whose formula and values pertain to a range of cells.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.FormulaChildRangedRecord.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.FormulaChildRangedRecord.ReadRangeValues(System.IO.BinaryReader)">
            <summary>
            Method for populating the range values of the record given a reader for the stream.
            </summary>
            <param name="reader">The reader for the stream.</param>
        </member>
        <member name="P:Koogra.Excel.Records.FormulaChildRangedRecord.FirstRowIdx">
            <summary>
            The first row in the range to which the formula applies.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FormulaChildRangedRecord.LastRowIdx">
            <summary>
            The last row in the range to which the formula applies.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FormulaChildRangedRecord.FirstColIdx">
            <summary>
            The first column in the range to which the formula applies.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FormulaChildRangedRecord.LastColIdx">
            <summary>
            The last column in the range to which the formula applies.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.FormulaChildRecord">
            <summary>
            This is the base class for records that typically follow FORMULA (0x006) Excel records.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.FormulaRecord">
            <summary>
            This class abstracts the FORMULA (0x006) Excel record  found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.FormulaRecord.#ctor(Koogra.Excel.Records.GenericBiff,System.IO.Stream)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the FORMULA record.</param>
            <param name="recordsStream">The stream into the records to which the FORMULA record belongs to. The record stream must be positioned just after the FORMULA record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.FormulaRecord.Value">
            <summary>
            The value of the formula.
            </summary>
            <value>
            The return value maybe a double, string or bool value.
            </value>
        </member>
        <member name="P:Koogra.Excel.Records.FormulaRecord.Options">
            <summary>
            Options for the FORMULA record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FormulaRecord.Reserved">
            <summary>
            Reserved field for the FORMULA record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FormulaRecord.FormulaLen">
            <summary>
            Length of the formula data.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.FormulaRecord.FormulaData">
            <summary>
            The unparsed formula data.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.GenericBiff">
            <summary>
            This class abstracts a Generic Microsoft (MS) Binary Interchange File Format (BIFF) record.
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.GenericBiff.MinimumSize">
            <summary>
            The minimum size of any BIFF records.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.GenericBiff.#ctor(System.IO.Stream)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="stream">The stream to read the record data from.</param>
        </member>
        <member name="P:Koogra.Excel.Records.GenericBiff.Id">
            <summary>
            The Id of the BIFF record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.GenericBiff.Length">
            <summary>
            The length of data in the BIFF record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.GenericBiff.Data">
            <summary>
            The data in the BIFF record.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.GenericBiff.GetDataStream">
            <summary>
            Method for getting a stream for the data in the BIFF record.
            </summary>
            <returns>Returns a stream for the data in the BIFF record.</returns>
        </member>
        <member name="T:Koogra.Excel.Records.HyperLinkOptions">
            <summary>
            This class decodes the hyperlink options field
            Thanks to openoffice.org as the format was taken from their documentation of the excel file format http://www.openoffice.org
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.HyperLinkOptions.#ctor(System.UInt32)">
            <summary>
            The constructor
            </summary>
            <param name="options">The options flag as taken from the HLINK record</param>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkOptions.HasFileLinkOrUrl">
            <summary>
            Returns true if the HLINK record contains a file or url link
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkOptions.HasRelativeFilePath">
            <summary>
            Returns true if the link is a relative file path
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkOptions.HasDescription">
            <summary>
            Returns true if the HLINK record contains a description
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkOptions.HasTextMark">
            <summary>
            Returns true if the HLINK record contains a text mark
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkOptions.HasTargetFrame">
            <summary>
            Returns true if the HLINK record contains a target frame
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkOptions.HasUNCPath">
            <summary>
            Returns true if the HLINK record contains a UNC path
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.HyperLinkRecord">
            <summary>
            This class abstract an HLINK (0x01B8) record found in Excel streams.
            Thanks to openoffice.org as the format was taken from their documentation of the excel file format http://www.openoffice.org
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.HyperLinkRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the HLINK record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkRecord.FirstRow">
            <summary>
            The first row where the hyperlink applies to.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkRecord.LastRow">
            <summary>
            The last row where the hyperlink applies to.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkRecord.FirstCol">
            <summary>
            The first column where the hyperlink applies to.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkRecord.LastCol">
            <summary>
            The last column where the hyperlink applies to.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkRecord.Guid">
            <summary>
            The link GUID.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkRecord.Options">
            <summary>
            The hyperlink options flag.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkRecord.MonikerGuid">
            <summary>
            The moniker GUID of the link. Used to identify if the link is a URL or file link.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkRecord.Link">
            <summary>
            The link.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkRecord.Description">
            <summary>
            Description of the link.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkRecord.TextMark">
            <summary>
            Text mark.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.HyperLinkRecord.TargetFrame">
            <summary>
            Link target frame.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.IndexRecord">
            <summary>
            This class abstracts the INDEX (0x020B) Excel record  found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.IndexRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the INDEX record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.IndexRecord.FirstRow">
            <summary>
            The first row that can be found in the worksheet.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.IndexRecord.LastRow">
            <summary>
            The last row that can be found in the worksheet.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.IndexRecord.Rows">
            <summary>
            The collection of ROW cluster offsets to the DBCELL records for each ROW cluster.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.InvalidRecordIdException">
            <summary>
            Exception thrown when encountering invalid record types when reading GenericBiff records.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.InvalidRecordIdException.#ctor(System.Object,System.Object)">
            <summary>
            Exception constructor.
            </summary>
            <param name="actual">The actual id encountered.</param>
            <param name="expected">The expected id.</param>
        </member>
        <member name="T:Koogra.Excel.Records.LabelRecord">
            <summary>
            This class abstracts the LABEL (0x0204) Excel record  found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.LabelRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the LABEL record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.LabelRecord.Value">
            <summary>
            Returns the value of the LABEL record.
            </summary>
            <value>
            Returns a string value.
            </value>
        </member>
        <member name="T:Koogra.Excel.Records.LabelSstRecord">
            <summary>
            This class abstracts the LABELSST (0x00fd) Excel record  found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.LabelSstRecord.#ctor(Koogra.Excel.Records.GenericBiff,Koogra.Excel.Records.SstRecord)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the LABELSST record.</param>
            <param name="sst">A reference to the shared string table for the workbook.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.LabelSstRecord.SstIndex">
            <summary>
            Index in the sst of the LABELSST record's value.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.LabelSstRecord.Value">
            <summary>
            The value of the LABELSST record.
            </summary>
            <value>
            Returns a string value.
            </value>
        </member>
        <member name="T:Koogra.Excel.Records.MulBlankRecord">
            <summary>
            This class abstracts the MULBLANK (0x00be) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.MulBlankRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the MULBLANK record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.MulBlankRecord.XfIndex">
            <summary>
            The array of formatting (XF) records for each column in the range.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.MulBlankRecord.Value">
            <summary>
            Method for getting the array of values in the range of cells.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.MulBlankRecord.GetValue(System.UInt16)">
            <summary>
            Method for getting the value of a particular column.
            </summary>
            <param name="col">The column index.</param>
            <returns>Always returns null.</returns>
            <remarks>Currently doesn't check if the col parameter is within the acceptable range of values.</remarks>
        </member>
        <member name="T:Koogra.Excel.Records.MulRkRecord">
            <summary>
            This class abstracts the MULRK (0x00bd) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.MulRkRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the MULRK record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.MulRkRecord.Values">
            <summary>
            The array of RkRec values within the range of records.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.MulRkRecord.Value">
            <summary>
            Returns the array of RkRec values within the range of records.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.MulRkRecord.GetValue(System.UInt16)">
            <summary>
            Returns the value of a particular column in the range.
            </summary>
            <param name="col">The index of the column.</param>
            <returns>Returns an RkRec value.</returns>
        </member>
        <member name="T:Koogra.Excel.Records.MultipleColCellRecord">
            <summary>
            Base class for cell records that span multiple cells.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.MultipleColCellRecord.ReadRowColInfo(System.IO.BinaryReader)">
            <summary>
            Method for reading the the first and last column information of the cell.
            </summary>
            <param name="reader">The reader for the record.</param>
            <returns>Returns a new reader that points to the data between the first and last column data.</returns>
        </member>
        <member name="P:Koogra.Excel.Records.MultipleColCellRecord.FirstCol">
            <summary>
            The first column in the range the record pertains to.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.MultipleColCellRecord.LastCol">
            <summary>
            The last column in the range the record pertains to.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.MultipleColCellRecord.GetValue(System.UInt16)">
            <summary>
            Method for getting the value of a particular column in the range pertained to.
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="T:Koogra.Excel.Records.NumberRecord">
            <summary>
            This class abstracts the NUMBER (0x0203) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.NumberRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the NUMBER record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.NumberRecord.Value">
            <summary>
            Returns the value of the NUMBER record.
            </summary>
            <value>Returns a double value.</value>
        </member>
        <member name="T:Koogra.Excel.Records.PaletteRecord">
            <summary>
            This class abstracts the PALETTE (0x0092) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.PaletteRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the PALETTE record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.PaletteRecord.Colors">
            <summary>
            The array of colors in the PALETTE record.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.RecordType">
            <summary>
            Enumeration of currently supported/known Excel record id's
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Bof">
            <summary>
            BOF
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Boundsheet">
            <summary>
            BOUNDSHEET
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Index">
            <summary>
            INDEX
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.DbCell">
            <summary>
            DBCELL
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Row">
            <summary>
            ROW
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Continue">
            <summary>
            CONTINUE
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Sst">
            <summary>
            SST
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Blank">
            <summary>
            BLANK
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.BoolErr">
            <summary>
            BOOLERR
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Formula">
            <summary>
            FORMULA
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Label">
            <summary>
            LABEL
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.LabelSst">
            <summary>
            LABELSST
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.MulBlank">
            <summary>
            MULBLANK
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.MulRk">
            <summary>
            MULRK
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.String">
            <summary>
            STRING
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Xf">
            <summary>
            XF
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Eof">
            <summary>
            EOF
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Rk">
            <summary>
            RK
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Number">
            <summary>
            NUMBER
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Array">
            <summary>
            ARRAY
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.ShrFmla">
            <summary>
            SHRFMLA
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Table">
            <summary>
            TABLE
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Font">
            <summary>
            FONT
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Format">
            <summary>
            FORMAT
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Palette">
            <summary>
            PALETTE
            </summary>
        </member>
        <member name="F:Koogra.Excel.Records.RecordType.Hyperlink">
            <summary>
            HLINK
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.RkRec">
            <summary>
            Structure that represents a formatted RK value.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.RkRec.#ctor(System.UInt16,System.Int32)">
            <summary>
            Constructor for the formatted RK value.
            </summary>
            <param name="xf">The index in the format table for the RK value.</param>
            <param name="rk">The RK value.</param>
        </member>
        <member name="P:Koogra.Excel.Records.RkRec.Xf">
            <summary>
            The index in the format table for the RK value.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.RkRec.Value">
            <summary>
            The value of the RK record.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.RkRecord">
            <summary>
            This class abstracts the RK (0x027e) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.RkRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the RK record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.RkRecord.Value">
            <summary>
            The value of the RK record.
            </summary>
            <value>Returns a double value.</value>
        </member>
        <member name="T:Koogra.Excel.Records.RowColXfCellRecord">
            <summary>
            Base class for Excel Cell type records that span only a specific column and have formatting (XF) information.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.RowColXfCellRecord.ReadRowColXf(System.IO.BinaryReader)">
            <summary>
            Method for reading the row, column and formatting information for the cell.
            </summary>
            <param name="reader">The reader for the cell.</param>
        </member>
        <member name="P:Koogra.Excel.Records.RowColXfCellRecord.Xf">
            <summary>
            The index to the formatting information for retrieving formatting information from the format table.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.RowRecord">
            <summary>
            This class abstracts the ROW (0x0208) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.RowRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the ROW record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.RowRecord.RowNumber">
            <summary>
            The row number of the ROW record in the worksheet.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.RowRecord.FirstCol">
            <summary>
            The first column that can be found in the ROW record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.RowRecord.LastCol">
            <summary>
            The last column that can be found in the ROW record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.RowRecord.RowHeight">
            <summary>
            The height of the row in twips.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.RowRecord.Optimizer">
            <summary>
            Microsoft specific row optimizer.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.RowRecord.Options">
            <summary>
            Options.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.RowRecord.Xf">
            <summary>
            The formatting (XF) information for the row.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.SharedFormulaRecord">
            <summary>
            This class abstracts the SHRFMLA (0x00bc) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.SharedFormulaRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the SHRFMLA record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.SharedFormulaRecord.Reserved">
            <summary>
            Reserved field.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.SharedFormulaRecord.Data">
            <summary>
            The data for the SHRFMLA record.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.SingleColCellRecord">
            <summary>
            Base class for Excel Cell type records that span only a specific column.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.SingleColCellRecord.ReadRowCol(System.IO.BinaryReader)">
            <summary>
            Method for reading the row and column to which the cell belongs to.
            </summary>
            <param name="reader">The reader for the record.</param>
        </member>
        <member name="P:Koogra.Excel.Records.SingleColCellRecord.Col">
            <summary>
            The column that the cell pertains to.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.SstRecord">
            <summary>
            This class abstracts the SST (0x00fc) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.SstRecord.#ctor(Koogra.Excel.Records.GenericBiff,System.IO.Stream)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the SST record.</param>
            <param name="recordStream">The stream into the records to which the SST record belongs to. The record stream must be positioned just after the SST record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.SstRecord.Strings">
            <summary>
            The array of strings in the SST record.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.StringValueRecord">
            <summary>
            This class abstracts the STRING (0x0207) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.StringValueRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the SST record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.StringValueRecord.Value">
            <summary>
            Returns the value of the STRING record.
            </summary>
            <value>Returns a string value.</value>
        </member>
        <member name="T:Koogra.Excel.Records.TableRecord">
            <summary>
            This class abstracts the TABLE (0x0036) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.TableRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the TABLE record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.TableRecord.Options">
            <summary>
            Options.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.TableRecord.InputRowIdx">
            <summary>
            InputRowIdx.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.TableRecord.InputColIdx">
            <summary>
            InputColIdx.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.TableRecord.InputRowIdxForColInp">
            <summary>
            InputRowIdxForColInp.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.TableRecord.InputColIdxForColInp">
            <summary>
            InputColIdxForColInp.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Records.XfRecord">
            <summary>
            This class abstracts the XF (0x00e0) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Records.XfRecord.#ctor(Koogra.Excel.Records.GenericBiff)">
            <summary>
            The constructor for the record.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the XF record.</param>
            <exception cref="T:Koogra.Excel.Records.InvalidRecordIdException">
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.FontIdx">
            <summary>
            Index in the font table for the formatting record font.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.FormatIdx">
            <summary>
            Index in the format table for the formatting record format.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.TypeAndProtection">
            <summary>
            Type and protection option for the format.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.ParentIdx">
            <summary>
            The parent format for the FORMAT record.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.ParentStyle">
            <summary>
            Parent style usage attributes.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.HorizontalAlignment">
            <summary>
            Horizontal alignment.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.Wrapped">
            <summary>
            Text wrapping.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.VerticalAlignment">
            <summary>
            Vertical alignment.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.Rotation">
            <summary>
            Rotation.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.LeftLineStyle">
            <summary>
            Left line style.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.RightLineStyle">
            <summary>
            Right line style.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.TopLineStyle">
            <summary>
            Top line style.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.BottomLineStyle">
            <summary>
            Bottom line style.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.LeftLineColor">
            <summary>
            Left line color.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.RightLineColor">
            <summary>
            Right line color.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.DiagonalRightTopToLeftBottom">
            <summary>
            Diagonal line right top to left bottom.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.DiagonalLeftBottomToTopRight">
            <summary>
            Diagonal line left bottom to right top.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.TopLineColor">
            <summary>
            Top line color.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.BottomLineColor">
            <summary>
            Bottom line color.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.DiagonalLineColor">
            <summary>
            Diagonal line color.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.DiagonalLineStyle">
            <summary>
            Diagonal line style.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.FillPattern">
            <summary>
            Fill pattern.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.PatternColor">
            <summary>
            Pattern color.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.PatternBackground">
            <summary>
            Pattern background.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.IndentLevel">
            <summary>
            Indent level.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Records.XfRecord.ShrinkContent">
            <summary>
            Shrink.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Row">
            <summary>
            Represents a row of cells.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Row.Cells">
            <summary>
            The collection of cells in the row.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Row.IsEmpty">
            <summary>
            Method to determine if a row is empty.
            </summary>
            <returns>Returns True if the row is composed of null or empty string formatted value cells.</returns>
        </member>
        <member name="T:Koogra.Excel.RowCollection">
            <summary>
            Collection class for Row objects.
            </summary>
        </member>
        <member name="P:Koogra.Excel.RowCollection.FirstRow">
            <summary>        
            Obsolete. Use <see cref="P:Koogra.Excel.RowCollection.MinRow"/>.
            </summary>
        </member>
        <member name="P:Koogra.Excel.RowCollection.MinRow">
            <summary>
            The first row in the collection.
            </summary>
        </member>
        <member name="P:Koogra.Excel.RowCollection.LastRow">
            <summary>
            Obsolete. Use <see cref="P:Koogra.Excel.RowCollection.MaxRow"/>.
            </summary>
        </member>
        <member name="P:Koogra.Excel.RowCollection.MaxRow">
            <summary>
            The last row in the collection.
            </summary>
        </member>
        <member name="P:Koogra.Excel.RowCollection.Item(System.UInt32)">
            <summary>
            The indexer for the collection.
            </summary>
        </member>
        <member name="T:Koogra.Excel.Style">
            <summary>
            Represents a cell style.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.Font">
            <summary>
            Font.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.Format">
            <summary>
            Format.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.ParentStyle">
            <summary>
            Parent style.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.TypeAndProtection">
            <summary>
            Type and protection.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.HorizontalAlignment">
            <summary>
            Horizontal alignment.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.Wrapped">
            <summary>
            Wrapped.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.VerticalAlignment">
            <summary>
            Vertical alignment.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.Rotation">
            <summary>
            Rotation.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.IndentLevel">
            <summary>
            IndentLevel.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.ShrinkContent">
            <summary>
            Shrink content.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.ParentStyleAttributes">
            <summary>
            Parent style attributes usage.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.LeftLineStyle">
            <summary>
            Left line style.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.RightLineStyle">
            <summary>
            Right line style.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.TopLineStyle">
            <summary>
            Top line style.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.BottomLineStyle">
            <summary>
            Bottom line style.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.LeftLineColor">
            <summary>
            Left line color.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.RightLineColor">
            <summary>
            Right line color.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.DiagonalRightTopToLeftBottom">
            <summary>
            Diagonal right top to left bottom.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.DiagonalLeftBottomToTopRight">
            <summary>
            Diagonal left bottom to top right.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.TopLineColor">
            <summary>
            Top line color.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.BottomLineColor">
            <summary>
            Bottom line color.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.DiagonalLineColor">
            <summary>
            Diagonal line color.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.DiagonalLineStyle">
            <summary>
            Diagonal line style.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.FillPattern">
            <summary>
            Fill pattern.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.PatternColor">
            <summary>
            Pattern color.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Style.PatternBackground">
            <summary>
            Pattern background.
            </summary>
        </member>
        <member name="T:Koogra.Excel.StyleCollection">
            <summary>
            Collection class for Style objects.
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.BoolErrValue">
            <summary>
            Class that abstracts a boolean or error Excel value.
            </summary>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.BoolErrValue.#ctor(System.Byte,System.Byte)">
            <summary>
            The constructor.
            </summary>
            <param name="value">The value to read.</param>
            <param name="error">Error indicator.</param>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.BoolErrValue.Value">
            <summary>
            The value of the object.
            </summary>
            <value>Returns a bool or string value.</value>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.BoolErrValue.IsError">
            <summary>
            Returns true if the class reprents an error and false if a boolean.
            </summary>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.BoolErrValue.ToString">
            <summary>
            Method for getting the string value of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.FillPattern">
            <summary>
            Fill pattern enumeration.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Percent5">
            <summary>
            5 Percent
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Percent10">
            <summary>
            10 Percent
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Percent20">
            <summary>
            20 Percent
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Percent25">
            <summary>
            25 Percent
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Percent30">
            <summary>
            30 Percent
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Percent40">
            <summary>
            40 Percent
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Percent50">
            <summary>
            50 Percent
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Percent60">
            <summary>
            60 Percent
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Percent70">
            <summary>
            70 Percent
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Percent80">
            <summary>
            80 Percent
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Percent90">
            <summary>
            90 Percent
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.DarkHorizontal">
            <summary>
            Dark Horizontal
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.DarkVertical">
            <summary>
            Dark Vertical
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.DarkDownwardDiagonal">
            <summary>
            Dark Downward Diagonal
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.DarkUpwardDiagonal">
            <summary>
            Dark Upward Diagonal
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.SmallCheckerBoard">
            <summary>
            Small CheckerBoard
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Trellis">
            <summary>
            Trellis
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.LightHorizontal">
            <summary>
            Light Horizontal
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.LightVertical">
            <summary>
            Light Vertical
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.LightDownwardDiagonal">
            <summary>
            Light Downward Diagonal
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.LightUpwardDiagonal">
            <summary>
            Light Upward Diagonal
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.SmallGrid">
            <summary>
            Small Grid
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.DottedDiamond">
            <summary>
            Dotted Diamond
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.WideDownwardDiagonal">
            <summary>
            Wide Downward Diagonal
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.WideUpwardDiagonal">
            <summary>
            Wide Upward Diagonal
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.DashedUpwardDiagonal">
            <summary>
            Dashed Upward Diagonal
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.DashedDownwardDiagonal">
            <summary>
            Dashed Downward Diagonal
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.NarrowVertical">
            <summary>
            Narrow Vertical
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.NarrowHorizontal">
            <summary>
            Narrow Horizontal
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.DashedVertical">
            <summary>
            Dashed Vertical
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.DashedHorizontal">
            <summary>
            Dashed Horizontal
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.LargeConfetti">
            <summary>
            Large Confetti
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.LargeGrid">
            <summary>
            Large Grid
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.HorizontalBrick">
            <summary>
            Horizontal Brick
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.LargeCheckerBoard">
            <summary>
            Large CheckerBoard
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.SmallConfetti">
            <summary>
            Small Confetti
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.ZigZag">
            <summary>
            ZigZag
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.SolidDiamond">
            <summary>
            Solid Diamond
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.DiagonalBrick">
            <summary>
            Diagonal Brick
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.OutlinedDiamond">
            <summary>
            Outlined Diamond
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Plaid">
            <summary>
            Plaid
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Sphere">
            <summary>
            Sphere
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Weave">
            <summary>
            Weave
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.DottedGrid">
            <summary>
            Dotted Grid
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Divot">
            <summary>
            Divot
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Shingle">
            <summary>
            Shingle
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FillPattern.Wave">
            <summary>
            Wave
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.FontBoldness">
            <summary>
            Font boldness structure.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontBoldness.Min">
            <summary>
            The minimum boldness possible for a font.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontBoldness.Max">
            <summary>
            The maximum boldness possible for a font.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontBoldness.Normal">
            <summary>
            The normal (no boldness) for a font.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontBoldness.Bold">
            <summary>
            Normal bold weight for a font.
            </summary>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.FontBoldness.#ctor(System.UInt16)">
            <summary>
            Constructor.
            </summary>
            <param name="boldness">The boldness of the font.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Exception thrown if boldness is an invalid value.</exception>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.FontBoldness.Boldness">
            <summary>
            The boldness.
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.FontCharacterSet">
            <summary>
            Character set enumeration.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSILatin">
            <summary>
            ANSI Latin
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.AppleRoman">
            <summary>
            Apple Roman
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSIJapanese">
            <summary>
            ANSI Japanese
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSIKoreanHangul">
            <summary>
            ANSI Korean Hangul
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSIKoreanJohab">
            <summary>
            ANSI Korean Johab
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSIChineseSimplifiedGBK">
            <summary>
            ANSI Chinese Simplified GBK
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSIChineseTraditionalBIG5">
            <summary>
            ANSI Chinese Traditional BIG5
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSIGreek">
            <summary>
            ANSI Greek
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSITurkish">
            <summary>
            ANSI Turkish
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSIVietnamese">
            <summary>
            ANSI Vietnamese
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSIHebrew">
            <summary>
            ANSI Hebrew
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSIArabic">
            <summary>
            ANSI Arabic
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSIBaltic">
            <summary>
            ANSI Baltic
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSICyrillic">
            <summary>
            ANSI Cyrillic
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSIThai">
            <summary>
            ANSI Thai
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSILatin2">
            <summary>
            ANSI Latin 2
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontCharacterSet.ANSIOEMLatin1">
            <summary>
            ANSI OEM Latin 1
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.FontEscape">
            <summary>
            Escape enumeration.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontEscape.None">
            <summary>
            No escape.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontEscape.SuperScript">
            <summary>
            Superscript.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontEscape.SubScript">
            <summary>
            Subscript.
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.FontFamily">
            <summary>
            Font family enumeration.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontFamily.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontFamily.Roman">
            <summary>
            Roman 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontFamily.Swiss">
            <summary>
            Swiss 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontFamily.Modern">
            <summary>
            Modern 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontFamily.Script">
            <summary>
            Script 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontFamily.Decorative">
            <summary>
            Decorative 
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.FontOptions">
            <summary>
            Font options.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontOptions.None">
            <summary>
            None 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontOptions.Italic">
            <summary>
            Italic 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontOptions.StrikeOut">
            <summary>
            Strike Out 
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.FontUnderline">
            <summary>
            Font underline.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontUnderline.None">
            <summary>
            None 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontUnderline.Single">
            <summary>
            Single 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontUnderline.Double">
            <summary>
            Double 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontUnderline.SingleAccounting">
            <summary>
            Single Accounting 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.FontUnderline.DoubleAccounting">
            <summary>
            Double Accounting 
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.FormulaValue">
            <summary>
            This class abstracts the value of a formula.
            </summary>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.FormulaValue.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value of the formula.</param>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.FormulaValue.StringFollows">
            <summary>
            Returns true if the value of the formula is in a STRING record that follows.
            </summary>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.FormulaValue.Value">
            <summary>
            The value of the formula.
            </summary>
            <value>Returns a double, string or bool value.</value>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.FormulaValue.ToString">
            <summary>
            Method for getting the string value of the formula.
            </summary>
            <returns>The string value/convertion of the formula.</returns>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.HorizontalAlignment">
            <summary>
            Horizontal alignment enumeration.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.HorizontalAlignment.General">
            <summary>
            General 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.HorizontalAlignment.Left">
            <summary>
            Left 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.HorizontalAlignment.Centered">
            <summary>
            Centered 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.HorizontalAlignment.Right">
            <summary>
            Right 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.HorizontalAlignment.Filled">
            <summary>
            Filled 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.HorizontalAlignment.Justified">
            <summary>
            Justified 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.HorizontalAlignment.CenteredAcrossSelection">
            <summary>
            Centered Across Selection 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.HorizontalAlignment.Distributed">
            <summary>
            Distributed 
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.LineStyle">
            <summary>
            Line style enumeration.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.None">
            <summary>
            None 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.Thin">
            <summary>
            Thin,
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.Dashed">
            <summary>
            Dashed
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.Dotted">
            <summary>
            Dotted
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.Think">
            <summary>
            Think
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.Double">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.Hair">
            <summary>
            Hair,
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.MediumDashed">
            <summary>
            Medium Dashed
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.ThinDashDotted">
            <summary>
            Thin Dash Dotted
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.MediumDashDotted">
            <summary>
            Medium Dash Dotted
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.ThinDashDotDotted">
            <summary>
            Thin Dash Dot Dotted
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.MediumDashDotDotted">
            <summary>
            Medium Dash Dot Dotted
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.LineStyle.SlantedMediumDashDotted">
            <summary>
            Slanted Medium Dash Dotted
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.Nibble">
            <summary>
            Represents a nibble which is half a byte.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.Nibble.MinValue">
            <summary>
            The minimum value allowed for the nibble.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.Nibble.MaxValue">
            <summary>
            The maximum value allowed for the nibble.
            </summary>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.Nibble.#ctor(System.Int32)">
            <summary>
            Constructs a nibble from an integer. The integer is cast to a byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Exception is thrown when value is not between MinValue and MaxValue</exception>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.Nibble.#ctor(System.Byte)">
            <summary>
            Constructs a nibble from a byte.
            </summary>
            <param name="value">The value to read.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Exception is thrown when value is not between MinValue and MaxValue</exception>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.Nibble.Value">
            <summary>
            The value of the Nibble.
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.ParentStyleAttributes">
            <summary>
            Parent style usage attributes enumeration.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.ParentStyleAttributes.None">
            <summary>
            None 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.ParentStyleAttributes.Number">
            <summary>
            Number 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.ParentStyleAttributes.Font">
            <summary>
            Font 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.ParentStyleAttributes.Orientation">
            <summary>
            Orientation 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.ParentStyleAttributes.Border">
            <summary>
            Border 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.ParentStyleAttributes.Background">
            <summary>
            Background 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.ParentStyleAttributes.Protection">
            <summary>
            Protection 
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.RkValue">
            <summary>
            Structure that represents the value of an RK record.
            </summary>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.RkValue.#ctor(System.Int32)">
            <summary>
            The constructor for the RK record.
            </summary>
            <param name="rk">The raw RK value to interpret.</param>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.RkValue.Value">
            <summary>
            The value of the RK record.
            </summary>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.RkValue.ToString">
            <summary>
            Method for getting the string value of the RK record.
            </summary>
            <returns>The string value of the RK record.</returns>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.RotationType">
            <summary>
            Rotation type enumeration.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.RotationType.None">
            <summary>
            None 
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.RotationType.CounterClockwise">
            <summary>
            Counter Clockwise
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.RotationType.ClockWise">
            <summary>
            Clock Wise
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.RotationType.TopToBottom">
            <summary>
            Top To Bottom
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.Rotation">
            <summary>
            Rotation enumeration.
            </summary>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.Rotation.#ctor(System.Byte)">
            <summary>
            Constructor for the rotation
            </summary>
            <param name="rotationAngle">The rotation angle.</param>
            <remarks>The rotation angle must be a value less than 180 or equal to 255</remarks>
            <exception cref="T:System.ArgumentException">Exception is thrown if value is invalid.</exception>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.Rotation.RotationAngle">
            <summary>
            The rotation angle.
            </summary>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.Rotation.RotationType">
            <summary>
            The rotation type.
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.RowHeight">
            <summary>
            The height of the row.
            </summary>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.RowHeight.#ctor(System.UInt16)">
            <summary>
            Constructor.
            </summary>
            <param name="height">The row height.</param>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.RowHeight.HeightInTwips">
            <summary>
            Method for converting the height to twips.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.RowHeight.DefaultHeight">
            <summary>
            Determines if the current height is the default height.
            </summary>
            <returns>Returns true if the current height is the default height.</returns>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.RowOptionFlags">
            <summary>
            Row options.
            </summary>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.RowOptionFlags.#ctor(System.UInt16)">
            <summary>
            The constructor.
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.RowOptionFlags.OutlineLevel">
            <summary>
            Determines the outline level.
            </summary>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.RowOptionFlags.Collapsed">
            <summary>
            Determines if the row is collapsed.
            </summary>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.RowOptionFlags.ZeroHeight">
            <summary>
            Determines if the row height is zero.
            </summary>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.RowOptionFlags.Unsynced">
            <summary>
            Detemines if the row is unsynced.
            </summary>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.RowOptionFlags.Formatted">
            <summary>
            Determines if a row is formatted.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.SheetType">
            <summary>
            Sheet type enumeration.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.SheetType.WorkSheet">
            <summary>
            WorkSheet
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.SheetType.Chart">
            <summary>
            Chart
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.SheetType.VBModule">
            <summary>
            VBModule
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.TypeAndProtection">
            <summary>
            Type and protection options.
            </summary>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.TypeAndProtection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="val">The raw type and protection options.</param>
        </member>
        <member name="M:Koogra.Excel.ValueTypes.TypeAndProtection.#ctor(System.Byte)">
            <summary>
            Constructor.
            </summary>
            <param name="val">The raw type and protection options.</param>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.TypeAndProtection.Locked">
            <summary>
            Locked.
            </summary>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.TypeAndProtection.Hidden">
            <summary>
            Hidden.
            </summary>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.TypeAndProtection.IsStyle">
            <summary>
            Is style.
            </summary>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.TypeAndProtection.IsCell">
            <summary>
            Is cell.
            </summary>
        </member>
        <member name="P:Koogra.Excel.ValueTypes.TypeAndProtection.Lotus123">
            <summary>
            Lotus 123.
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.Version">
            <summary>
            Version enumeration.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.Version.Unsupported">
            <summary>
            Unsupported
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.Version.Biff5_7">
            <summary>
            Biff5_7 - Excel 95 - 97
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.Version.Biff8">
            <summary>
            Biff 8 - Excel 2000
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.VerticalAlignment">
            <summary>
            Vertical alignment enumeration.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.VerticalAlignment.Top">
             <summary>
            Top 
             </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.VerticalAlignment.Centered">
            <summary>
            Centered
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.VerticalAlignment.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.VerticalAlignment.Justified">
            <summary>
            Justified
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.VerticalAlignment.Distributed">
            <summary>
            Distributed
            </summary>
        </member>
        <member name="T:Koogra.Excel.ValueTypes.VisibilityType">
            <summary>
            Visibility enumeration.
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.VisibilityType.Visible">
            <summary>
            Visible
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.VisibilityType.Hidden">
            <summary>
            Hidden
            </summary>
        </member>
        <member name="F:Koogra.Excel.ValueTypes.VisibilityType.StrongHidden">
            <summary>
            Strong Hidden
            </summary>
        </member>
        <member name="T:Koogra.Excel.Workbook">
            <summary>
            Represents a workbook.
            </summary>
        </member>
        <member name="M:Koogra.Excel.Workbook.#ctor(System.String)">
            <summary>
            File path constructor.
            </summary>
            <param name="path">The path to the excel file.</param>
        </member>
        <member name="M:Koogra.Excel.Workbook.#ctor(System.IO.Stream)">
            <summary>
            Stream constructor.
            </summary>
            <param name="stream">The stream that has excel file data.</param>
        </member>
        <member name="M:Koogra.Excel.Workbook.#ctor(Koogra.Storage.CompoundFile)">
            <summary>
            CompoundFile constructor.
            </summary>
            <param name="doc">The compound file that has excel file data.</param>
        </member>
        <member name="P:Koogra.Excel.Workbook.Sheets">
            <summary>
            The worksheets in the workbook.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Workbook.Styles">
            <summary>
            The style collection table.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Workbook.Formats">
            <summary>
            The format collection table.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Workbook.Fonts">
            <summary>
            The font collection table.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Workbook.Palette">
            <summary>
            The color palette collection table.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Workbook.HyperLinks">
            <summary>
            The hyperlink table
            </summary>
        </member>
        <member name="T:Koogra.Excel.Worksheet">
            <summary>
            Represents a worksheet in a workbook.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Worksheet.Name">
            <summary>
            The name of the worksheet.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Worksheet.Rows">
            <summary>
            The collection of rows in the worksheet.
            </summary>
        </member>
        <member name="P:Koogra.Excel.Worksheet.HyperLinks">
            <summary>
            The hyperlink table/collection in the worksheet.
            </summary>
        </member>
        <member name="T:Koogra.Excel.WorksheetCollection">
            <summary>
            Collection class of Worksheet objects.
            </summary>
        </member>
        <member name="M:Koogra.Excel.WorksheetCollection.GetByName(System.String)">
            <summary>
            Retrieves a worksheet given its name.
            </summary>
            <param name="index">The name of the worksheet.</param>
            <returns>Returns null if the worksheet cannot be found.</returns>
            <remarks>Search is case sensitive.</remarks>
        </member>
        <member name="M:Koogra.Excel.WorksheetCollection.GetByName(System.String,System.Boolean)">
            <summary>
            Retrieves a worksheet given its name.
            </summary>
            <param name="index">The name of the worksheet.</param>
            <param name="ignoreCase">Set to True to perform a case insenstive match, False if otherwise.</param>
            <returns>Returns null if the worksheet cannot be found.</returns>
            <remarks>Search is case sensitive.</remarks>
        </member>
        <member name="T:Koogra.ICell">
            <summary>
            Abstract for a cell.
            </summary>
        </member>
        <member name="P:Koogra.ICell.Value">
            <summary>
            The raw value of the cell.
            </summary>
        </member>
        <member name="M:Koogra.ICell.GetFormattedValue">
            <summary>
            Retrieves the formatted value of the cell.
            </summary>
            <remarks>
            Uses the Win32 VarFormat function.
            </remarks>
            <returns>Returns the formatted value of the cell of possibly null if the cell has a null value.</returns>
        </member>
        <member name="P:Koogra.ICell.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Koogra.IRow">
            <summary>
            Abstract for a row.
            </summary>
        </member>
        <member name="M:Koogra.IRow.IsEmpty">
            <summary>
            Method to determine if the row is empty.
            </summary>
            <returns>Returns True if the row mostly contains null or empty string cells.</returns>
        </member>
        <member name="M:Koogra.IRow.GetCell(System.UInt32)">
            <summary>
            Returns a cell at the specified index.
            </summary>
            <param name="index">The index of the cell.</param>
            <returns>
            Returns a <see cref="T:Koogra.ICell"/> that exists at the specified index.
            
            Should return null if no cell exists.
            </returns>
        </member>
        <member name="T:Koogra.IRows">
            <summary>
            Abstract for the rows in a worksheet.
            </summary>
        </member>
        <member name="M:Koogra.IRows.GetRow(System.UInt32)">
            <summary>
            Retries a row at the specified index.
            </summary>
            <param name="index">The index for the row.</param>
            <returns>
            Return a <see cref="T:Koogra.IRow"/> at the specified index.
            
            Returns null if no row exists at the specified index.
            </returns>
        </member>
        <member name="T:Koogra.IWorkbook">
            <summary>
            Abstract for a workbook.
            </summary>
        </member>
        <member name="P:Koogra.IWorkbook.Worksheets">
            <summary>
            Returns the worksheets available in this workbook.
            </summary>
        </member>
        <member name="T:Koogra.IWorksheet">
            <summary>
            Abstract for a worksheet.
            </summary>
        </member>
        <member name="P:Koogra.IWorksheet.Name">
            <summary>
            The worksheet name.
            </summary>
        </member>
        <member name="P:Koogra.IWorksheet.Rows">
            <summary>
            The worksheet rows.
            </summary>
        </member>
        <member name="P:Koogra.IWorksheet.FirstRow">
            <summary>
            The first non-empty row index in the worksheet.
            </summary>
        </member>
        <member name="P:Koogra.IWorksheet.LastRow">
            <summary>
            The Last non-empty row index in the worksheet.
            </summary>
        </member>
        <member name="P:Koogra.IWorksheet.FirstCol">
            <summary>
            The first non-empty column index in the worksheet.
            </summary>
        </member>
        <member name="P:Koogra.IWorksheet.LastCol">
            <summary>
            The last non-empty column index in the worksheet.
            </summary>
        </member>
        <member name="T:Koogra.IWorksheets">
            <summary>
            Abstract for a collection of worksheets.
            </summary>
        </member>
        <member name="M:Koogra.IWorksheets.EnumerateWorksheetNames">
            <summary>
            Retrieves the available worksheet names for the workbook.
            </summary>
            <returns>Enumerator for the worksheet names.</returns>
        </member>
        <member name="M:Koogra.IWorksheets.GetWorksheetByName(System.String)">
            <summary>
            Retrieves a worksheet by it's name.
            
            This method is case sensitive.
            </summary>
            <param name="name">The case sensitive worksheet name.</param>
            <returns>
            A <see cref="T:Koogra.IWorksheet"/> that matches the requested name.
            
            Null if no matching name is found.</returns>
        </member>
        <member name="M:Koogra.IWorksheets.GetWorksheetByName(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name">The case sensitive worksheet name.</param>
            <param name="ignoreCase">Set to True for a case insensitive match, False if otherwise.</param>
            <returns>
            A <see cref="T:Koogra.IWorksheet"/> that matches the requested name.
            
            Null if no matching name is found.</returns>
        </member>
        <member name="M:Koogra.IWorksheets.GetWorksheetByIndex(System.Int32)">
            <summary>
            Retrieve a worksheet by ordinal position.
            </summary>
            <param name="index">The index where to retrieve the worksheet.</param>
            <returns>A <see cref="T:Koogra.IWorksheet"/> at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Is thrown if there is no worksheet at the specified index.</exception>
        </member>
        <member name="P:Koogra.IWorksheets.Count">
            <summary>
            Returns the count of available worksheets in this workbook.
            </summary>
        </member>
        <member name="T:Koogra.Storage.CompoundFile">
            <summary>
            CompoundFile.
            </summary>
        </member>
        <member name="M:Koogra.Storage.CompoundFile.#ctor(System.IO.Stream)">
            <summary>
            Stream constructor.
            </summary>
            <param name="stream">The stream that contains the CompoundFile.</param>
        </member>
        <member name="M:Koogra.Storage.CompoundFile.OpenStream(System.String)">
            <summary>
            Opens a stream by locating the stream by name.
            </summary>
            <param name="name">The name of the string.</param>
            <returns>Returns the stream.</returns>
            <exception cref="T:System.IO.IOException">Exception is thrown if the stream does not exist.</exception>
        </member>
        <member name="T:Koogra.Storage.Directory">
            <summary>
            Digita.VirtualFileSystem.VirtualDirectory.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Directory.#ctor(Koogra.Storage.Sectors.DirectorySectorEntryCollection,Koogra.Storage.Sectors.SectorCollection,Koogra.Storage.Sectors.Sect[])">
            <summary>
            Constructor.
            </summary>
            <param name="entries">The directory sector entries.</param>
            <param name="sectors">All the sectors.</param>
            <param name="fat">The FAT.</param>
        </member>
        <member name="P:Koogra.Storage.Directory.Root">
            <summary>
            The root directory entry.
            </summary>
        </member>
        <member name="T:Koogra.Storage.DirectoryEntry">
            <summary>
            Base class for Directory entries.
            </summary>
        </member>
        <member name="M:Koogra.Storage.DirectoryEntry.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the directory entry.</param>
        </member>
        <member name="M:Koogra.Storage.DirectoryEntry.Find(System.String)">
            <summary>
            Locates a directory entry by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Koogra.Storage.DirectoryEntry.Name">
            <summary>
            The name of the directory entry.
            </summary>
        </member>
        <member name="P:Koogra.Storage.DirectoryEntry.LeftSibling">
            <summary>
            The left sibling.
            </summary>
        </member>
        <member name="P:Koogra.Storage.DirectoryEntry.RightSibling">
            <summary>
            The right sibling.
            </summary>
        </member>
        <member name="P:Koogra.Storage.DirectoryEntry.Child">
            <summary>
            The child.
            </summary>
        </member>
        <member name="T:Koogra.Storage.DirectoryEntryFactory">
            <summary>
            Directory entry factory helper class.
            </summary>
        </member>
        <member name="M:Koogra.Storage.DirectoryEntryFactory.CreateEntry(Koogra.Storage.Sectors.DirectorySectorEntry,Koogra.Storage.Sectors.DirectorySectorEntryCollection,Koogra.Storage.Sectors.SectorCollection,Koogra.Storage.Sectors.Sect[])">
            <summary>
            Builds a directory entry and populates its correct type, children and siblings.
            </summary>
            <param name="entry">The directory sector entry.</param>
            <param name="entries">The current entries.</param>
            <param name="sectors">The data sectors.</param>
            <param name="fat">The FAT.</param>
            <returns>The correct DirectoryEntry object.</returns>
        </member>
        <member name="T:Koogra.Storage.DirectoryEntryNameComparer">
            <summary>
            Helper class for comparing directory entry names.
            </summary>
        </member>
        <member name="M:Koogra.Storage.DirectoryEntryNameComparer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Koogra.Storage.DirectoryEntryNameComparer.Compare(System.String,System.String)">
            <summary>
            Compares directory names.
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="T:Koogra.Storage.GenericDirectoryEntry">
            <summary>
            GenericDirectoryEntry. Class for entries whose contents are never interpreted.
            </summary>
        </member>
        <member name="M:Koogra.Storage.GenericDirectoryEntry.#ctor(System.String,Koogra.Storage.Sectors.Stgty)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="type">The entry type.</param>
        </member>
        <member name="P:Koogra.Storage.GenericDirectoryEntry.Type">
            <summary>
            The entry type.
            </summary>
        </member>
        <member name="T:Koogra.Storage.Sectors.Constants">
            <summary>
            Compound file constants.
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Constants.SECTOR_SIZE">
            <summary>
            Default sector size.
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Constants.DIR_ENTRY_SIZE">
            <summary>
            Default directory entry size.
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Constants.MAX_SECT">
            <summary>
            Maximum section size.
            </summary>
        </member>
        <member name="T:Koogra.Storage.Sectors.DeColor">
            <summary>
            Red black indication enumeration
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.DeColor.Red">
             <summary>
            Red 
             </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.DeColor.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="T:Koogra.Storage.Sectors.DifSector">
            <summary>
            Double indirect FAT sector.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.DifSector.#ctor(System.IO.Stream)">
            <summary>
            Stream constructor.
            </summary>
            <param name="stream">The stream to read the sector contents from.</param>
        </member>
        <member name="P:Koogra.Storage.Sectors.DifSector.SectFat">
            <summary>
            The collection of FAT sectors.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DifSector.NextDif">
            <summary>
            Pointer to the next DIFSector.
            </summary>
        </member>
        <member name="T:Koogra.Storage.Sectors.DirectorySector">
            <summary>
            Directory sector.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.DirectorySector.#ctor(System.IO.Stream)">
            <summary>
            Stream constructor.
            </summary>
            <param name="stream">The stream that contains the DirectorySector data.</param>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySector.Entries">
            <summary>
            The array of directory sector entries.
            </summary>
        </member>
        <member name="T:Koogra.Storage.Sectors.DirectorySectorEntry">
            <summary>
            Directory sector entry.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.DirectorySectorEntry.#ctor(System.IO.Stream)">
            <summary>
            Stream constructor.
            </summary>
            <param name="stream">The stream that contains the DirectorySectorEntry data.</param>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.Name">
            <summary>
            Entry name.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.NameLength">
            <summary>
            Name length.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.Type">
            <summary>
            Type.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.Color">
            <summary>
            Color.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.LeftSibling">
            <summary>
            Pointer to left sibling.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.RightSibling">
            <summary>
            Pointer to right sibling.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.Child">
            <summary>
            Pointer to child.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.ClsId">
            <summary>
            Class id.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.UserFlags">
            <summary>
            User flags.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.CreateTimeStamp">
            <summary>
            Creation time stamp.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.ModifyTimeStamp">
            <summary>
            Modification time stamp.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.SectStart">
            <summary>
            Stream start.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.Size">
            <summary>
            Stream size.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntry.PropType">
            <summary>
            Property type.
            </summary>
        </member>
        <member name="T:Koogra.Storage.Sectors.DirectorySectorEntryCollection">
            <summary>
            Collection class for DirectorySectorEntry objects.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.DirectorySectorEntryCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.DirectorySectorEntryCollection.Add(Koogra.Storage.Sectors.DirectorySectorEntry)">
            <summary>
            Adds a directory sector entry and returns its Sid
            </summary>
            <param name="entry">The directory sector entry.</param>
            <returns>Returns the Sid of the entry.</returns>
        </member>
        <member name="P:Koogra.Storage.Sectors.DirectorySectorEntryCollection.Item(Koogra.Storage.Sectors.Sid)">
            <summary>
            Indexer for retrieving a DirectorySectorEntry
            </summary>
        </member>
        <member name="T:Koogra.Storage.Sectors.FatSector">
            <summary>
            FAT Sector.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.FatSector.#ctor(System.IO.Stream)">
            <summary>
            Stream constructor.
            </summary>
            <param name="stream">The stream that contains the FatSector data.</param>
        </member>
        <member name="P:Koogra.Storage.Sectors.FatSector.SectFat">
            <summary>
            The Fat array chain.
            </summary>
        </member>
        <member name="T:Koogra.Storage.Sectors.HeaderSector">
            <summary>
            Header sector.
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.HeaderSector.MAGIC_NUMBER">
            <summary>
            The magic number that starts any compound file.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.HeaderSector.#ctor(System.IO.Stream)">
            <summary>
            Stream constructor.
            </summary>
            <param name="stream">The stream that contains the HeaderSector data.</param>
            <exception cref="T:System.Exception">Throws an exception if it encounters any invalid data in the stream.</exception>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.ClsId">
            <summary>
            Class Id.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.MinorVer">
            <summary>
            Minor Version.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.DllVer">
            <summary>
            Dll Version.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.ByteOrder">
            <summary>
            Byte Order.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.SectShift">
            <summary>
            Sector size in powers of 2.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.MiniSectShift">
            <summary>
            Mini-sector size in powers of 2.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.Reserved">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.Reserved1">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.Reserved2">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.SectFatCount">
            <summary>
            FAT sector chain count.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.SectDirStart">
            <summary>
            Directory sector start.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.Signature">
            <summary>
            Transaction signature.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.MiniSectorCutoff">
            <summary>
            Maximum ministream size.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.SectMiniFatStart">
            <summary>
            Mini sector start.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.SectMiniFatCount">
            <summary>
            Mini FAT sector chain count.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.SectDifStart">
            <summary>
            Double Indirect FAT Sector start.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.SectDifCount">
            <summary>
            Double Indirect FAT count.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.HeaderSector.SectFat">
            <summary>
            First 109 Sects of the FAT
            </summary>
        </member>
        <member name="T:Koogra.Storage.Sectors.MiniFatSector">
            <summary>
            Mini FAT Sector.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.MiniFatSector.#ctor(System.IO.Stream)">
            <summary>
            Stream constructor.
            </summary>
            <param name="stream">The stream that contains the MiniFatSector data.</param>
        </member>
        <member name="P:Koogra.Storage.Sectors.MiniFatSector.SectFat">
            <summary>
            The chain array of mini fat sectors.
            </summary>
        </member>
        <member name="T:Koogra.Storage.Sectors.Sect">
            <summary>
            Sector index.
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Sect.DIFSECT">
            <summary>
            DifSect index.
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Sect.FATSECT">
            <summary>
            FatSect index.
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Sect.END_OF_CHAIN">
            <summary>
            End of chain index.
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Sect.FREE_SECT">
            <summary>
            Free sector index.
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Sect.ZERO">
            <summary>
            Zero value.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sect.#ctor(System.UInt32)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The index of the Sect.</param>
        </member>
        <member name="P:Koogra.Storage.Sectors.Sect.IsDifSect">
            <summary>
            Returns true is Sect is a DifSect
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.Sect.IsFatSect">
            <summary>
            Returns true if Sect is a FatSect
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.Sect.IsEndOfChain">
            <summary>
            Returns true if Sect is the end of the chain.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.Sect.IsFree">
            <summary>
            Returns true if Sect has no data.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.Sect.Value">
            <summary>
            Returns the index of the Sect.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sect.ToInt">
            <summary>
            Casts the sect to an integer.
            </summary>
            <returns>The integer equivalent of the Sect.</returns>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sect.Equals(System.Object)">
            <summary>
            Compares a Sect.
            </summary>
            <param name="obj">The other value to compare.</param>
            <returns>Returns true if obj == Value .</returns>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sect.GetHashCode">
            <summary>
            Returns the hashcode based on Value.
            </summary>
            <returns>Returns the hashcode based on Value.</returns>
        </member>
        <member name="T:Koogra.Storage.Sectors.Sector">
            <summary>
            Sector class.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sector.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Koogra.Storage.Sectors.SectorCollection">
            <summary>
            Container class for Sector objects.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.SectorCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.SectorCollection.#ctor(System.Int32)">
            <summary>
            Initial capacity constructor.
            </summary>
            <param name="initialCapacity">The initial capacity of the collection.</param>
        </member>
        <member name="P:Koogra.Storage.Sectors.SectorCollection.Item(Koogra.Storage.Sectors.Sect)">
            <summary>
            Indexer of the collection.
            </summary>
        </member>
        <member name="T:Koogra.Storage.Sectors.Sid">
            <summary>
            Represents a DirectorySectorEntry index.
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Sid.EOF">
            <summary>
            Represents the end of the file.
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Sid.ZERO">
            <summary>
            Represents a zero Sid.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sid.#ctor(System.UInt32)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The index of the Sid.</param>
        </member>
        <member name="P:Koogra.Storage.Sectors.Sid.IsEof">
            <summary>
            Returns true if this Sid indicates end of file.
            </summary>
        </member>
        <member name="P:Koogra.Storage.Sectors.Sid.Value">
            <summary>
            Returns the value of this Sid.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sid.ToInt">
            <summary>
            Converts a Sid to an integer .
            </summary>
            <returns>Returns the integer equivalent of the Sid.</returns>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sid.Equals(System.Object)">
            <summary>
            Compares Value to obj.
            </summary>
            <param name="obj">The value to compare.</param>
            <returns>Returns true if obj == Value .</returns>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sid.GetHashCode">
            <summary>
            Returns the hashcode of Value.
            </summary>
            <returns>Returns the hashcode of Value.</returns>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sid.op_Equality(Koogra.Storage.Sectors.Sid,Koogra.Storage.Sectors.Sid)">
            <summary>
            Compares a Sid to another Sid for equality.
            </summary>
            <param name="l">The left Sid.</param>
            <param name="r">The right Sid.</param>
            <returns>Returns true if l is equal to r.</returns>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sid.op_Inequality(Koogra.Storage.Sectors.Sid,Koogra.Storage.Sectors.Sid)">
            <summary>
            Compares a Sid to another Sid for inequality.
            </summary>
            <param name="l">The left Sid.</param>
            <param name="r">The right Sid.</param>
            <returns>Returns true if l is not equal to r.</returns>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sid.op_LessThan(Koogra.Storage.Sectors.Sid,Koogra.Storage.Sectors.Sid)">
            <summary>
            Compares a Sid to another Sid.
            </summary>
            <param name="l">The left Sid.</param>
            <param name="r">The right Sid.</param>
            <returns>Returns true if l is less than r.</returns>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sid.op_GreaterThan(Koogra.Storage.Sectors.Sid,Koogra.Storage.Sectors.Sid)">
            <summary>
            Compares a Sid to another Sid.
            </summary>
            <param name="l">The left Sid.</param>
            <param name="r">The right Sid.</param>
            <returns>Returns true if l is greater than r.</returns>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sid.op_LessThanOrEqual(Koogra.Storage.Sectors.Sid,Koogra.Storage.Sectors.Sid)">
            <summary>
            Compares a Sid to another Sid.
            </summary>
            <param name="l">The left Sid.</param>
            <param name="r">The right Sid.</param>
            <returns>Returns true if l less than or equal to r.</returns>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sid.op_GreaterThanOrEqual(Koogra.Storage.Sectors.Sid,Koogra.Storage.Sectors.Sid)">
            <summary>
            Compares a Sid to another Sid for equality.
            </summary>
            <param name="l">The left Sid.</param>
            <param name="r">The right Sid.</param>
            <returns>Returns true if l is greater than or equal to r.</returns>
        </member>
        <member name="M:Koogra.Storage.Sectors.Sid.CompareTo(System.Object)">
            <summary>
            Compares this Sid to another Sid.
            </summary>
            <param name="obj">The other Sid.</param>
            <returns>Returns 0, &lt; 0 or &gt; 0 if obj is equal, less or greater than this Sid respectively.</returns>
        </member>
        <member name="T:Koogra.Storage.Sectors.Stgty">
            <summary>
            Stream type enumeration.
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Stgty.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Stgty.Storage">
            <summary>
            Storage
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Stgty.Stream">
            <summary>
            Stream
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Stgty.LockBytes">
            <summary>
            LockBytes
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Stgty.Property">
            <summary>
            Propery
            </summary>
        </member>
        <member name="F:Koogra.Storage.Sectors.Stgty.Root">
             <summary>
            Root
             </summary>
        </member>
        <member name="T:Koogra.Storage.Sectors.StorageSector">
            <summary>
            Storage sector.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.StorageSector.#ctor(System.IO.Stream)">
            <summary>
            Stream constructor.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:Koogra.Storage.Sectors.StorageSector.Data">
            <summary>
            The data in the StorageSector.
            </summary>
        </member>
        <member name="M:Koogra.Storage.Sectors.StorageSector.GetStream">
            <summary>
            Returns a stream to the data in the StorageSector.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Koogra.Storage.StorageEntry">
            <summary>
            StorageEntry.
            </summary>
        </member>
        <member name="M:Koogra.Storage.StorageEntry.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Koogra.Storage.StreamEntry">
            <summary>
            StreamEntry.
            </summary>
        </member>
        <member name="M:Koogra.Storage.StreamEntry.#ctor(System.String,System.Int64,Koogra.Storage.Sectors.Sect,Koogra.Storage.Sectors.SectorCollection,Koogra.Storage.Sectors.Sect[])">
            <summary>
            Constructor.
            </summary>
            <param name="name">The entry Name.</param>
            <param name="length">The stream length.</param>
            <param name="dataOffset">Data offset.</param>
            <param name="sectors">The sectors.</param>
            <param name="fat">The FAT.</param>
        </member>
        <member name="P:Koogra.Storage.StreamEntry.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="P:Koogra.Storage.StreamEntry.Length">
            <summary>
            Data length.
            </summary>
        </member>
        <member name="T:Koogra.Text.Reader">
            <summary>
            Utility class for reading Text from BinaryReaders
            </summary>
        </member>
        <member name="M:Koogra.Text.Reader.ReadSimpleUnicodeString(System.IO.BinaryReader)">
            <summary>
            Reads a string where the first 2 bytes are its length and is followed by unicode characters.
            </summary>
            <param name="reader">The string reader.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:Koogra.Text.Reader.ReadSimpleAsciiString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an ascii string given its length.
            </summary>
            <param name="reader">The string reader.</param>
            <param name="len">The length of the string.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:Koogra.Text.Reader.ReadSimpleUnicodeString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a unicode string given its length.
            </summary>
            <param name="reader">The string reader.</param>
            <param name="len">The length of the string.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:Koogra.Text.Reader.ReadComplexString(System.IO.BinaryReader)">
            <summary>
            Reads an encoded string where the length is followed by options that determine if the string is ascii, unicode, rtf, etc.
            </summary>
            <param name="reader">The string reader.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:Koogra.Text.Reader.ReadComplexString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an encoded string given its length where the first byte are options that determine if the string is ascii, unicode, rtf, etc.
            </summary>
            <param name="reader">The string reader.</param>
            <param name="len">The string length.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="T:Koogra.WorkbookFactory">
            <summary>
            Helper class for returning an appropriate <see cref="T:Koogra.IWorkbook"/> implementation.
            </summary>
        </member>
        <member name="M:Koogra.WorkbookFactory.GetExcelBIFFReader(System.String)">
            <summary>
            Returns a <see cref="T:Koogra.IWorkbook"/> for BIFF based Excel 97 and up BIFF based files.
            </summary>
            <param name="path">The path to the Excel file.</param>
            <returns>Returns a <see cref="T:Koogra.IWorkbook"/> for BIFF based Excel 97 and up files.</returns>
        </member>
        <member name="M:Koogra.WorkbookFactory.GetExcelBIFFReader(System.IO.Stream)">
            <summary>
            Returns a <see cref="T:Koogra.IWorkbook"/> for BIFF based Excel 97 and up BIFF based files.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains a BIFF based Excel file.</param>
            <returns>Returns a <see cref="T:Koogra.IWorkbook"/> for BIFF based Excel 97 and up BIFF based files.</returns>
        </member>
        <member name="M:Koogra.WorkbookFactory.GetExcel2007Reader(System.String)">
            <summary>
            Returns a <see cref="T:Koogra.IWorkbook"/> for Excel 2007 .xlsx files.
            </summary>The path to the Excel file.
            <param name="path">The path to the Excel file.</param>
            <returns>Returns a <see cref="T:Koogra.IWorkbook"/> for Excel 2007 .xlsx files.</returns>
        </member>
        <member name="M:Koogra.WorkbookFactory.GetExcel2007Reader(System.Byte[])">
            <summary>
            Returns a <see cref="T:Koogra.IWorkbook"/> for Excel 2007 .xlsx files.
            </summary>The path to the Excel file.
            <param name="bytes"><see cref="!:bytes"/> that contains a xlsx based Excel file.</param>
            <returns>Returns a <see cref="T:Koogra.IWorkbook"/> for Excel 2007 .xlsx files.</returns>
        </member>
        <member name="T:WebDAVSharp.Server.Exceptions.WebDavConflictException">
            <summary>
            This exception is thrown when a request cannot be completed due to a conflict with the requested
            resource.
            Statuscode: 409 Conflict.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavConflictException" /> class.
            </summary>
            <param name="message">The exception message stating the reason for the exception being thrown.</param>
            <param name="innerException">The 
            <see cref="T:System.Exception" /> that is the cause for this exception;
            or 
            <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:WebDAVSharp.Server.Exceptions.WebDavException">
            <summary>
            This exception, or a descendant, is thrown when requests fail, specifying the status code
            that the server should return back to the client.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavException" /> class.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavException" /> class.
            </summary>
            <param name="message">The exception message stating the reason for the exception being thrown.</param>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavException" /> class.
            </summary>
            <param name="message">The exception message stating the reason for the exception being thrown.</param>
            <param name="innerException">The 
            <see cref="T:System.Exception" /> that is the cause for this exception;
            or 
            <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavException.#ctor(System.Net.HttpStatusCode,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavException" /> class.
            </summary>
            <param name="statusCode">The HTTP status code that this <see cref="T:WebDAVSharp.Server.Exceptions.WebDavException" /> maps to.</param>
            <param name="message">The exception message stating the reason for the exception being thrown.</param>
            <param name="innerException">The 
            <see cref="T:System.Exception" /> that is the cause for this exception;
            or 
            <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="P:WebDAVSharp.Server.Exceptions.WebDavException.StatusCode">
            <summary>
            Gets the HTTP status code that this <see cref="T:WebDAVSharp.Server.Exceptions.WebDavException" /> maps to.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:WebDAVSharp.Server.Exceptions.WebDavException.StatusDescription">
            <summary>
            Gets the status description for the HTTP <see cref="P:WebDAVSharp.Server.Exceptions.WebDavException.StatusCode" />.
            </summary>
            <value>
            The status description.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavException.GetMessage(System.Net.HttpStatusCode,System.String)">
            <summary>
            Gets the message.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="message">The message.</param>
            <returns>The message and the status description.</returns>
        </member>
        <member name="T:WebDAVSharp.Server.Exceptions.WebDavForbiddenException">
            <summary>
            Statuscode: 403 Forbidden.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavForbiddenException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavForbiddenException" /> class.
            </summary>
            <param name="message">The exception message stating the reason for the exception being thrown.</param>
            <param name="innerException">The 
            <see cref="T:System.Exception" /> that is the cause for this exception;
            or 
            <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:WebDAVSharp.Server.Exceptions.WebDavInternalServerException">
            <summary>
            This exception is thrown when the server throws a different exception than the standard
            ones that 
            <see cref="!:WebDavServer" /> knows how to respond to.
            Statuscode: 500 Internal Server Error.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavInternalServerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavInternalServerException" /> class.
            </summary>
            <param name="message">The exception message stating the reason for the exception being thrown.</param>
            <param name="innerException">The 
            <see cref="T:System.Exception" /> that is the cause for this exception;
            or 
            <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:WebDAVSharp.Server.Exceptions.WebDavLengthRequiredException">
            <summary>
            Statuscode: 411 Length Required.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavLengthRequiredException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavLengthRequiredException" /> class.
            </summary>
            <param name="message">The exception message stating the reason for the exception being thrown.</param>
            <param name="innerException">The 
            <see cref="T:System.Exception" /> that is the cause for this exception;
            or 
            <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:WebDAVSharp.Server.Exceptions.WebDavMethodNotAllowedException">
            <summary>
            This exception is thrown when a request uses a HTTP method to request or manipulate a resource
            for which the specified HTTP method is not allowed.
            Statuscode: 405 Method Not Allowed.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavMethodNotAllowedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavMethodNotAllowedException" /> class.
            </summary>
            <param name="message">The exception message stating the reason for the exception being thrown.</param>
            <param name="innerException">The 
            <see cref="T:System.Exception" /> that is the cause for this exception;
            or 
            <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:WebDAVSharp.Server.Exceptions.WebDavNotFoundException">
            <summary>
            This exception is thrown when a request tries to access a resource that does not exist.
            Statuscode: 404 Not Found.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavNotFoundException" /> class.
            </summary>
            <param name="message">The exception message stating the reason for the exception being thrown.</param>
            <param name="innerException">The 
            <see cref="T:System.Exception" /> that is the cause for this exception;
            or 
            <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:WebDAVSharp.Server.Exceptions.WebDavNotImplementedException">
            <summary>
            This exception is thrown when a request uses a HTTP method or functionality that has yet to
            be implemented.
            Statuscode: 501 Not Implemented.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavNotImplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavNotImplementedException" /> class.
            </summary>
            <param name="message">The exception message stating the reason for the exception being thrown.</param>
            <param name="innerException">The 
            <see cref="T:System.Exception" /> that is the cause for this exception;
            or 
            <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:WebDAVSharp.Server.Exceptions.WebDavPreconditionFailedException">
            <summary>
            This exception is thrown when one of the preconditions failed.
            Statuscode: 412 Precondition Failed.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavPreconditionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavPreconditionFailedException" /> class.
            </summary>
            <param name="message">The exception message stating the reason for the exception being thrown.</param>
            <param name="innerException">The 
            <see cref="T:System.Exception" /> that is the cause for this exception;
            or 
            <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException">
            <summary>
            This exception is thrown when the user is not authorized to execute the request.
            Statuscode: 401 Unauthorized.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavNotFoundException" /> class.
            </summary>
            <param name="message">The exception message stating the reason for the exception being thrown.</param>
            <param name="innerException">The 
            <see cref="T:System.Exception" /> that is the cause for this exception;
            or 
            <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:WebDAVSharp.Server.Exceptions.WebDavUnsupportedMediaTypeException">
            <summary>
            This exception is thrown when the media type is unsupported.
            Statuscode: 415 Unsupported Media Type
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Exceptions.WebDavUnsupportedMediaTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Exceptions.WebDavUnsupportedMediaTypeException" /> class.
            </summary>
            <param name="message">The exception message stating the reason for the exception being thrown.</param>
            <param name="innerException">The 
            <see cref="T:System.Exception" /> that is the cause for this exception;
            or 
            <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:WebDAVSharp.Server.LockProperty">
            <summary>
            The property with all the information of a lock
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.LockProperty.#ctor">
            <summary>
            The standard constructor
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.LockProperty.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            The constructor with all the specific values
            </summary>
            <param name="locktype">The locktype of the lock</param>
            <param name="lockscope">The lockscope of the lock</param>
            <param name="depth">The depth of the lock</param>
            <param name="owner">The owner of the lock</param>
            <param name="timeout">The timeout of the lock</param>
            <param name="locktoken">The locktoken.</param>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.IWebDavMethodHandler">
            <summary>
            This interface must be implemented by a class that will respond
            to requests from a client by handling specific HTTP methods.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.IWebDavMethodHandler.Names">
            <summary>
            Gets the collection of the names of the HTTP methods handled by this instance.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.IWebDavMethodHandler.ProcessRequest(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Processes the request.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The 
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavCopyMethodHandler">
            <summary>
            This class implements the <c>COPY</c> HTTP method for WebDAV#.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.WebDavCopyMethodHandler.Names">
            <summary>
            Gets the collection of the names of the HTTP methods handled by this instance.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavCopyMethodHandler.ProcessRequest(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Processes the request.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The 
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavMethodNotAllowedException"></exception>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavCopyMethodHandler.CopyItem(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore,WebDAVSharp.Server.Stores.IWebDavStoreItem)">
            <summary>
            Copies the item.
            </summary>
            <param name="server">The server.</param>
            <param name="context">The context.</param>
            <param name="store">The store.</param>
            <param name="source">The source.</param>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavForbiddenException"></exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavPreconditionFailedException"></exception>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavDeleteMethodHandler">
            <summary>
            This class implements the <c>DELETE</c> HTTP method for WebDAV#.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.WebDavDeleteMethodHandler.Names">
            <summary>
            Gets the collection of the names of the HTTP methods handled by this instance.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavDeleteMethodHandler.ProcessRequest(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Processes the request.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavGetMethodHandler">
            <summary>
            This class implements the <c>GET</c> HTTP method for WebDAV#.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.WebDavGetMethodHandler.Names">
            <summary>
            Gets the collection of the names of the verbs handled by this instance.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavGetMethodHandler.ProcessRequest(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Processes the request.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavNotFoundException"></exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavNotFoundException"><para>
              <paramref name="context" /> specifies a request for a store item that does not exist.</para>
            <para>- or -</para>
            <para>
              <paramref name="context" /> specifies a request for a store item that is not a document.</para></exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavConflictException"><paramref name="context" /> specifies a request for a store item using a collection path that does not exist.</exception>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavHeadMethodHandler">
            <summary>
            This class implements the <c>PROPFIND</c> HTTP method for WebDAV#.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.WebDavHeadMethodHandler.Names">
            <summary>
            Gets the collection of the names of the HTTP methods handled by this instance.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavHeadMethodHandler.ProcessRequest(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Processes the request.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The 
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavNotFoundException"><para>
              <paramref name="context" /> specifies a request for a store item that does not exist.</para>
            <para>- or -</para>
            <para>
              <paramref name="context" /> specifies a request for a store item that is not a document.</para></exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavConflictException"><paramref name="context" /> specifies a request for a store item using a collection path that does not exist.</exception>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavLockMethodHandler">
            <summary>
            This class implements the <c>LOCK</c> HTTP method for WebDAV#.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.WebDavLockMethodHandler.Names">
            <summary>
            Gets the collection of the names of the HTTP methods handled by this instance.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavLockMethodHandler.ProcessRequest(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Processes the request.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavPreconditionFailedException"></exception>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavMethodHandlerBase">
            <summary>
            This is the base class for <see cref="T:WebDAVSharp.Server.MethodHandlers.IWebDavMethodHandler" /> implementations.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavMethodHandlerBase.GetParentCollection(WebDAVSharp.Server.Stores.IWebDavStore,System.Uri)">
            <summary>
            Get the parent collection from the requested
            <see cref="T:System.Uri" />.
            <see cref="T:WebDAVSharp.Server.Exceptions.WebDavException" /> 409 Conflict possible.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
            <param name="childUri">The <see cref="T:System.Uri" /> object containing the specific location of the child</param>
            <returns>
            The parrent collection as an <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection" />
            </returns>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException"></exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavConflictException">
            </exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException">When the user is unauthorized and doesn't have access</exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavConflictException">When the parent collection doesn't exist</exception>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavMethodHandlerBase.GetItemFromCollection(WebDAVSharp.Server.Stores.IWebDavStoreCollection,System.Uri)">
            <summary>
            Get the item in the collection from the requested
            <see cref="T:System.Uri" />.
            <see cref="T:WebDAVSharp.Server.Exceptions.WebDavException" /> 409 Conflict possible.
            </summary>
            <param name="collection">The parent collection as a <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection" /></param>
            <param name="childUri">The <see cref="T:System.Uri" /> object containing the specific location of the child</param>
            <returns>
            The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> from the <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection" />
            </returns>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException">If user is not authorized to get access to the item</exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavNotFoundException">If item not found.</exception>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavMethodHandlerBase.GetDepthHeader(System.Web.HttpRequest)">
            <summary>
            Gets the Depth header : 0, 1 or infinity
            </summary>
            <param name="request">The <see cref="!:IHttpListenerContext" /> with the response included</param>
            <returns>
            The values 0, 1 or -1 (for infinity)
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavMethodHandlerBase.GetOverwriteHeader(System.Web.HttpRequest)">
            <summary>
            Gets the Overwrite header : T or F
            </summary>
            <param name="request">The <see cref="!:IHttpListenerRequest"/> has the header included</param>
            <returns>The <see cref="T:System.Boolean"/> true if overwrite, false if no overwrite</returns>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavMethodHandlerBase.GetTimeoutHeader(System.Web.HttpRequest)">
            <summary>
            Gets the Timeout header : Second-number
            </summary>
            <param name="request">The request with the request included</param>
            <returns>The value of the Timeout header as a string</returns>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavMethodHandlerBase.GetDestinationHeader(System.Web.HttpRequest)">
            <summary>
            Gets the Destination header as an URI
            </summary>
            <param name="request">The <see cref="!:IHttpListenerRequest"/> has the header included</param>
            <returns>The <see cref="T:System.Uri"/> containing the destination</returns>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavMethodHandlers">
            <summary>
            This class contains code to produce the built-in
            <see cref="T:WebDAVSharp.Server.MethodHandlers.IWebDavMethodHandler"/> instances known by WebDAV#.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.WebDavMethodHandlers.BuiltIn">
            <summary>
            Gets the collection of built-in <see cref="T:WebDAVSharp.Server.MethodHandlers.IWebDavMethodHandler"/>
            HTTP method handler instances.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavMethodHandlers.ScanAssemblies">
            <summary>
            Scans the WebDAV# assemblies for known <see cref="T:WebDAVSharp.Server.MethodHandlers.IWebDavMethodHandler"/>
            types.
            </summary>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavMkColMethodHandler">
            <summary>
            This class implements the <c>MKCOL</c> HTTP method for WebDAV#.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.WebDavMkColMethodHandler.Names">
            <summary>
            Gets the collection of the names of the HTTP methods handled by this instance.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavMkColMethodHandler.ProcessRequest(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Processes the request.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The 
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavUnsupportedMediaTypeException"></exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavMethodNotAllowedException"></exception>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavMoveMethodHandler">
            <summary>
            This class implements the <c>MOVE</c> HTTP method for WebDAV#.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.WebDavMoveMethodHandler.Names">
            <summary>
            Gets the collection of the names of the HTTP methods handled by this instance.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavMoveMethodHandler.ProcessRequest(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Processes the request.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The 
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavMoveMethodHandler.MoveItem(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore,WebDAVSharp.Server.Stores.IWebDavStoreItem)">
            <summary>
            Moves the
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The 
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
            <param name="sourceWebDavStoreItem">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> that will be moved</param>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavForbiddenException">If the source path is the same as the destination path</exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavPreconditionFailedException">If one of the preconditions failed</exception>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavOptionsMethodHandler">
            <summary>
            This class implements the <c>OPTIONS</c> HTTP method for WebDAV#.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.WebDavOptionsMethodHandler.Names">
            <summary>
            Gets the collection of the names of the HTTP methods handled by this instance.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavOptionsMethodHandler.ProcessRequest(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Processes the request.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The 
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavPropfindMethodHandler">
            <summary>
            This class implements the <c>PROPFIND</c> HTTP method for WebDAV#.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.WebDavPropfindMethodHandler.Names">
            <summary>
            Gets the collection of the names of the HTTP methods handled by this instance.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavPropfindMethodHandler.ProcessRequest(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Processes the request.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException"></exception>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavPropfindMethodHandler.GetRequestUri(System.String)">
            <summary>
            Get the URI to the location
            If no slash at the end of the URI, this method adds one
            </summary>
            <param name="uri">The <see cref="T:System.String" /> that contains the URI</param>
            <returns>
            The <see cref="T:System.Uri" /> that contains the given uri
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavPropfindMethodHandler.GetWebDavStoreItems(WebDAVSharp.Server.Stores.IWebDavStoreItem,System.Int32)">
            <summary>
            Convert the given 
            <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> to a 
            <see cref="T:System.Collections.Generic.List`1" /> of 
            <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />
            This list depends on the "Depth" header
            </summary>
            <param name="iWebDavStoreItem">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> that needs to be converted</param>
            <param name="depth">The "Depth" header</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />
            </returns>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavConflictException"></exception>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavPropfindMethodHandler.GetXmlDocument(System.Web.HttpRequest)">
            <summary>
            Reads the XML body of the 
            <see cref="!:IHttpListenerRequest" />
            and converts it to an 
            <see cref="T:System.Xml.XmlDocument" />
            </summary>
            <param name="request">The <see cref="!:IHttpListenerRequest" /></param>
            <returns>
            The <see cref="T:System.Xml.XmlDocument" /> that contains the request body
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavPropfindMethodHandler.GetAllProperties">
            <summary>
            Adds the standard properties for an Propfind allprop request to a <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:WebDAVSharp.Server.WebDavProperty" />
            </summary>
            <returns>
            The list with all the <see cref="T:WebDAVSharp.Server.WebDavProperty" />
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavPropfindMethodHandler.ResponseDocument(System.Web.HttpContext,System.Boolean)">
            <summary>
            Builds the <see cref="T:System.Xml.XmlDocument" /> containing the response body
            </summary>
            <param name="context">The <see cref="!:IHttpListenerContext" /></param>
            <param name="propname">The boolean defining the Propfind propname request</param>
            <returns>
            The <see cref="T:System.Xml.XmlDocument" /> containing the response body
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavPropfindMethodHandler.PropChildElement(WebDAVSharp.Server.WebDavProperty,System.Xml.XmlDocument,WebDAVSharp.Server.Stores.IWebDavStoreItem,System.Boolean)">
            <summary>
            Gives the 
            <see cref="T:System.Xml.XmlElement" /> of a 
            <see cref="T:WebDAVSharp.Server.WebDavProperty" />
            with or without values
            or with or without child elements
            </summary>
            <param name="webDavProperty">The <see cref="T:WebDAVSharp.Server.WebDavProperty" /></param>
            <param name="xmlDocument">The <see cref="T:System.Xml.XmlDocument" /> containing the response body</param>
            <param name="iWebDavStoreItem">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /></param>
            <param name="isPropname">The boolean defining the Propfind propname request</param>
            <returns>
            The <see cref="T:System.Xml.XmlElement" /> of the <see cref="T:WebDAVSharp.Server.WebDavProperty" /> containing a value or child elements
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavPropfindMethodHandler.GetWebDavPropertyValue(WebDAVSharp.Server.Stores.IWebDavStoreItem,WebDAVSharp.Server.WebDavProperty)">
            <summary>
            Gets the correct value for a <see cref="T:WebDAVSharp.Server.WebDavProperty" />
            </summary>
            <param name="webDavStoreItem">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> defines the values</param>
            <param name="davProperty">The <see cref="T:WebDAVSharp.Server.WebDavProperty" /> that needs a value</param>
            <returns>
            A <see cref="T:System.String" /> containing the value
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavPropfindMethodHandler.SendResponse(System.Web.HttpContext,System.Xml.XmlDocument)">
            <summary>
            Sends the response
            </summary>
            <param name="context">The <see cref="!:IHttpListenerContext" /> containing the response</param>
            <param name="responseDocument">The <see cref="T:System.Xml.XmlDocument" /> containing the response body</param>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavProppatchMethodHandler">
            <summary>
            This class implements the <c>PROPPATCH</c> HTTP method for WebDAV#.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.WebDavProppatchMethodHandler.Names">
            <summary>
            Gets the collection of the names of the HTTP methods handled by this instance.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavProppatchMethodHandler.ProcessRequest(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Processes the request.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The 
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavPutMethodHandler">
            <summary>
            This class implements the <c>PUT</c> HTTP method for WebDAV#.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.WebDavPutMethodHandler.Names">
            <summary>
            Gets the collection of the names of the HTTP methods handled by this instance.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavPutMethodHandler.ProcessRequest(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Processes the request.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The 
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavMethodNotAllowedException"></exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavLengthRequiredException">If the ContentLength header was not found</exception>
        </member>
        <member name="T:WebDAVSharp.Server.MethodHandlers.WebDavUnlockMethodHandler">
            <summary>
            This class implements the <c>PUT</c> HTTP method for WebDAV#.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.MethodHandlers.WebDavUnlockMethodHandler.Names">
            <summary>
            Gets the collection of the names of the HTTP methods handled by this instance.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.MethodHandlers.WebDavUnlockMethodHandler.ProcessRequest(System.Web.HttpContext,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Processes the request.
            </summary>
            <param name="server">The <see cref="!:WebDavServer" /> through which the request came in from the client.</param>
            <param name="context">The 
            <see cref="!:IHttpListenerContext" /> object containing both the request and response
            objects to use.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that the <see cref="!:WebDavServer" /> is hosting.</param>
        </member>
        <member name="T:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreBase">
            <summary>
            This class is a base class for <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> implementations.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreBase.#ctor(WebDAVSharp.Server.Stores.IWebDavStoreCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreBase" /> class.
            </summary>
            <param name="root">The root <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection" />.</param>
            <exception cref="T:System.ArgumentNullException">root</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root" /> is <c>null</c>.</exception>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreBase.Root">
            <summary>
            Gets the root collection of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" />.
            </summary>
        </member>
        <member name="T:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreDocumentBase">
            <summary>
            This is the base class for <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> implementations.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreDocumentBase.#ctor(WebDAVSharp.Server.Stores.IWebDavStoreCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreItemBase" /> class.
            </summary>
            <param name="parentCollection">The parent <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection" /> that contains this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> implementation.</param>
            <param name="name">The name of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is <c>null</c>.</exception>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreDocumentBase.MimeType">
            <summary>
            Gets or sets the mime type of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
            <value>
            The type of the MIME.
            </value>
        </member>
        <member name="T:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreItemBase">
            <summary>
            This is the base class for <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> implementations.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreItemBase.#ctor(WebDAVSharp.Server.Stores.IWebDavStoreCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreItemBase" /> class.
            </summary>
            <param name="parentCollection">The parent <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection" /> that contains this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> implementation.</param>
            <param name="name">The name of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /></param>
            <exception cref="T:System.ArgumentNullException">name</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is <c>null</c>.</exception>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreItemBase.ParentCollection">
            <summary>
            Gets the parent <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection" /> that owns this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreItemBase.Name">
            <summary>
            Gets or sets the name of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavForbiddenException"></exception>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreItemBase.CreationDate">
            <summary>
            Gets the creation date of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreItemBase.ModificationDate">
            <summary>
            Gets the modification date of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreItemBase.ItemPath">
            <summary>
            Gets the path to this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreItemBase.IsCollection">
            <summary>
            Gets if this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> is a collection.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreItemBase.Hidden">
            <summary>
            Gets the hidden state of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreItemBase.OnNameChanging(System.String,System.String)">
            <summary>
            Called before the name of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> is changing.
            </summary>
            <param name="oldName">The old name of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.</param>
            <param name="newName">The new name of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.</param>
            <returns>
            <c>true</c> if the name change is allowed;
            otherwise, 
            <c>false</c>.
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.BaseClasses.WebDavStoreItemBase.OnNameChanged(System.String,System.String)">
            <summary>
            Called after the name of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> has changed.
            </summary>
            <param name="oldName">The old name of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.</param>
            <param name="newName">The new name of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.</param>
        </member>
        <member name="T:WebDAVSharp.Server.Stores.IWebDavStore">
            <summary>
            This interface must be implemented by classes that serve as stores of collections and
            documents for the 
            <see cref="!:WebDavServer" />.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.IWebDavStore.Root">
            <summary>
            Gets the root collection of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" />.
            </summary>
            <value>
            The root.
            </value>
        </member>
        <member name="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection">
            <summary>
            This interface must be implemented by classes that operate as document collections in a store.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.IWebDavStoreCollection.Items">
            <summary>
            Gets a collection of all the items in this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection" />.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.IWebDavStoreCollection.GetItemByName(System.String)">
            <summary>
            Retrieves a store item by its name.
            </summary>
            <param name="name">The name of the store item to retrieve.</param>
            <returns>
            The store item that has the specified 
            <paramref name="name" />;
            or 
            <c>null</c> if there is no store item with that name.
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.IWebDavStoreCollection.CreateCollection(System.String)">
            <summary>
            Creates a new collection with the specified name.
            </summary>
            <param name="name">The name of the new collection.</param>
            <returns>
            The created <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection" /> instance.
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.IWebDavStoreCollection.Delete(WebDAVSharp.Server.Stores.IWebDavStoreItem)">
            <summary>
            Deletes a store item by its name.
            </summary>
            <param name="item">The name of the store item to delete.</param>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.IWebDavStoreCollection.CreateDocument(System.String)">
            <summary>
            Creates a new document with the specified name.
            </summary>
            <param name="name">The name of the new document.</param>
            <returns>
            The created <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreDocument" /> instance.
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.IWebDavStoreCollection.CopyItemHere(WebDAVSharp.Server.Stores.IWebDavStoreItem,System.String,System.Boolean)">
            <summary>
            Copies an existing store item into this collection, overwriting any existing items.
            </summary>
            <param name="source">The store item to copy from.</param>
            <param name="destinationName">The name of the copy to create of <paramref name="source" />.</param>
            <param name="includeContent">The boolean for copying the containing files/folders or not.</param>
            <returns>
            The created <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> instance.
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.IWebDavStoreCollection.MoveItemHere(WebDAVSharp.Server.Stores.IWebDavStoreItem,System.String)">
            <summary>
            Moves an existing store item into this collection, overwriting any existing items.
            </summary>
            <param name="source">The store item to move.</param>
            <param name="destinationName">The 
            <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> that refers to the item that was moved,
            in its new location.</param>
            <returns>
            The moved <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> instance.
            </returns>
            <remarks>
            Note that the method should fail without creating or overwriting content in the
            target collection if the move cannot go through.
            </remarks>
        </member>
        <member name="T:WebDAVSharp.Server.Stores.IWebDavStoreDocument">
            <summary>
            This interface must be implemented by classes that will function as a store document.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.IWebDavStoreDocument.Size">
            <summary>
            Gets the size of the document in bytes.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.IWebDavStoreDocument.MimeType">
            <summary>
            Gets the mime type of <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
            <value>
            The type of the MIME.
            </value>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.IWebDavStoreDocument.Etag">
            <summary>
            Gets the etag of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
            <value>
            The etag.
            </value>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.IWebDavStoreDocument.OpenReadStream">
            <summary>
            Opens a <see cref="T:System.IO.Stream" /> object for the document, in read-only mode.
            </summary>
            <returns>
            The <see cref="T:System.IO.Stream" /> object that can be read from.
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.IWebDavStoreDocument.OpenWriteStream(System.Boolean)">
            <summary>
            Opens a <see cref="T:System.IO.Stream" /> object for the document, in write-only mode.
            </summary>
            <param name="append">A value indicating whether to append to the existing document;
            if 
            <c>false</c>, the existing content will be dropped.</param>
            <returns>
            The <see cref="T:System.IO.Stream" /> object that can be written to.
            </returns>
        </member>
        <member name="T:WebDAVSharp.Server.Stores.IWebDavStoreItem">
            <summary>
            This interface must be implemented by classes that will function as a store item,
            which is either a document (
            <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreDocument" />) or a
            collection of documents (
            <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection" />.)
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.IWebDavStoreItem.ParentCollection">
            <summary>
            Gets the parent <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection" /> that owns this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
            <value>
            The parent collection.
            </value>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.IWebDavStoreItem.Name">
            <summary>
            Gets or sets the name of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.IWebDavStoreItem.ItemPath">
            <summary>
            Gets the ItemPath of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
            <value>
            The item path.
            </value>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.IWebDavStoreItem.IsCollection">
            <summary>
            Gets if this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> is a collection.
            </summary>
            <value>
            <c>true</c> if this instance is collection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.IWebDavStoreItem.CreationDate">
            <summary>
            Gets the creation date of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
            <value>
            The creation date.
            </value>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.IWebDavStoreItem.ModificationDate">
            <summary>
            Gets the modification date of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
            <value>
            The modification date.
            </value>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.IWebDavStoreItem.Hidden">
            <summary>
            Gets the hidden state of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
            <value>
            1 if hidden, 0 if not.
            </value>
        </member>
        <member name="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStore">
            <summary>
            This class implements a disk-based <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" />.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStore" /> class.
            </summary>
            <param name="rootPath">The root path of a folder on disk to host in this <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStore" />.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rootPath" /> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="rootPath" /> specifies a folder that does not exist.</exception>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStore.RootPath">
            <summary>
            Gets the root path for the folder that is hosted in this <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStore" />.
            </summary>
            <value>
            The root path.
            </value>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStore.Root">
            <summary>
            Gets the root collection of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" />.
            </summary>
        </member>
        <member name="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection">
            <summary>
            This class implements a disk-based <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> that maps to a folder on disk.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection.#ctor(WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection,System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection" /> class.
            </summary>
            <param name="parentCollection">The parent <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection" /> that contains this <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection" />.</param>
            <param name="path">The path to the folder on this that this <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection" /> maps to.</param>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection.Items">
            <summary>
            Gets a collection of all the items in this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection" />.
            </summary>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException">If the user is unauthorized or doesn't have access</exception>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection.CanRead(System.String)">
            <summary>
            Checks if the user has access to the path
            </summary>
            <param name="path">The path.</param>
            <returns>
            True if access, false if not
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection.CanReadFile(System.String)">
            <summary>
            Checks if access to the file is granted.
            </summary>
            <param name="path">The path to the file as a <see cref="T:System.String" /></param>
            <returns>
            The <see cref="T:System.Boolean" /> true if the user has access, else false
            </returns>
            <remarks>
            Source: <see href="http://stackoverflow.com/questions/17318585/check-if-file-can-be-read" />
            </remarks>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection.CanReadDirectory(System.String)">
            <summary>
            Checks if access to the directory is granted.
            </summary>
            <param name="path">The path to the director as a <see cref="T:System.String" /></param>
            <returns>
            The <see cref="T:System.Boolean" /> true if the user has access, else false
            </returns>
            <remarks>
            Source: <see href="http://stackoverflow.com/questions/11709862/check-if-directory-is-accessible-in-c" />
            </remarks>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection.GetItemByName(System.String)">
            <summary>
            Retrieves a store item by its name.
            </summary>
            <param name="name">The name of the store item to retrieve.</param>
            <returns>
            The store item that has the specified 
            <paramref name="name" />;
            or 
            <c>null</c> if there is no store item with that name.
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection.CreateCollection(System.String)">
            <summary>
            Creates a new collection with the specified name.
            </summary>
            <param name="name">The name of the new collection.</param>
            <returns>
            The created <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreCollection" /> instance.
            </returns>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException">When the user is unauthorized or has no access</exception>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection.Delete(WebDAVSharp.Server.Stores.IWebDavStoreItem)">
            <summary>
            Deletes a store item by its name.
            </summary>
            <param name="item">The name of the store item to delete.</param>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavNotFoundException">If the item was not found.</exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException">If the user is unauthorized or has no access.</exception>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection.CreateDocument(System.String)">
            <summary>
            Creates a new document with the specified name.
            </summary>
            <param name="name">The name of the new document.</param>
            <returns>
            The created <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreDocument" /> instance.
            </returns>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavConflictException">If the item already exists</exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException">If the user is unauthorized or has no access</exception>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection.CopyItemHere(WebDAVSharp.Server.Stores.IWebDavStoreItem,System.String,System.Boolean)">
            <summary>
            Copies an existing store item into this collection, overwriting any existing items.
            </summary>
            <param name="source">The store item to copy from.</param>
            <param name="destinationName">The name of the copy to create of <paramref name="source" />.</param>
            <param name="includeContent">The boolean for copying the containing files/folders or not.</param>
            <returns>
            The created <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> instance.
            </returns>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException">If the user is unauthorized or has no access</exception>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection.DirectoryCopy(System.String,System.String,System.Boolean)">
            <summary>
            Directories the copy.
            </summary>
            <param name="sourceDirName">Name of the source dir.</param>
            <param name="destDirName">Name of the dest dir.</param>
            <param name="copySubDirs">if set to <c>true</c> [copy sub dirs].</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Source directory does not exist or could not be found: 
                                + sourceDirName</exception>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection.MoveItemHere(WebDAVSharp.Server.Stores.IWebDavStoreItem,System.String)">
            <summary>
            Moves an existing store item into this collection, overwriting any existing items.
            </summary>
            <param name="source">The store item to move.</param>
            <param name="destinationName">The
            <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> that refers to the item that was moved,
            in its new location.</param>
            <returns>
            The moved <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> instance.
            </returns>
            <exception cref="T:System.Exception">Path to the source item not defined.</exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException">If the user is unauthorized or has no access</exception>
            <remarks>
            Note that the method should fail without creating or overwriting content in the
            target collection if the move cannot go through.
            </remarks>
        </member>
        <member name="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreDocument">
            <summary>
            This class implements a disk-based <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreDocument" /> mapped to a file.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreDocument.#ctor(WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection,System.Int64,System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreDocument" /> class.
            </summary>
            <param name="parentCollection">The parent 
            <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection" /> that contains this 
            <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem" />;
            or 
            <c>null</c> if this is the root 
            <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection" />.</param>
            <param name="path">The path that this <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem" /> maps to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <c>null</c> or empty.</exception>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreDocument.Size">
            <summary>
            Gets the size of the document in bytes.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreDocument.MimeType">
            <summary>
            Gets the mime type of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreDocument.Etag">
            <summary>
            Gets the etag of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreDocument.OpenReadStream">
            <summary>
            Opens a <see cref="T:System.IO.Stream" /> object for the document, in read-only mode.
            </summary>
            <returns>
            The <see cref="T:System.IO.Stream" /> object that can be read from.
            </returns>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException">If the user is unauthorized or has no access</exception>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreDocument.OpenWriteStream(System.Boolean)">
            <summary>
            Opens a <see cref="T:System.IO.Stream" /> object for the document, in write-only mode.
            </summary>
            <param name="append">A value indicating whether to append to the existing document;
            if 
            <c>false</c>, the existing content will be dropped.</param>
            <returns>
            The <see cref="T:System.IO.Stream" /> object that can be written to.
            </returns>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavUnauthorizedException">If the user is unauthorized or has no access</exception>
        </member>
        <member name="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem">
            <summary>
            This class implements a disk-based 
            <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> which can be either
            a folder on disk (
            <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection" />) or a file on disk
            (
            <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreDocument" />).
            </summary>
        </member>
        <member name="F:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem.Identity">
            <summary>
            Gets the Identity of the person logged on via HTTP Request.
            </summary>
        </member>
        <member name="F:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem._parentCollection">
            <summary>
            Log
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem.#ctor(WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection,System.Int64,System.String,System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem" /> class.
            </summary>
            <param name="parentCollection">The parent 
            <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection" /> that contains this 
            <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem" />;
            or 
            <c>null</c> if this is the root 
            <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreCollection" />.</param>
            <param name="path">The path that this <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem" /> maps to.</param>
            <exception cref="T:System.ArgumentNullException">path</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <c>null</c> or empty.</exception>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem.ItemPath">
            <summary>
            Gets the path to this <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem" />.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem.Id">
            <summary>
            Gets the id to this <see cref="T:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem" />.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem.Name">
            <summary>
            Gets or sets the name of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to rename item</exception>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem.IsCollection">
            <summary>
            Gets if this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" /> is a collection.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem.CreationDate">
            <summary>
            Gets the creation date of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem.ModificationDate">
            <summary>
            Gets the modification date of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
        </member>
        <member name="P:WebDAVSharp.Server.Stores.TustenaStore.WebDavTustenaStoreItem.Hidden">
            <summary>
            Gets the hidden state of this <see cref="T:WebDAVSharp.Server.Stores.IWebDavStoreItem" />.
            </summary>
            <remarks>
            Source: <see href="http://stackoverflow.com/questions/3612035/c-sharp-check-if-a-directory-is-hidden" />
            </remarks>
        </member>
        <member name="T:WebDAVSharp.Server.Utilities.Md5Util">
            <summary>
            For generating an MD5 hash
            </summary>
            <remarks>
            Source: <see href="https://gist.github.com/kristopherjohnson/3021045" />
            </remarks>
        </member>
        <member name="M:WebDAVSharp.Server.Utilities.Md5Util.Md5HashStringForUtf8String(System.String)">
            <summary>
            Compute hash for string encoded as UTF8
            </summary>
            <param name="s">String to be hashed</param>
            <returns>32-character hex string</returns>
        </member>
        <member name="M:WebDAVSharp.Server.Utilities.Md5Util.HexStringFromBytes(System.Byte[])">
            <summary>
            Convert an array of bytes to a string of hex digits
            </summary>
            <param name="bytes">Array of bytes</param>
            <returns>
            String of hex digits
            </returns>
        </member>
        <member name="T:WebDAVSharp.Server.Utilities.WebDavStatusCode">
            <summary>
            Contains the values of status codes defined for Http (WebDav).
            </summary>
        </member>
        <member name="F:WebDAVSharp.Server.Utilities.WebDavStatusCode.MultiStatus">
            <summary>
            Equivalent to Http status 207 (WebDav).
            WebDAVSharp.Server.Utilities.WebDavStatusCode.MultiStatus provides status for multiple independent operations.
            </summary>
            <remarks>
            For more information, see <see href="http://www.webdav.org/specs/rfc2518.html#STATUS_207" />.
            </remarks>
        </member>
        <member name="F:WebDAVSharp.Server.Utilities.WebDavStatusCode.UnprocessableEntity">
            <summary>
            Equivalent to Http status 422 (WebDav).
            WebDAVSharp.Server.Utilities.WebDavStatusCode.UnprocessableEntity means the server understands the content type of the request entity (hence a 415 (<see cref="F:System.Net.HttpStatusCode.UnsupportedMediaType"/>) status code is inappropriate), and the syntax of the request entity is correct (thus a 400 (<see cref="F:System.Net.HttpStatusCode.BadRequest"/>) status code is inappropriate) but was unable to process the contained instructions.
            </summary>
            <remarks>
            For more information, see <see href="http://www.webdav.org/specs/rfc2518.html#STATUS_422"/>.
            </remarks>
        </member>
        <member name="F:WebDAVSharp.Server.Utilities.WebDavStatusCode.Locked">
            <summary>
            Equivalent to Http status 423 (WebDav).
            WebDAVSharp.Server.Utilities.WebDavStatusCode.Locked means the source or destination resource of a method is locked.
            </summary>
            <remarks>
            For more information, see <see href="http://www.webdav.org/specs/rfc2518.html#STATUS_423"/>.
            </remarks>
        </member>
        <member name="F:WebDAVSharp.Server.Utilities.WebDavStatusCode.FailedDependency">
            <summary>
            Equivalent to Http status 424 (WebDav).
            WebDAVSharp.Server.Utilities.WebDavStatusCode.FailedDependency means that the method could not be performed on the resource because the requested action depended on another action and that action failed.
            </summary>
            <remarks>
            For more information, see <see href="http://www.webdav.org/specs/rfc2518.html#STATUS_424"/>.
            </remarks>
        </member>
        <member name="F:WebDAVSharp.Server.Utilities.WebDavStatusCode.InsufficientStorage">
            <summary>
            Equivalent to Http status 507 (WebDav).
            WebDAVSharp.Server.Utilities.WebDavStatusCode.InsufficientStorage means the method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.
            </summary>
            <remarks>
            For more information, see <see href="http://www.webdav.org/specs/rfc2518.html#STATUS_507" />.
            </remarks>
        </member>
        <member name="T:WebDAVSharp.Server.WebDavDisposableBase">
            <summary>
            This abstract base class implements the <see cref="T:System.IDisposable" /> pattern in a reusable way.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavDisposableBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavDisposableBase.EnsureNotDisposed">
            <summary>
            This method will ensure that the object has not been disposed of through a call
            to
            <see cref="M:WebDAVSharp.Server.WebDavDisposableBase.Dispose" />, and if it has, it will throw
            <see cref="T:System.ObjectDisposedException" />
            </summary>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed of.</exception>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavDisposableBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WebDAVSharp.Server.WebDavExtensions">
            <summary>
            This class holds extension methods for various types related to WebDAV#.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavExtensions.GetParentUri(System.Uri)">
            <summary>
            Gets the Uri to the parent object.
            </summary>
            <param name="uri">The <see cref="T:System.Uri" /> of a resource, for which the parent Uri should be retrieved.</param>
            <returns>
            The parent <see cref="T:System.Uri" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">uri</exception>
            <exception cref="T:System.InvalidOperationException">Cannot get parent of root</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri" /> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="uri" /> has no parent, it refers to a root resource.</exception>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavExtensions.SendSimpleResponse(System.Web.HttpContext,System.Net.HttpStatusCode)">
            <summary>
            Sends a simple response with a specified HTTP status code but no content.
            </summary>
            <param name="context">The <see cref="!:IHttpListenerContext" /> to send the response through.</param>
            <param name="statusCode">The HTTP status code for the response.</param>
            <exception cref="T:System.ArgumentNullException">context</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="context" /> is <c>null</c>.</exception>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavExtensions.GetPrefixUri(System.Uri)">
            <summary>
            Gets the prefix <see cref="T:System.Uri" /> that matches the specified <see cref="T:System.Uri" />.
            </summary>
            <param name="uri">The <see cref="T:System.Uri" /> to find the most specific prefix <see cref="T:System.Uri" /> for.</param>
            <param name="server">The 
            <see cref="!:WebDavServer" /> that hosts the WebDAV server and holds the collection
            of known prefixes.</param>
            <returns>
            The most specific <see cref="T:System.Uri" /> for the given <paramref name="uri" />.
            </returns>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavInternalServerException">Unable to find correct server root</exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavInternalServerException"><paramref name="uri" /> specifies a <see cref="T:System.Uri" /> that is not known to the <paramref name="server" />.</exception>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavExtensions.GetItem(System.Uri,WebDAVSharp.Server.Stores.IWebDavStore)">
            <summary>
            Retrieves a store item through the specified
            <see cref="T:System.Uri" /> from the
            specified
            <see cref="!:WebDavServer" /> and
            <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" />.
            </summary>
            <param name="uri">The <see cref="T:System.Uri" /> to retrieve the store item for.</param>
            <param name="server">The <see cref="!:WebDavServer" /> that hosts the <paramref name="store" />.</param>
            <param name="store">The <see cref="T:WebDAVSharp.Server.Stores.IWebDavStore" /> from which to retrieve the store item.</param>
            <returns>
            The retrieved store item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><para>
              <paramref name="uri" /> is <c>null</c>.</para>
            <para>
              <paramref name="server" /> is <c>null</c>.</para>
            <para>
              <paramref name="store" /> is <c>null</c>.</para></exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavNotFoundException">If the item was not found.</exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavConflictException"><paramref name="uri" /> refers to a document in a collection, where the collection does not exist.</exception>
            <exception cref="T:WebDAVSharp.Server.Exceptions.WebDavNotFoundException"><paramref name="uri" /> refers to a document that does not exist.</exception>
        </member>
        <member name="T:WebDAVSharp.Server.WebDavProperty">
            <summary>
            This class implements the core WebDAV server.
            </summary>
        </member>
        <member name="F:WebDAVSharp.Server.WebDavProperty.Name">
            <summary>
            This class implements the core WebDAV server.
            </summary>
        </member>
        <member name="F:WebDAVSharp.Server.WebDavProperty.Namespace">
            <summary>
            This class implements the core WebDAV server.
            </summary>
        </member>
        <member name="F:WebDAVSharp.Server.WebDavProperty.Value">
            <summary>
            This class implements the core WebDAV server.
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavProperty.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavProperty.#ctor(System.String)">
            <summary>
            Constructor for the WebDAVProperty class with "DAV:" as namespace and an empty value
            </summary>
            <param name="name">The name of the WebDAV property</param>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavProperty.#ctor(System.String,System.String)">
            <summary>
            Constructor for the WebDAVProperty class with "DAV:" as namespace
            </summary>
            <param name="name">The name of the WebDAV property</param>
            <param name="value">The value of the WebDAV property</param>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavProperty.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for the WebDAVProperty class
            </summary>
            <param name="name">The name of the WebDAV property</param>
            <param name="value">The value of the WebDAV property</param>
            <param name="ns">The namespace of the WebDAV property</param>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavProperty.ToString">
            <summary>
            This class implements the core WebDAV server.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavProperty.StartString">
            <summary>
            This class implements the core WebDAV server.
            </summary>
            <returns>The begin tag of an XML element as a string</returns>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavProperty.EmptyString">
            <summary>
            This class implements the core WebDAV server.
            </summary>
            <returns>An empty XML element as a string</returns>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavProperty.EndString">
            <summary>
            This class implements the core WebDAV server.
            </summary>
            <returns>The closing tag of an XML element as a string</returns>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavProperty.ToXmlDocumentFragment(System.Xml.XmlDocument)">
            <summary>
            Creates an XmlDocumentFragment from the current WebDAVProperty
            </summary>
            <param name="doc">The XmlDocument where a XmlDocumentFragment is needed</param>
            <returns>
            The XmlDocumentFragment of the current WebDAVProperty object
            </returns>
        </member>
        <member name="M:WebDAVSharp.Server.WebDavProperty.ToXmlElement(System.Xml.XmlDocument)">
            <summary>
            reates an XmlElement from the current WebDAVProperty
            </summary>
            <param name="doc">The XmlDocument where a XmlElement is needed</param>
            <returns>
            The XmlElement of the current WebDAVProperty object
            </returns>
        </member>
        <member name="T:System.Text.Base32Encoder">
            <summary>
            Encodes text into Base32. Taken from http://www.codeproject.com/Articles/35492/Base32-encoding-implementation-in-NET
            </summary>
        </member>
    </members>
</doc>
